HumanEval/0 from typing import List


def has_close_elements(numbers: List[float], threshold: float) -> bool:
    """ Check if in given list of numbers, are any two numbers closer to each other than
    given threshold.
    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)
    False
    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)
    True
    """
 
    assert isinstance(threshold, float) and threshold > 0, "invalid inputs" # $_CONTRACT_$
    assert isinstance(numbers, list), "invalid inputs" # $_CONTRACT_$
    assert all([isinstance(v, (int, float)) for v in numbers]), "invalid inputs" # $_CONTRACT_$
 

    sorted_numbers = sorted(numbers)
    for i in range(len(sorted_numbers) - 1):
        if sorted_numbers[i + 1] - sorted_numbers[i] < threshold:
            return True
    return False

 has_close_elements [[[1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3], [[1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05], [[1.0, 2.0, 5.9, 4.0, 5.0], 0.95], [[1.0, 2.0, 5.9, 4.0, 5.0], 0.8], [[1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1], [[1.1, 2.2, 3.1, 4.1, 5.1], 1.0], [[1.1, 2.2, 3.1, 4.1, 5.1], 0.5]] [[[1.0, 2.5, 3.0, 4.5, 5.0, 6.5], 0.4], [[-2.0, 2.0, 3.0, 4.0], 1.5], [[0.0, -1.0, 1.0, 2.0, 3.0, 4.0, 27.0, -3.5, 3.5], 0.5], [[1.0, 2.5, 3.0, 4.5, 5.0, 5.40171670636793, 5.40171670636793], 0.3], [[0.1, 0.5, 1.0, 1.5, 2.0], 0.4], [[0.1, 0.5, 1.0, 1.5, 2.0, 0.5], 0.4], [[0.02, 0.03, 0.04, 0.009949556820244546, 0.05, 0.01227074844619054], 0.0003], [[1.0, 3.0], 4.28359856787508], [[1.0, 2.5, 3.0, 4.5, 5.0, 6.5], 0.5837785211547324], [[1.0], 0.5], [[1.0, 0.0, 0.5, 1.0], 0.3], [[1.0, 2.0, 3.0, 4.0, 5.0, 2.4442803957785837, 1.0], 0.5]] 0
HumanEval/1 from typing import List


def separate_paren_groups(paren_string: str) -> List[str]:
    """ Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    separate those group into separate strings and return the list of those.
    Separate groups are balanced (each open brace is properly closed) and not nested within each other
    Ignore any spaces in the input string.
    >>> separate_paren_groups('( ) (( )) (( )( ))')
    ['()', '(())', '(()())']
    """
 
    assert type(paren_string) == str, "invalid inputs" # $_CONTRACT_$
    cnt = 0 # $_CONTRACT_$
    for ch in paren_string: # $_CONTRACT_$
        assert ch in ["(", ")", " "], "invalid inputs"  # $_CONTRACT_$
        if ch == "(": cnt += 1 # $_CONTRACT_$
        if ch == ")": cnt -= 1 # $_CONTRACT_$
        assert cnt >= 0, "invalid inputs" # $_CONTRACT_$
    assert cnt == 0, "invalid inputs" # $_CONTRACT_$
 

    cnt, group, results = 0, "", []
    for ch in paren_string:
        if ch == "(": cnt += 1
        if ch == ")": cnt -= 1
        if ch != " ": group += ch
        if cnt == 0:
            if group != "": results.append(group)
            group = ""
    return results

 separate_paren_groups [['(()()) ((())) () ((())()())'], ['() (()) ((())) (((())))'], ['(()(())((())))'], ['( ) (( )) (( )( ))']] [['()'], ['((() ((()()((((((  )))))))()()))) (()(()))()(()())'], ['( ) (( )) (( )( ))       ()()()']] 0
HumanEval/2 

def truncate_number(number: float) -> float:
    """ Given a positive floating point number, it can be decomposed into
    and integer part (largest integer smaller than given number) and decimals
    (leftover part always smaller than 1).

    Return the decimal part of the number.
    >>> truncate_number(3.5)
    0.5
    """
 
    assert number > 0, "invalid inputs" # $_CONTRACT_$
    assert isinstance(number, float), "invalid inputs" # $_CONTRACT_$
    assert number != float("+inf"), "invalid inputs" # $_CONTRACT_$
 

    return number - int(number)

 truncate_number [[3.5], [1.33], [123.456]] [[999.99999], [0.04320870526393539], [1.0], [1e-323], [1000000000.0]] 1e-06
HumanEval/3 from typing import List


def below_zero(operations: List[int]) -> bool:
    """ You're given a list of deposit and withdrawal operations on a bank account that starts with
    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    at that point function should return True. Otherwise it should return False.
    >>> below_zero([1, 2, 3])
    False
    >>> below_zero([1, 2, -4, 5])
    True
    """
 
    assert type(operations) == list, "invalid inputs" # $_CONTRACT_$
    assert all([isinstance(v, int) for v in operations]), "invalid inputs" # $_CONTRACT_$
 
    account = 0
    for operation in operations:
        account += operation
        if account < 0:
            return True
    return False

 below_zero [[[]], [[1, 2, -3, 1, 2, -3]], [[1, 2, -4, 5, 6]], [[1, -1, 2, -2, 5, -5, 4, -4]], [[1, -1, 2, -2, 5, -5, 4, -5]], [[1, -2, 2, -2, 5, -5, 4, -4]]] [[[0]], [[1, 2, 3, 4, -10, 5, 6, -15]], [[1, 2, 3, -6]], [[0, 0, 0, 0, -1]], [[7, 1, 2, -4, 4, -4, 2, -2, -2, -1, 0, -1, -1, -1]], [[1, -1, 1, -1, 1, -1, 1, -1, 0, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, -1, 1]], [[15, 2, -6, -6, -6]], [[1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1]], [[-3]], [[-1, -3, 6]]] 0
HumanEval/4 from typing import List


def mean_absolute_deviation(numbers: List[float]) -> float:
    """ For a given list of input numbers, calculate Mean Absolute Deviation
    around the mean of this dataset.
    Mean Absolute Deviation is the average absolute difference between each
    element and a centerpoint (mean in this case):
    MAD = average | x - x_mean |
    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])
    1.0
    """
 
    assert all(isinstance(x, float) for x in numbers), "invalid inputs" # $_CONTRACT_$
    assert numbers != [], "invalid inputs" # $_CONTRACT_$
 
    mean = sum(numbers) / len(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)

 mean_absolute_deviation [[[1.0, 2.0, 3.0]], [[1.0, 2.0, 3.0, 4.0]], [[1.0, 2.0, 3.0, 4.0, 5.0]]] [[[-1.0, 4.5, 0.0, 2.5, -3.0]], [[1.0, 1.0, 1.0, 2.0, 2.0, 2.0]], [[0.0, 0.0, 0.0, 5.0, 0.0, 5.7682420395965925]], [[1e+308]], [[-2.0, 2.0]]] 1e-06
HumanEval/5 from typing import List


def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    """ Insert a number 'delimeter' between every two consecutive elements of input list `numbers'
    >>> intersperse([], 4)
    []
    >>> intersperse([1, 2, 3], 4)
    [1, 4, 2, 4, 3]
    """
 
    assert all([isinstance(v, int) for v in numbers]), "invalid inputs" # $_CONTRACT_$
    assert isinstance(delimeter, int), "invalid inputs" # $_CONTRACT_$
 

    res = []
    for i in range(len(numbers)):
        res.append(numbers[i])
        if i != len(numbers) - 1:
            res.append(delimeter)
    return res

 intersperse [[[], 7], [[5, 6, 3, 2], 8], [[2, 2, 2], 2]] [[[1, 2, 3], 0], [[10], 5], [[3, 6, 2, 5, 1, 9], 0], [[], 2], [[4], 4], [[5, 5], 5], [[0, 0, 0], 7], [[1, 9, 5, 6], 3]] 0
HumanEval/6 from typing import List


def parse_nested_parens(paren_string: str) -> List[int]:
    """ Input to this function is a string represented multiple groups for nested parentheses separated by spaces.
    For each of the group, output the deepest level of nesting of parentheses.
    E.g. (()()) has maximum two levels of nesting while ((())) has three.

    >>> parse_nested_parens('(()()) ((())) () ((())()())')
    [2, 3, 1, 3]
    """
 
    assert type(paren_string) == str, "invalid inputs" # $_CONTRACT_$
    cnt = 0 # $_CONTRACT_$
    for ch in paren_string: # $_CONTRACT_$
        assert ch in ["(", ")", " "], "invalid inputs"  # $_CONTRACT_$
        if ch == "(": cnt += 1 # $_CONTRACT_$
        if ch == ")": cnt -= 1 # $_CONTRACT_$
        assert cnt >= 0, "invalid inputs" # $_CONTRACT_$
    assert cnt == 0, "invalid inputs"
 
    
    def count_depth(s: str) -> int:
        max_depth, cnt = 0, 0
        for ch in s:
            if ch == "(": cnt += 1
            if ch == ")": cnt -= 1
            max_depth = max(max_depth, cnt)
        return max_depth
    
    return [count_depth(s) for s in paren_string.split(" ") if s != ""]

 parse_nested_parens [['(()()) ((())) () ((())()())'], ['() (()) ((())) (((())))'], ['(()(())((())))']] [['((()))'], ['(())(()(()))((()()))']] 0
HumanEval/7 from typing import List


def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    """ Filter an input list of strings only for ones that contain given substring
    >>> filter_by_substring([], 'a')
    []
    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')
    ['abc', 'bacd', 'array']
    """
 
    assert type(strings) == list, "invalid inputs" # $_CONTRACT_$
    assert all(type(x) == str for x in strings), "invalid inputs" # $_CONTRACT_$
    assert isinstance(substring, str), "invalid inputs" # $_CONTRACT_$
 
    return list(filter(lambda s: substring in s, strings))

 filter_by_substring [[[], 'john'], [['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx'], [['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx'], [['grunt', 'trumpet', 'prune', 'gruesome'], 'run']] [[['banana', 'apple', 'kiwi', 'peach'], 'a'], [['Washington', 'DC', 'New York City', 'Boston', 'Los Angeles', 'San Francisco', 'Miami'], 'an'], [['', '', ''], ''], [['abcdefg'], 'universally'], [['The Shawshank Redemption', ' The Godfather ', 'The Dark Knight', '  The Lord of the Rings   ', '   Star Wars', ' Inception     ', 'Forrest Gump'], ' '], [['fom', 'abcdefg'], 'fom'], [['Washington', 'DC', 'New York City', 'Boston', 'Los Angeles', 'San Francisco', 'Miami'], 'York']] 0
HumanEval/8 from typing import List, Tuple


def sum_product(numbers: List[int]) -> Tuple[int, int]:
    """ For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.
    Empty sum should be equal to 0 and empty product should be equal to 1.
    >>> sum_product([])
    (0, 1)
    >>> sum_product([1, 2, 3, 4])
    (10, 24)
    """
 
    assert all([isinstance(v, int) for v in numbers]), "invalid inputs" # $_CONTRACT_$
 
    s, p = 0, 1
    for number in numbers:
        s += number
        p *= number
    return s, p

 sum_product [[[]], [[1, 1, 1]], [[100, 0]], [[3, 5, 7]], [[10]]] [[[2, 4, 6, 8, 10]], [[2, 4, 8, 1, 16, 4, 16, 16, 5, -1, 2, 4, 16, 10, 8]], [''], [[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]], [[0]]] 0
HumanEval/9 from typing import List, Tuple


def rolling_max(numbers: List[int]) -> List[int]:
    """ From a given list of integers, generate a list of rolling maximum element found until given moment
    in the sequence.
    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])
    [1, 2, 3, 3, 3, 4, 4]
    """
 
    assert isinstance(numbers, list), "invalid inputs" # $_CONTRACT_$
    assert all([isinstance(v, int) for v in numbers]), "invalid inputs" # $_CONTRACT_$
 
    return [max(numbers[:(i+1)]) for i in range(len(numbers))]

 rolling_max [[[]], [[1, 2, 3, 4]], [[4, 3, 2, 1]], [[3, 2, 3, 100, 3]]] [[[1, 1, 1, 1, 1]], [[1, 3, 2, 4, 3, 5, 4, 6]], [[-2, 5, 10, -1, -5, 20, 15, 6, 9, -8, -1]], [[10, 5, 20, 30, 25, 20, 15, 10]], [[1]]] 0
HumanEval/10 

def is_palindrome(string: str) -> bool:
    """ Test if given string is a palindrome """
    return string == string[::-1]


def make_palindrome(string: str) -> str:
    """ Find the shortest palindrome that begins with a supplied string.
    Algorithm idea is simple:
    - Find the longest postfix of supplied string that is a palindrome.
    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    >>> make_palindrome('')
    ''
    >>> make_palindrome('cat')
    'catac'
    >>> make_palindrome('cata')
    'catac'
    """
 
    assert type(string) == str, "invalid inputs" # $_CONTRACT_$
 
    if is_palindrome(string):
        return string
    for i in range(len(string)):
        if is_palindrome(string[i:]):
            return string + string[i-1::-1]

 make_palindrome [[''], ['x'], ['xyz'], ['xyx'], ['jerry']] [['race'], ['level'], ['raracece'], ['raceredder'], ['abacabacaba'], ['rrefrerace'], ['']] 0
HumanEval/11 from typing import List


def string_xor(a: str, b: str) -> str:
    """ Input are two strings a and b consisting only of 1s and 0s.
    Perform binary XOR on these inputs and return result also as a string.
    >>> string_xor('010', '110')
    '100'
    """
 
    assert isinstance(a, str) and isinstance(b, str), "invalid inputs" # $_CONTRACT_$
    assert len(a) == len(b), "invalid inputs" # $_CONTRACT_$
    assert set(a).issubset({"0", "1"}) and set(b).issubset({"0", "1"}), "invalid inputs" # $_CONTRACT_$
 

    return "".join(str(int(a[i]) ^ int(b[i])) for i in range(len(a)))

 string_xor [['111000', '101010'], ['1', '1'], ['0101', '0000']] [['000', '000'], ['1111', '1111'], ['0101100000100000', '0110000010101010'], ['', ''], ['111', '000']] 0
HumanEval/12 from typing import List, Optional


def longest(strings: List[str]) -> Optional[str]:
    """ Out of list of strings, return the longest one. Return the first one in case of multiple
    strings of the same length. Return None in case the input list is empty.
    >>> longest([])

    >>> longest(['a', 'b', 'c'])
    'a'
    >>> longest(['a', 'bb', 'ccc'])
    'ccc'
    """
 
    assert type(strings) == list, "invalid inputs" # $_CONTRACT_$
    assert all([isinstance(v, str) for v in strings]), "invalid inputs" # $_CONTRACT_$
 
    if not strings:
        return None

    maxlen = max(len(x) for x in strings)
    for s in strings:
        if len(s) == maxlen:
            return s

 longest [[[]], [['x', 'y', 'z']], [['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']]] [[['', 'a', 'aa', 'aaa']], [[]], [['', 'Hola,', '◯◯◯', 'bună ziua', ' привет,', ' ', '😀😀😀', '         ', 'rape']], [['Apple', 'bbccc']], [['  a   ']], [[' ', '', '        ', '  Grrape   ', 'ß', '   \t', ' ', ' ']], [['cat', 'horse']], [['ß', '◯', 'ß', 'Ø', 'œ', '\uf8ff']], [['a', 'b', 'aa', 'bb']], [['Hello, Bonjour, こんにちは, Hola, приNEsвет', 'Hello, Bonjour, こんにちは, Hola, приNEsвет', 'こんにちは, Bonjour,u Hello, Hola, привет', 'こんにちは, Bonjour,u Hello, Hola, прbună ziuaвет', 'привет, Hola, Bonjour, こんにちは, Hello', 'Hello, Bonjour, こんにちは, Hola, приNEsвет']]] 0
HumanEval/13 

def greatest_common_divisor(a: int, b: int) -> int:
    """ Return a greatest common divisor of two integers a and b
    >>> greatest_common_divisor(3, 5)
    1
    >>> greatest_common_divisor(25, 15)
    5
    """
 
    assert type(a) == int and type(b) == int, "invalid inputs" # $_CONTRACT_$
    assert a > 0 and b > 0, "invalid inputs" # $_CONTRACT_$
 

    def query_gcd(a: int, b: int) -> int:
        return a if b == 0 else query_gcd(b, a % b)
    return query_gcd(a, b)    

 greatest_common_divisor [[3, 7], [10, 15], [49, 14], [144, 60]] [[100, 50], [123456789, 987654321], [100, 27], [540, 540], [2147483647, 1], [191, 1000000000]] 0
HumanEval/14 from typing import List


def all_prefixes(string: str) -> List[str]:
    """ Return list of all prefixes from shortest to longest of the input string
    >>> all_prefixes('abc')
    ['a', 'ab', 'abc']
    """
 
    assert isinstance(string, str), "invalid inputs" # $_CONTRACT_$
 
    return [string[:(i + 1)] for i in range(len(string))]

 all_prefixes [[''], ['asdfgh'], ['WWW']] [['Hello there!'], ['racecHello therre!ar'], [''], ['n'], ['xx']] 0
HumanEval/15 

def string_sequence(n: int) -> str:
    """ Return a string containing space-delimited numbers starting from 0 upto n inclusive.
    >>> string_sequence(0)
    '0'
    >>> string_sequence(5)
    '0 1 2 3 4 5'
    """
 
    assert type(n) == int, "invalid inputs" # $_CONTRACT_$
    assert n >= 0, "invalid inputs" # $_CONTRACT_$
 

    return " ".join(map(str, range(n + 1)))

 string_sequence [[0], [3], [10]] [[1], [1000006], [1000010], [0], [1000011], [1000002], [1000000]] 0
HumanEval/16 

def count_distinct_characters(string: str) -> int:
    """ Given a string, find out how many distinct characters (regardless of case) does it consist of
    >>> count_distinct_characters('xyzXYZ')
    3
    >>> count_distinct_characters('Jerry')
    4
    """
 
    assert isinstance(string, str), "invalid inputs" # $_CONTRACT_$
 
    return len(set(string.lower()))

 count_distinct_characters [[''], ['abcde'], ['abcdecadeCADE'], ['aaaaAAAAaaaa'], ['Jerry jERRY JeRRRY']] [['hello wThe quick brown fox jumps over e lazy doAbCdEfGgorld'], ['!."£$%^rQXXQxau&*()_+-={}[1234567890",]|\\:;"<>,.?/^~`'], [''], ['a']] 0
HumanEval/17 from typing import List


def parse_music(music_string: str) -> List[int]:
    """ Input to this function is a string representing musical notes in a special ASCII format.
    Your task is to parse this string and return list of integers corresponding to how many beats does each
    not last.

    Here is a legend:
    'o' - whole note, lasts four beats
    'o|' - half note, lasts two beats
    '.|' - quater note, lasts one beat

    >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]
    """
 
    assert isinstance(music_string, str), "invalid inputs" # $_CONTRACT_$
    assert music_string == "" or all(map(lambda x: x in ["o", "o|", ".|"], music_string.split(" "))), "invalid inputs" # $_CONTRACT_$
 

    def count_beats(note: str) -> int:
        if note == "o": return 4
        elif note == "o|": return 2
        elif note == ".|": return 1
    
    if music_string == "": return []
    return list(map(count_beats, music_string.split(" ")))

 parse_music [[''], ['o o o o'], ['.| .| .| .|'], ['o| o| .| .| o o o o'], ['o| .| o| .| o o| o o|']] [['.| .| o| o| o| o| .| .| o| o| o| o| o| o| o o o o'], ['o o| o| o|'], [''], ['o'], ['o|']] 0
HumanEval/18 

def how_many_times(string: str, substring: str) -> int:
    """ Find how many times a given substring can be found in the original string. Count overlaping cases.
    >>> how_many_times('', 'a')
    0
    >>> how_many_times('aaa', 'a')
    3
    >>> how_many_times('aaaa', 'aa')
    3
    """
 
    assert isinstance(string, str) and isinstance(substring, str), "invalid inputs" # $_CONTRACT_$
    assert substring != "", "invalid inputs" # $_CONTRACT_$
 

    occurences = 0
    for i in range(len(string)):
        if string[i:].startswith(substring):
            occurences += 1
    return occurences

 how_many_times [['', 'x'], ['xyxyxyx', 'x'], ['cacacacac', 'cac'], ['john doe', 'john']] [['ababa', 'aba'], ['zz', 'bbb'], ['aaaaabbbbaaaa', 'aaa'], ['hello world', 'o'], ['', 'adipiscilang'], ['AAAAaaaaaaaabaaaaaaaAAA', 'AAAAAAA'], ['aaaabbbcbcccc', 'hello woorrld'], ['AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB', 'AAAAAAA'], [' ', ' '], ['12211221122', '122']] 0
HumanEval/19 from typing import List


def sort_numbers(numbers: str) -> str:
    """ Input is a space-delimited string of numberals from 'zero' to 'nine'.
    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    Return the string with numbers sorted from smallest to largest
    >>> sort_numbers('three one five')
    'one three five'
    """
 
    assert isinstance(numbers, str), "invalid inputs" # $_CONTRACT_$
    assert numbers == "" or all(map(lambda x: x in ["zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine"], numbers.split(" "))), "invalid inputs" # $_CONTRACT_$
 
    
    to_int = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}

    if numbers == "": return ""
    return " ".join(sorted(numbers.split(" "), key=lambda n: to_int[n]))

 sort_numbers [[''], ['three'], ['three five nine'], ['five zero four seven nine eight'], ['six five four three two one zero']] [['four eight two'], [''], ['nine eight seven six five four three two one zero'], ['zero five four zero five four one seven eight two six'], ['nine']] 0
HumanEval/20 from typing import List, Tuple


def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    """ From a supplied list of numbers (of length at least two) select and return two that are the closest to each
    other and return them in order (smaller number, larger number).
    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])
    (2.0, 2.2)
    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])
    (2.0, 2.0)
    """
 
    assert all(type(x) in [int, float] for x in numbers), "invalid inputs" # $_CONTRACT_$
    assert len(numbers) >= 2, "invalid inputs"  # $_CONTRACT_$
 

    numbers.sort()
    min_diff = float("inf")
    min_pair = None
    for l, r in zip(numbers[:-1], numbers[1:]):
        diff = r - l
        if diff < min_diff:
            min_diff = diff
            min_pair = (l, r)
    return min_pair

 find_closest_elements [[[1.0, 2.0, 3.9, 4.0, 5.0, 2.2]], [[1.0, 2.0, 5.9, 4.0, 5.0]], [[1.0, 2.0, 3.0, 4.0, 5.0, 2.2]], [[1.0, 2.0, 3.0, 4.0, 5.0, 2.0]], [[1.1, 2.2, 3.1, 4.1, 5.1]]] [[[1.5, 2.5, 3.5, 4.5]], [[0.5, 0.9, 1.2, 1.8, 2.5, 2.9, 3.1]], [[1.1963194756636508, 2.0, 2.1, 2.2, 2.3, 2.4, 2.424000205756431, 2.5, 3.4]], [[2.0, 2.0, 4.0, 4.5, 6.0, 8.44265458853031, 10.0, 10.0, 10.0, 12.0, 14.0, 16.0, 16.0, 18.0, 20.0, 20.0]], [[2.0, 2.1, 2.1]], [[-3, 53]], [[-20.0, -10.0, -7.0, -5.5, -1.0, 0.0, 3.14159, 8.0, 12.345, 30.0]]] 0
HumanEval/21 from typing import List


def rescale_to_unit(numbers: List[float]) -> List[float]:
    """ Given list of numbers (of at least two elements), apply a linear transform to that list,
    such that the smallest number will become 0 and the largest will become 1
    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])
    [0.0, 0.25, 0.5, 0.75, 1.0]
    """
 
    assert all(type(x) in [int, float] for x in numbers), "invalid inputs" # $_CONTRACT_$
    assert len(numbers) >= 2, "invalid inputs" # $_CONTRACT_$
    assert max(numbers) > min(numbers), "invalid inputs" # $_CONTRACT_$
 

    ma, mi = max(numbers), min(numbers)
    k = 1 / (ma - mi)
    return list(map(lambda x: (x - mi) * k, numbers))

 rescale_to_unit [[[2.0, 49.9]], [[100.0, 49.9]], [[1.0, 2.0, 3.0, 4.0, 5.0]], [[2.0, 1.0, 5.0, 3.0, 4.0]], [[12.0, 11.0, 15.0, 13.0, 14.0]]] [[[-10.0, 0.0, 10.0]], [[10.0, 4.067002335783351, 0.0, -2.5, -5.0, -9.46747586475692]], [[-6.486753627961523, 0.0]], [[5e-09, 1000000000]], [[3.4028235e+38, -3.4028235e+38]], [[0.0, 0.1581270304608839, 0.0, 0.0, 0.0]], [[5.0, 2.0, 2.0, 5.0]]] 0
HumanEval/22 from typing import List, Any


def filter_integers(values: List[Any]) -> List[int]:
    """ Filter given list of any python values only for integers
    >>> filter_integers(['a', 3.14, 5])
    [5]
    >>> filter_integers([1, 2, 3, 'abc', {}, []])
    [1, 2, 3]
    """
 
    assert type(values) == list, "invalid inputs" # $_CONTRACT_$
 
    return list(filter(lambda x: type(x) == int, values))

 filter_integers [[[]], [[4, {}, [], 23.2, 9, 'adasd']], [[3, 'c', 3, 3, 'a', 'b']]] [[[1, 2, 3, 4, 5]], [[True, False, None, 0, -10, 'test', [], {}, 3.14]]] 0
HumanEval/23 

def strlen(string: str) -> int:
    """ Return length of given string
    >>> strlen('')
    0
    >>> strlen('abc')
    3
    """
 
    assert isinstance(string, str), "invalid inputs" # $_CONTRACT_$
 
    return len(string)

 strlen [[''], ['x'], ['asdasnakj']] [['  \r  \n   àèì t   1t  The    òõùáéíóúýâêîôûãñõäëïöüÿ'], [''], ['abcdefghijklmnopqrstuvwxyz'], ['Hello, World!'], [' ']] 0
HumanEval/24 

def largest_divisor(n: int) -> int:
    """ For a given number n, find the largest number that divides n evenly, smaller than n
    >>> largest_divisor(15)
    5
    """
 
    assert type(n) == int, "invalid inputs" # $_CONTRACT_$
    assert n > 1, "invalid inputs" # $_CONTRACT_$
 

    for i in range(2, n):
        if n % i == 0: return n // i
    return 1

 largest_divisor [[3], [7], [10], [100], [49]] [[27], [101], [500], [1234571], [1234567], [1234570], [1234565], [35], [1234566], [1234569], [1234572], [2]] 0
HumanEval/25 from typing import List


def factorize(n: int) -> List[int]:
    """ Return list of prime factors of given integer in the order from smallest to largest.
    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.
    Input number should be equal to the product of all factors
    >>> factorize(8)
    [2, 2, 2]
    >>> factorize(25)
    [5, 5]
    >>> factorize(70)
    [2, 5, 7]
    """
 
    assert type(n) == int, "invalid inputs" # $_CONTRACT_$
    assert n >= 2, "invalid inputs" # $_CONTRACT_$
 
    import math
    fact = []
    i = 2
    while i <= int(math.sqrt(n) + 1):
        if n % i == 0:
            fact.append(i)
            n //= i
        else:
            i += 1

    if n > 1:
        fact.append(n)
    return fact

 factorize [[2], [4], [8], [57], [3249], [185193], [20577], [18]] [[10], [1024], [15], [987654321], [112234372], [123456789], [11]] 0
HumanEval/26 from typing import List


def remove_duplicates(numbers: List[int]) -> List[int]:
    """ From a list of integers, remove all elements that occur more than once.
    Keep order of elements left the same as in the input.
    >>> remove_duplicates([1, 2, 3, 2, 4])
    [1, 3, 4]
    """
 
    assert type(numbers) == list, "invalid inputs" # $_CONTRACT_$
    assert all(type(x) == int for x in numbers), "invalid inputs" # $_CONTRACT_$
 
    num_cnt = dict()
    for number in numbers:
        if number not in num_cnt:
            num_cnt[number] = 0
        num_cnt[number] += 1
    return [number for number in numbers if num_cnt[number] == 1]

 remove_duplicates [[[]], [[1, 2, 3, 4]], [[1, 2, 3, 2, 4, 3, 5]]] [[[1, 1, 2, 2, 3, 3, 4, 4]], [[1, 2, 3, 4, 5, 6, 7, 8, 9]], [[1, 2, 3, 4, 5, 6, 6, 7, 8]], [[1, 2, 3, 4, 5, 6, -1, 7, 8, 9, 8, 9, 9]]] 0
HumanEval/27 

def flip_case(string: str) -> str:
    """ For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    >>> flip_case('Hello')
    'hELLO'
    """
 
    assert type(string) == str, "invalid inputs" # $_CONTRACT_$
 
    return "".join(map(lambda x: x.swapcase(), string))

 flip_case [[''], ['Hello!'], ['These violent delights have violent ends']] [['123abc'], ['Карл у Клары украл кораллы, а К лара у Куарла украла кларнетtThe Quick Brown FOX JUMPμχῃS Over the lazy dogএএটি একটি ণউদাহরণক্t্ত কpমo co.্ষেত্রHeSí,лара'], [''], ['reКарл у Клары украл кораллы, а ']] 0
HumanEval/28 from typing import List


def concatenate(strings: List[str]) -> str:
    """ Concatenate list of strings into a single string
    >>> concatenate([])
    ''
    >>> concatenate(['a', 'b', 'c'])
    'abc'
    """
 
    assert all(isinstance(s, str) for s in strings), "invalid inputs" # $_CONTRACT_$
    assert isinstance(strings, list), "invalid inputs" # $_CONTRACT_$
 
    return "".join(strings)

 concatenate [[[]], [['x', 'y', 'z']], [['x', 'y', 'z', 'w', 'k']]] [[['apple', 'banana', 'orange']], [[]], [[' ']], [['How', '', 'much', 'wood', 'a', 'woodchuck', 'chuck', '🧐', 'a', 'could', 'chuck', 'wood']], [['Hello, World!']]] 0
HumanEval/29 from typing import List


def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    """ Filter an input list of strings only for ones that start with a given prefix.
    >>> filter_by_prefix([], 'a')
    []
    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')
    ['abc', 'array']
    """
 
    assert all(isinstance(s, str) for s in strings), "invalid inputs" # $_CONTRACT_$
    assert isinstance(prefix, str), "invalid inputs" # $_CONTRACT_$
 
    return list(filter(lambda x: x.startswith(prefix), strings))

 filter_by_prefix [[[], 'john'], [['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx']] [[['abc', 'abcd', 'abcde'], 'abc'], [['qwerty', 'QwertY', 'qwertyuiop', 'QWERTYUIOP', 'asdfgh', 'ASDFGH', 'as fgh', 'ASD FGH'], 'qwe'], ['apriccot', ''], [['a', 'ab', 'abc', 'ba', 'bb', 'bc'], 'a'], ['', 'aa'], [['', ' ', '\n', '\t', 'a', 'ab', 'abc', 'abcde'], ''], [['qwerty', 'QwertY', 'qwertyuiop', 'QWERTYUIOP', 'asdfgh', 'ASDFGH', 'as fgh', 'ASD FGH'], 'ASDFGH'], ['f', ' '], [['zzz', 'zzz', 'zzz'], 'z']] 0
HumanEval/30 

def get_positive(l: list):
    """Return only positive numbers in the list.
    >>> get_positive([-1, 2, -4, 5, 6])
    [2, 5, 6]
    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
    [5, 3, 2, 3, 9, 123, 1]
    """
 
    assert type(l) == list, "invalid inputs" # $_CONTRACT_$
 
    return list(filter(lambda x: x > 0, l))

 get_positive [[[-1, -2, 4, 5, 6]], [[5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]], [[-1, -2]], [[]]] [[[0, 1, -1, 2, -2, 3, -3, 4, -4]], [[0.5, 0, 2.5, 5, -2.2, -8, -0.75, 7.7, 9.9, -10.5, 5]], [[-5, -4, -1, 0, 1, 4, 1]], [[0]], [[]], [[1, 2, 3, 4]]] 0
HumanEval/31 

def is_prime(n):
    """Return true if a given number is prime, and false otherwise.
    >>> is_prime(6)
    False
    >>> is_prime(101)
    True
    >>> is_prime(11)
    True
    >>> is_prime(13441)
    True
    >>> is_prime(61)
    True
    >>> is_prime(4)
    False
    >>> is_prime(1)
    False
    """
 
    assert type(n) == int, "invalid inputs" # $_CONTRACT_$
 
    if n <= 1: return False
    n_sqrt = 1
    while n_sqrt ** 2 < n: n_sqrt += 1
    for i in range(2, min(n_sqrt + 1, n)):
        if n % i == 0:
            return False
    return True

 is_prime [[6], [101], [11], [13441], [61], [4], [1], [5], [11], [17], [85], [77], [255379]] [[31], [1234567], [-5], [4], [2], [1], [10000000029], [9999991], [-1], [3], [15], [25], [10], [5], [91]] 0
HumanEval/32 import math


def poly(xs: list, x: float):
    """
    Evaluates polynomial with coefficients xs at point x.
    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n
    """
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])


def find_zero(xs: list):
    """ xs are coefficients of a polynomial.
    find_zero find x such that poly(x) = 0.
    find_zero returns only only zero point, even if there are many.
    Moreover, find_zero only takes list xs having even number of coefficients
    and largest non zero coefficient as it guarantees
    a solution.
    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x
    -0.5
    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3
    1.0
    """
 
    assert isinstance(xs, list) and len(xs) > 0 and len(xs) % 2 == 0, "invalid inputs" # $_CONTRACT_$
    assert xs[-1] != 0, "invalid inputs" # $_CONTRACT_$
    assert all(type(x) == int for x in xs), "invalid inputs" # $_CONTRACT_$
    dxs = [xs[i] * i for i in range(1, len(xs))] # $_CONTRACT_$
    def func(x): # $_CONTRACT_$
        return poly(xs, x) # $_CONTRACT_$
    def derivative(x): # $_CONTRACT_$
        return poly(dxs, x) # $_CONTRACT_$
    x, tol = 0, 1e-5 # $_CONTRACT_$
    for _ in range(1000): # $_CONTRACT_$
        fx = func(x) # $_CONTRACT_$
        dfx = derivative(x) # $_CONTRACT_$
        if abs(fx) < tol: break # $_CONTRACT_$
        x = x - fx / dfx # $_CONTRACT_$
    assert abs(poly(xs, x)) < tol, "invalid inputs" # $_CONTRACT_$ 

    dxs = [xs[i] * i for i in range(1, len(xs))]
    def func(x):
        return poly(xs, x)
    def derivative(x):
        return poly(dxs, x)
    
    x, tol = 0, 1e-5
    for _ in range(1000):
        fx = func(x)
        dfx = derivative(x)
        if abs(fx) < tol: break
        x = x - fx / dfx

    return x

 find_zero [[[-10, -2]], [[-3, -6, -7, 7]], [[8, 3]], [[-10, -8]], [[-3, 6, 9, -10]], [[10, 7, 3, -3]], [[8, -2, -10, -5, 3, 1, -2, -6]], [[1, -7, -8, 2]], [[1, 1]], [[-9, 4, 7, -7, 2, -8]], [[10, 9, 1, 8, -4, -8]], [[-3, -1]], [[-3, -7]], [[-2, 4, 10, 1, -5, 1, 1, -4]], [[10, -8, 9, 10, -5, 7]], [[-5, 4, 2, -2]], [[1, -9, -3, -9]], [[2, -2, -8, -4, 8, 1]], [[10, 5, 2, 10]], [[-6, -2, -6, -3, 7, 7, -2, 8]], [[8, 2, 1, -3, -6, 6, 5, -8]], [[-7, -6]], [[3, 9, -8, 2]], [[9, 4, 6, -2, 7, -10, -7, 7]], [[10, 1, -7, -1, 3, -5]], [[-10, -2, 6, -5, 6, -7, 10, -1]], [[-6, 1, -5, 7]], [[9, 1]], [[-10, -7, 1, -1, -3, -9, -3, 8]], [[-8, 5]], [[7, -6]], [[5, 7, -5, -2]], [[-4, 7, -4, -1, 2, 10, 1, 4]], [[-7, -3, -3, -8, 1, -10, 8, 7]], [[8, -3, -10, -8]], [[-3, -8]], [[1, -8]], [[-2, 5, -4, 7]], [[8, 8, 5, -3]], [[3, -4, -7, -7, 3, 1, 3, 3]], [[-9, 10, 10, -7, -9, 2, 1, -7]], [[-4, -4, 7, 4]], [[3, -5, -2, 4]], [[-8, 4, 7, -7]], [[10, 7]], [[-8, -3]], [[3, 5, 5, -4]], [[-9, -5, 2, -10, 2, -2, 4, -1]], [[7, 5, -6, -4, -1, -4, -9, 8]], [[1, -9]], [[8, 5]], [[-9, 6, -8, -5]], [[9, -8]], [[2, -7, 8, -3]], [[9, -8]], [[8, 8, 6, 1, -2, -4, 1, -3]], [[2, -6, 10, -1, 4, 1]], [[-10, 4]], [[-8, 7]], [[6, -2, -6, 1]], [[-3, 1]], [[-5, 4, 7, -1, 9, 10]], [[7, -1]], [[-6, -2]], [[-7, 7]], [[-2, -1, 9, -4]], [[-4, 10, -2, 6, 5, -2]], [[-8, 10]], [[-2, -9, -10, 1, -6, 10, -2, -5]], [[7, 3, 7, -10, -7, -8, -6, 7]], [[1, 8]], [[3, -6, -9, -1]], [[-9, 1, -4, -3, -7, 1]], [[9, -6, -3, -5, -5, 3, -10, -5]], [[3, -3, -2, -5, -7, 2]], [[5, -3]], [[4, 1, -1, -3]], [[-10, -4, 2, 1]], [[-8, -2, 1, 10, 6, 2]], [[-10, -7, -2, -5, 8, -2]], [[-7, 9]], [[1, 1, 3, 9, 6, -7, 2, 8]], [[-2, -9, 3, -10]], [[1, 3, -8, 1]], [[-7, -1, 6, -1, 3, 1]], [[-1, 7, -6, -4, 3, 2, -5, 9]], [[2, 7, -10, -1, -1, -4]], [[8, 9, 10, 1, 4, 4, 4, -4]], [[-5, -8, -1, 6, 10, 9, 1, -8]], [[-1, -3, -4, -6]], [[-9, -3]], [[9, -8, 4, 3, 10, 8, -4, 2]], [[2, -3, -6, 10, -10, -7, 3, -3]], [[6, 4, -9, 7]], [[-7, 4, -6, 4]], [[4, 9, 6, 3, 7, 4]], [[5, 4, -2, -3]], [[6, 5, 10, -3, -2, 4]], [[-1, -3]], [[1, 1, 7, -8, -6, -6]]] [[[5, 10, -3, 1]]] 0.0001
HumanEval/33 

def sort_third(l: list):
    """This function takes a list l and returns a list l' such that
    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal
    to the values of the corresponding indicies of l, but sorted.
    >>> sort_third([1, 2, 3])
    [1, 2, 3]
    >>> sort_third([5, 6, 3, 4, 8, 9, 2])
    [2, 6, 3, 4, 8, 9, 5]
    """
 
    assert type(l) == list, "invalid inputs" # $_CONTRACT_$
 
    third = [l[i] for i in range(len(l)) if i % 3 == 0]
    third.sort()
    return [third[i // 3] if i % 3 == 0 else l[i] for i in range(len(l))]

 sort_third [[[1, 2, 3]], [[1, 2, 3]], [[5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]], [[5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]], [[5, 8, -12, 4, 23, 2, 3, 11, 12, -10]], [[5, 8, -12, 4, 23, 2, 3, 11, 12, -10]], [[5, 6, 3, 4, 8, 9, 2]], [[5, 8, 3, 4, 6, 9, 2]], [[5, 6, 9, 4, 8, 3, 2]], [[5, 6, 3, 4, 8, 9, 2, 1]]] [[[9, 12, 15, 6, 3, 8, 10, 23, 7]], [[]], [[2, 10, 20, 15, 18, 13, 7]]] 0
HumanEval/34 

def unique(l: list):
    """Return sorted unique elements in a list
    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])
    [0, 2, 3, 5, 9, 123]
    """
 
    assert type(l) == list, "invalid inputs" # $_CONTRACT_$
 
    return sorted(set(l))

 unique [[[5, 3, 5, 2, 3, 3, 9, 0, 123]]] [[[3.4145447979043606, 1.5142493540603779, 1.1, 2.2, 2.2, 4.4, 4.4, 3.0219968583931567, 2.2]], [[None, None, None, None]], [[]], [[-1, 1]], [['alQd', 'dapple', 'banana', 'oralQdnge']]] 0
HumanEval/35 

def max_element(l: list):
    """Return maximum element in the list.
    >>> max_element([1, 2, 3])
    3
    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
    123
    """
 
    assert type(l) == list, "invalid inputs" # $_CONTRACT_$
    assert len(l) != 0, "invalid inputs" # $_CONTRACT_$
    assert all(type(x) in [int, float] for x in l), "invalid inputs" # $_CONTRACT_$
 
    return max(l)

 max_element [[[1, 2, 3]], [[5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]]] [[[0, 0, 0, 0]], [[-5, -6, -5, -5, -5, -5, -5, -145, -5, -4, -5, -6]], [[-1001]], [[1.2, -4.5, -3.4, 5.6, 7.8, -9.0, 10.1, -50.04662603741016, -12.3, 15.4, 20.5, -25.6, 30.7, -35.8, 40.9, -46.0, -8.601314347821834, 57.2, -63.3, 69.4, -75.5, 81.6, -87.7, 93.8, 99.9, 30.7]], [[-1, -2, -3, -4, -5]], [[-1, -2, -3, -4, 0, -2]], [[0, 1]]] 0
HumanEval/36 

def fizz_buzz(n: int):
    """Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.
    >>> fizz_buzz(50)
    0
    >>> fizz_buzz(78)
    2
    >>> fizz_buzz(79)
    3
    """
 
    assert type(n) == int and n > 0, "invalid inputs" # $_CONTRACT_$
 
    cnt = 0
    for i in range(n):
        if i % 11 == 0 or i % 13 == 0:
            cnt += len(list(filter(lambda c: c == "7", str(i))))
    return cnt

 fizz_buzz [[50], [78], [79], [100], [200], [4000], [10000], [100000]] [[10], [555555], [77]] 0
HumanEval/37 

def sort_even(l: list):
    """This function takes a list l and returns a list l' such that
    l' is identical to l in the odd indicies, while its values at the even indicies are equal
    to the values of the even indicies of l, but sorted.
    >>> sort_even([1, 2, 3])
    [1, 2, 3]
    >>> sort_even([5, 6, 3, 4])
    [3, 6, 5, 4]
    """
 
    assert type(l) == list, "invalid inputs" # $_CONTRACT_$
    assert all(type(x) in [int, float] for x in l), "invalid inputs" # $_CONTRACT_$
 
    even = [l[i] for i in range(len(l)) if i % 2 == 0]
    even.sort()
    return [even[i // 2] if i % 2 == 0 else l[i] for i in range(len(l))]

 sort_even [[[1, 2, 3]], [[5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]], [[5, 8, -12, 4, 23, 2, 3, 11, 12, -10]]] [[[2, 6, 4, 8, 10]], [[]], [[11, 7, 6, 9, 14, -1]], [[0, 0, 0, -1, -1, -1, 2, 2, 2]]] 0
HumanEval/38 

def encode_cyclic(s: str):
    """
    returns encoded string by cycling groups of three characters.
    """
    # split string to groups. Each of length 3.
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    # cycle elements in each group. Unless group has fewer elements than 3.
    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]
    return "".join(groups)


def decode_cyclic(s: str):
    """
    takes as input string encoded with encode_cyclic function. Returns decoded string.
    """
 
    assert isinstance(s, str), "invalid inputs" # $_CONTRACT_$
 
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    groups = [(group[2] + group[:2]) if len(group) == 3 else group for group in groups]
    return "".join(groups)

 decode_cyclic [['uzfplzjfzcltmdly'], ['nzyegaghrzqwrdzxckn'], ['zxolecqvzyausohgzdod'], ['cjhzuelsabstpbq'], ['lfgmjpqnvzwvbusr'], ['cvxcvhmtgbeweum'], ['jgjvebqagrtwheytsyff'], ['swbkfgqnvuahcnqgpcu'], ['ssjgajmprs'], ['enrrdusnffcnkotf'], ['cpfgdusjrzf'], ['gconqokfgb'], ['effmnsvrgsdbhffn'], ['zwsrgynxlmh'], ['nqdjadvhlu'], ['fpkocdqllglypkj'], ['aosjbowaac'], ['fvdumeezuebnlkqnvwfc'], ['tzfoanbvufs'], ['mnzbtfatwfxpqstecjm'], ['nkxxaitehrj'], ['nwxwbyaavoevbjbig'], ['gmamklorekv'], ['rihdqvrbxaycb'], ['gwvexchafqe'], ['pymjpgzjnva'], ['aobgbpwjritkq'], ['nuccsadagbriq'], ['gdktamtzhdmj'], ['dcprihgimgnjx'], ['kljtwssfqty'], ['frbqiejenuvxwoy'], ['tjfuyuhxly'], ['fimmmlfohx'], ['xwtgrxfyytcyyjdjoni'], ['bzekhcvbldsd'], ['ghzgwvsorsye'], ['xkaxuitdibnplwpucw'], ['qcszxfbaocdzseekb'], ['ueaztzzgmex'], ['jsjyrkasqpujtnvrbmtr'], ['fyiurdclyxoalovncksg'], ['erxobpjrpkxbsgobas'], ['lizudkhwdzwjzziyex'], ['vpuzbwgjyicrh'], ['sajlxmochmknulkxecik'], ['klzoujwdjfwqzk'], ['kiccixaihigbhftw'], ['hyrkynsmkvndymdepsu'], ['dplbtwiqweagdz'], ['kjrblffzlakwpz'], ['hzdeezpqcoxwcwsyyl'], ['wcxtvtdgeymblafldwgq'], ['ujgibazfslkfyfu'], ['oqrngzmyfxddlwpbv'], ['vtmdwyiilv'], ['vghazccwxyibefx'], ['jzyhtisowtzheniomrvr'], ['eksylebplf'], ['jxevtanxqvhwb'], ['joqwqljwckpb'], ['dkghzktgig'], ['ajbtmlaqsegfktujz'], ['xeggrighqjvgjpt'], ['fgkpcfreaypwkstc'], ['ucfyampthmhoh'], ['pcyzbxlzmud'], ['hualgpgmtpv'], ['dofgkmknkdhimryg'], ['btvvhktzpvkuekialfq'], ['hbvgnvmuxckcqjvx'], ['qhwrawfsmuevokszgfqy'], ['uakqzvnihhfcwz'], ['rlnvwwhoxlwkyibhnjg'], ['cmprarjwtqovlcizhgpu'], ['rbfrlfpxzfm'], ['lutbkxocedmbfctzmuy'], ['oajodvoerl'], ['bvmxponldendphf'], ['jdliznkftyvzwdqty'], ['hkbaihpjquf'], ['hhneeogusm'], ['qvnehikoshpzahmfkep'], ['urrclsjxeosc'], ['ghfmyzjawzulrop'], ['ycqtsqaatceckf'], ['ipybztxdkypoxjuhf'], ['ozjthdoukvrqjb'], ['ipfbolvlrwwtznrdbta'], ['xzhjnclgnihoinfs'], ['pfkwcebjnkoudgosogtj'], ['aqbojzzuehqwirlx'], ['mulyzumnbuzr'], ['nzdtnhuxogdzdguy'], ['juvowhyjstne'], ['ybzdvuvvwyeyxepv'], ['dyunpcsjbdozu'], ['hfbhubqoykkyrwjx'], ['bkkjxpyfzrtcqpqna'], ['hpncxsmjpus']] [['abcdefghijk'], [''], ['1234567890']] 0
HumanEval/39 

def prime_fib(n: int):
    """
    prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    >>> prime_fib(1)
    2
    >>> prime_fib(2)
    3
    >>> prime_fib(3)
    5
    >>> prime_fib(4)
    13
    >>> prime_fib(5)
    89
    """
 
    assert type(n) == int, "invalid inputs" # $_CONTRACT_$
    assert 1 <= n <= 12, "invalid inputs" # $_CONTRACT_$
 

    import random
    def miller_rabin(n, k=10):
        """Test if n is prime using the Miller-Rabin primality test."""
        if n < 2:
            return False
        if n == 2 or n == 3:
            return True
        if n % 2 == 0:
            return False

        r = 0
        d = n - 1
        while d % 2 == 0:
            r += 1
            d //= 2

        for _ in range(k):
            a = random.randint(2, n - 2)
            x = pow(a, d, n)
            if x == 1 or x == n - 1:
                continue
            for _ in range(r - 1):
                x = pow(x, 2, n)
                if x == n - 1:
                    break
            else:
                return False

        return True

    c_prime = 0
    a, b = 0, 1
    while c_prime < n:
        a, b = b, a + b
        if miller_rabin(b):
            c_prime += 1
    return b

 prime_fib [[1], [2], [3], [4], [5], [6], [7], [8], [9], [10]] [[11], [12]] 0
HumanEval/40 

def triples_sum_to_zero(l: list):
    """
    triples_sum_to_zero takes a list of integers as an input.
    it returns True if there are three distinct elements in the list that
    sum to zero, and False otherwise.

    >>> triples_sum_to_zero([1, 3, 5, 0])
    False
    >>> triples_sum_to_zero([1, 3, -2, 1])
    True
    >>> triples_sum_to_zero([1, 2, 3, 7])
    False
    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])
    True
    >>> triples_sum_to_zero([1])
    False
    """
 
    assert type(l) == list, "invalid inputs" # $_CONTRACT_$
 
    for i in range(len(l)):
        for j in range(len(l)):
            for k in range(len(l)):
                if i != j and i != k and j != k and l[i] + l[j] + l[k] == 0:
                    return True
    return False

 triples_sum_to_zero [[[1, 3, 5, 0]], [[1, 3, 5, -1]], [[1, 3, -2, 1]], [[1, 2, 3, 7]], [[1, 2, 5, 7]], [[2, 4, -5, 3, 9, 7]], [[1]], [[1, 3, 5, -100]], [[100, 3, 5, -100]]] [[[1, 2, 3, 4, 5, -9]], [[-2, -2]], [[2, 3, 50, 0, 3, 0, 4, 2, -1, 2]], [[0, 0, 0]], [[25, -20, 8, 7, -5, -50, 14, 9]], [[32, 25, 8, 7, -5, -6, 5, 9, 14, 3]], [[32, 25, 8, 7, -5, -6, 5, 9, 14, 3, 3]], [[0, 1, 0, 0]], [[]], [[2, 3, -6, 0, 0]], [[1, -1]], [[10, -20, 30, -40, 50, -60]], [[False]], [[-1, 0, 1]], [[1, -2, -4]]] 0
HumanEval/41 

def car_race_collision(n: int):
    """
    Imagine a road that's a perfectly straight infinitely long line.
    n cars are driving left to right;  simultaneously, a different set of n cars
    are driving right to left.   The two sets of cars start out being very far from
    each other.  All cars move in the same speed.  Two cars are said to collide
    when a car that's moving left to right hits a car that's moving right to left.
    However, the cars are infinitely sturdy and strong; as a result, they continue moving
    in their trajectory as if they did not collide.

    This function outputs the number of such collisions.
    """
 
    assert type(n) == int, "invalid inputs" # $_CONTRACT_$
    assert n >= 1, "invalid inputs" # $_CONTRACT_$
 

    return n ** 2

 car_race_collision [[2], [3], [4], [8], [10]] [[5], [10000], [1000000000], [1]] 0
HumanEval/42 

def incr_list(l: list):
    """Return list with elements incremented by 1.
    >>> incr_list([1, 2, 3])
    [2, 3, 4]
    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])
    [6, 4, 6, 3, 4, 4, 10, 1, 124]
    """
 
    assert type(l) == list, "invalid inputs" # $_CONTRACT_$
 
    return [x + 1 for x in l]

 incr_list [[[]], [[3, 2, 1]], [[5, 2, 5, 2, 3, 3, 9, 0, 123]]] [[[100, 200, 300, 400, 500]], [[-10, 0, 10, 0]], [[1, 4, 6, 8, 10, 14, 9, 16, 20, 20]], [[2.5]], [[]]] 0
HumanEval/43 

def pairs_sum_to_zero(l):
    """
    pairs_sum_to_zero takes a list of integers as an input.
    it returns True if there are two distinct elements in the list that
    sum to zero, and False otherwise.
    >>> pairs_sum_to_zero([1, 3, 5, 0])
    False
    >>> pairs_sum_to_zero([1, 3, -2, 1])
    False
    >>> pairs_sum_to_zero([1, 2, 3, 7])
    False
    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])
    True
    >>> pairs_sum_to_zero([1])
    False
    """
 
    assert all([isinstance(v, int) for v in l]), "invalid inputs" # $_CONTRACT_$
 
    for i in range(len(l)):
        for j in range(len(l)):
            if i != j and l[i] + l[j] == 0:
                return True
    return False

 pairs_sum_to_zero [[[1, 3, 5, 0]], [[1, 3, -2, 1]], [[1, 2, 3, 7]], [[2, 4, -5, 3, 5, 7]], [[1]], [[-3, 9, -1, 3, 2, 30]], [[-3, 9, -1, 3, 2, 31]], [[-3, 9, -1, 4, 2, 30]], [[-3, 9, -1, 4, 2, 31]]] [[[0, 1, -1]], [[2, 3, 4, 5, -9]], [[10, -5, 7, 3, -4, -1, 0, -6, -9, 3, 14]], [[0, 0]], [[2, 3, -2, -4, 0]], [[10, -5, 7, 3, -4, -1, 0, -6, -9, 2, 14]], [[-5, -4, -1, 0, -6, -9, 2, 14, 8000, 14, -6, -6, 0, -6]], [''], [[1, -1]], [[0, 0, 0, 0, 0, 0, 0, 0]], [[5, 5]], [[0]], [[]]] 0
HumanEval/44 

def change_base(x: int, base: int):
    """Change numerical base of input number x to base.
    return string representation after the conversion.
    base numbers are less than 10.
    >>> change_base(8, 3)
    '22'
    >>> change_base(8, 2)
    '1000'
    >>> change_base(7, 2)
    '111'
    """
 
    assert type(x) == int and type(base) == int, "invalid inputs" # $_CONTRACT_$
    assert x >= 0, "invalid inputs" # $_CONTRACT_$
    assert 2 <= base <= 9, "invalid inputs" # $_CONTRACT_$
 

    if x == 0: return "0"
    ret = ""
    while x != 0:
        ret = str(x % base) + ret
        x //= base
    return ret

 change_base [[8, 3], [9, 3], [234, 2], [16, 2], [8, 2], [7, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8]] [[10, 5], [0, 3], [25, 5], [8, 4], [48298461, 2], [2, 3]] 0
HumanEval/45 

def triangle_area(a, h):
    """Given length of a side and high return area for a triangle.
    >>> triangle_area(5, 3)
    7.5
    """
 
    assert isinstance(a, (int, float)) and isinstance(h, (int, float)), "invalid inputs" # $_CONTRACT_$
    assert a > 0 and h > 0, "invalid inputs" # $_CONTRACT_$
 

    return a * h / 2

 triangle_area [[5, 3], [2, 2], [10, 8]] [[4, 6], [0.09250267285921429, 1000], [7, 2], [5, 5]] 0
HumanEval/46 

def fib4(n: int):
    """The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:
    fib4(0) -> 0
    fib4(1) -> 0
    fib4(2) -> 2
    fib4(3) -> 0
    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).
    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.
    >>> fib4(5)
    4
    >>> fib4(6)
    8
    >>> fib4(7)
    14
    """
 
    assert type(n) == int, "invalid inputs" # $_CONTRACT_$
    assert n >= 0, "invalid inputs" # $_CONTRACT_$
 
    
    if n == 0:
        return 0
    elif n == 1:
        return 0
    elif n == 2:
        return 2
    elif n == 3:
        return 0
    else:
        a, b, c, d = 0, 0, 2, 0
        for i in range(4, n + 1):
            a, b, c, d = b, c, d, a + b + c + d
        return d

 fib4 [[5], [8], [10], [12]] [[4], [1], [2], [3], [0], [6], [24], [1000], [41]] 0
HumanEval/47 

def median(l: list):
    """Return median of elements in the list l.
    >>> median([3, 1, 2, 4, 5])
    3
    >>> median([-10, 4, 6, 1000, 10, 20])
    15.0
    """
 
    assert len(l) > 0, "invalid inputs" # $_CONTRACT_$
    assert all([isinstance(v, (int, float)) for v in l]), "invalid inputs" # $_CONTRACT_$
 

    sorted_l = sorted(l)
    if len(l) % 2 == 1:
        return sorted_l[len(l) // 2]
    else:
        return (sorted_l[len(l) // 2 - 1] + sorted_l[len(l) // 2]) / 2

 median [[[3, 1, 2, 4, 5]], [[-10, 4, 6, 1000, 10, 20]], [[5]], [[6, 5]], [[8, 1, 3, 9, 9, 2, 7]]] [[[10, 20, 30, 40, 50]], [[1, 3, 7, 8, 10, 10]], [[7, 9, 3, 5]], [[10, 20, 4, 30, 13, 2, 40, 50]], [[-5, -3, 0, 3, -5]], [[100]], [[-1, 0, 1]], [[14, 100]]] 0
HumanEval/48 

def is_palindrome(text: str):
    """
    Checks if given string is a palindrome
    >>> is_palindrome('')
    True
    >>> is_palindrome('aba')
    True
    >>> is_palindrome('aaaaa')
    True
    >>> is_palindrome('zbcd')
    False
    """
 
    assert isinstance(text, str), "invalid inputs" # $_CONTRACT_$
 
    return text == text[::-1]

 is_palindrome [[''], ['aba'], ['aaaaa'], ['zbcd'], ['xywyx'], ['xywyz'], ['xywzx']] [['racecar'], ['ab'], ['12zZ21'], ['step on no pets'], ['SS'], ['never odd or even'], [''], [' '], ['Step on no pets'], ['S']] 0
HumanEval/49 

def modp(n: int, p: int):
    """Return 2^n modulo p (be aware of numerics).
    >>> modp(3, 5)
    3
    >>> modp(1101, 101)
    2
    >>> modp(0, 101)
    1
    >>> modp(3, 11)
    8
    >>> modp(100, 101)
    1
    """
 
    assert type(n) == int and type(p) == int, "invalid inputs" # $_CONTRACT_$
    assert n >= 0 and p >= 1, "invalid inputs" # $_CONTRACT_$
 

    res, x = 1, 2
    while n != 0:
        if n % 2 == 1:
            res = res * x % p
        x = x * x % p
        n //= 2
    return res % p

 modp [[3, 5], [1101, 101], [0, 101], [3, 11], [100, 101], [30, 5], [31, 5]] [[5, 17], [7, 3], [1000002, 1000000], [0, 1], [37, 37], [1, 1], [0, 2], [1000000, 999983], [6, 78], [19, 2], [999983, 999983], [999999, 100019]] 0
HumanEval/50 

def encode_shift(s: str):
    """
    returns encoded string by shifting every character by 5 in the alphabet.
    """
    return "".join([chr(((ord(ch) + 5 - ord("a")) % 26) + ord("a")) for ch in s])


def decode_shift(s: str):
    """
    takes as input string encoded with encode_shift function. Returns decoded string.
    """
 
    assert s == "" or s.islower(), "invalid inputs" # $_CONTRACT_$
 

    return "".join([chr((ord(ch) - ord("a") - 5 + 26) % 26 + ord("a")) for ch in s])

 decode_shift [['tantywccpjkimslotpzs'], ['clknfxdnox'], ['dtzqyosaovdbafbg'], ['dffjvztknohzf'], ['brhkdngfwd'], ['amlcrporykmgbhzctpnh'], ['ondbgojmipwoofzeyrh'], ['atobiwyiitrvhuctz'], ['kyrzjawonglfbsedmhmk'], ['esusgpgnaelf'], ['jbocbcqiuggvenbq'], ['zmmcumljlx'], ['ibrcruwukgetv'], ['ncbelcfjqcgxshtdiz'], ['xgcckzjdfp'], ['gzlnmjjytxhydvy'], ['zxlxfflljav'], ['kfeabaemohxvodorv'], ['kdfcevzlswkkmkwdrcrg'], ['oxtrmhyjjbm'], ['bvhfetbvrspmepdqu'], ['lycqknawupoydpve'], ['vmbjsfxvtgjkxgvazub'], ['ffkskhcrjnixkkdivamc'], ['zszowxcyfksyaiov'], ['mcqqnjopwar'], ['dkglzmaccvjlrjuhgmp'], ['hudnjifakmaknaiwjjoz'], ['ppineedncm'], ['nhnnpeyazv'], ['hfgrlomgpnzomltm'], ['opejcxrnkfi'], ['caocjafernbzwkerkjul'], ['uenrgscamkc'], ['ntphbmfuyhgxxekrh'], ['lullbgnzzlpsf'], ['nfzgyzvqkkkhqwoc'], ['rseeagndpy'], ['jzfmflvqsujn'], ['zhemzjdbgmzhlojon'], ['bejmmyaivqmztwx'], ['dkrixwritnwanp'], ['phbenxhnsrceqgo'], ['lkwatqvqox'], ['sodavpratfhciez'], ['rdbebqamnqnrojlyc'], ['qpcjvbttxkfoarmbgaj'], ['buoybjwmnkca'], ['zhsxvqgydfzom'], ['ebqzwqwgczokyqlleqv'], ['zkblrdvzwzfcucl'], ['qhyokykhohqmbg'], ['ppivcuwwha'], ['tojlipluqsrqxmkl'], ['pmtxclojrsx'], ['ankmnlxytriytxuycfar'], ['vbxyasxabsgmm'], ['nvscnydxnomkbhzo'], ['qnfhjywwxbewrtwqz'], ['qcopkrvocdnbvok'], ['vmiimkfgpijybehf'], ['umivhawwroqbi'], ['ngtcnxdbfem'], ['rceydgerfqlcdjwqufp'], ['xiwqysuzxhrok'], ['pbiutcflmhcatu'], ['eigoipkfsygpkzdbfba'], ['pksrbhoobdcxuzztpry'], ['ufpgxygqut'], ['ruysajspjftawat'], ['htltipbsjyeyd'], ['nbdcbfdwridowau'], ['tmppfczqbbymxz'], ['uozrdjywqt'], ['hntgkfcaqplmvwigugcn'], ['fjvtaauddtbfxyx'], ['oueajaaouchg'], ['xjnoxinpwjxfkdhypha'], ['ydkfspcqqgoy'], ['zkhvcaficnsrpftfyacc'], ['uhvwguwpwp'], ['caqjqcvjknjpxvsh'], ['jgartypykutysuu'], ['kcjkljbqqqllnvvn'], ['cyhmtsgqyz'], ['kfznlgufze'], ['evvyotysuo'], ['bszxdxfofeuqowuul'], ['fxrorccues'], ['fjbitcryrirgche'], ['esmaafzdoathkfbr'], ['nyglikurdgsrxppfaaaq'], ['tbnxtryklhivaozovo'], ['ysapkxzhoyt'], ['szmyeptvbecdu'], ['aehjjihebqyikhgbfdv'], ['blxkxtkcpajpuyghrj'], ['yfctlzlvmg'], ['ltlczacgtm'], ['kenorgfepxvymu']] [['abcdefghijklmnopqrstuvwxyz'], ['encoded message with shift']] 0
HumanEval/51 

def remove_vowels(text):
    """
    remove_vowels is a function that takes string and returns string without vowels.
    >>> remove_vowels('')
    ''
    >>> remove_vowels("abcdef\nghijklm")
    'bcdf\nghjklm'
    >>> remove_vowels('abcdef')
    'bcdf'
    >>> remove_vowels('aaaaa')
    ''
    >>> remove_vowels('aaBAA')
    'B'
    >>> remove_vowels('zbcd')
    'zbcd'
    """
 
    assert type(text) == str, "invalid inputs" # $_CONTRACT_$
 
    return "".join(list(filter(lambda ch: ch not in "aeiouAEIOU", text)))

 remove_vowels [[''], ['abcdef\nghijklm'], ['fedcba'], ['eeeee'], ['acBAA'], ['EcBOO'], ['ybcd']] [['hello'], ['CX'], ['The quick brown AEEIayoubcd\n\n\n\nefghijklmnopqrstuvwxyzOUaeHdo.elHlofox jumps over the lazyog.'], ['\n'], ['a']] 0
HumanEval/52 

def below_threshold(l: list, t: int):
    """Return True if all numbers in the list l are below threshold t.
    >>> below_threshold([1, 2, 4, 10], 100)
    True
    >>> below_threshold([1, 20, 4, 10], 5)
    False
    """
 
    assert type(l) == list, "invalid inputs" # $_CONTRACT_$
    assert type(t) == int, "invalid inputs" # $_CONTRACT_$
    assert all(isinstance(x, (int, float, bool)) for x in l), "invalid inputs" # $_CONTRACT_$
 
    return all(x < t for x in l)

 below_threshold [[[1, 2, 4, 10], 100], [[1, 20, 4, 10], 5], [[1, 20, 4, 10], 21], [[1, 20, 4, 10], 22], [[1, 8, 4, 10], 11], [[1, 8, 4, 10], 10]] [[[0, 0, 0, 0], 1], [[1, 2, 3, 4], 4], [[5], 5], [[], 0], [[10000000, 9000000, 8000000, 7000000, 6000000, -200, 10000000], 10000001], [[-4, -3, -2, -1], -1], [[7, -2, -3, -3, -4], 0], [[-1, -2, -3, -4], 0], [[], -1], [[-4, -3, -2, -1], -5]] 0
HumanEval/53 

def add(x: int, y: int):
    """Add two numbers x and y
    >>> add(2, 3)
    5
    >>> add(5, 7)
    12
    """
 
    assert isinstance(x, int), "invalid inputs" # $_CONTRACT_$
    assert isinstance(y, int), "invalid inputs" # $_CONTRACT_$
 
    return x + y

 add [[0, 1], [1, 0], [2, 3], [5, 7], [7, 5], [480, 593], [139, 579], [300, 77], [569, 756], [911, 703], [197, 326], [123, 102], [671, 705], [101, 721], [735, 413], [923, 369], [938, 221], [59, 772], [540, 790], [244, 6], [705, 148], [890, 180], [342, 129], [946, 559], [623, 593], [825, 294], [124, 732], [333, 987], [269, 347], [826, 822], [157, 479], [534, 184], [418, 549], [855, 765], [666, 55], [428, 315], [704, 645], [183, 272], [966, 528], [571, 697], [610, 541], [249, 665], [452, 186], [421, 529], [860, 376], [172, 601], [30, 177], [35, 753], [818, 902], [618, 175], [165, 302], [405, 836], [574, 555], [152, 343], [882, 225], [670, 359], [480, 476], [265, 822], [390, 904], [570, 503], [660, 18], [457, 319], [724, 18], [469, 235], [91, 322], [91, 789], [361, 945], [272, 952], [567, 768], [264, 478], [57, 615], [301, 553], [191, 93], [125, 119], [528, 936], [314, 7], [270, 420], [25, 435], [876, 389], [502, 653], [519, 807], [345, 523], [473, 231], [746, 105], [18, 434], [659, 191], [855, 65], [843, 872], [997, 59], [420, 134], [950, 85], [223, 50], [473, 244], [994, 169], [287, 494], [528, 830], [492, 739], [483, 198], [228, 863], [345, 405], [878, 86], [841, 854], [950, 134], [550, 501], [371, 167]] [[-2, 3], [-15, -15], [0, -1], [True, 6]] 0
HumanEval/54 

def same_chars(s0: str, s1: str):
    """
    Check if two words have the same characters.
    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')
    True
    >>> same_chars('abcd', 'dddddddabc')
    True
    >>> same_chars('dddddddabc', 'abcd')
    True
    >>> same_chars('eabcd', 'dddddddabc')
    False
    >>> same_chars('abcd', 'dddddddabce')
    False
    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')
    False
    """
 
    assert type(s0) == type(s1) == str, "invalid inputs" # $_CONTRACT_$
 
    return set(s0) == set(s1)

 same_chars [['eabcdzzzz', 'dddzzzzzzzddeddabc'], ['abcd', 'dddddddabc'], ['dddddddabc', 'abcd'], ['eabcd', 'dddddddabc'], ['abcd', 'dddddddabcf'], ['eabcdzzzz', 'dddzzzzzzzddddabc'], ['aabb', 'aaccc']] [['ab', 'cd'], ['123445', '5143241'], ['ZYXWVUTSRQPONMLKJIHGFEDCBA', 'ZjumpsYXWVUTSRQPONMLKJIHGFEDCBA'], ['123445', ''], ['foStrongrce', 'gazelle!own'], ['12345607890', '0987654321'], ['524321', '5432'], ['ZeZeZeZeZeZeZeZeZeZeZeZeZeZ,eZeZeZeZeZeZeZeZeZeZeZeZeZeZeZeZeZeZeZeZeZeZeZeZeZeZeZe', 'ZeZeZeZeZeZeZeZeZeZeZeZeZeZeZeZeZeZeZeZeZeZeZeZeZeZeZeZeZeZeZeZeZeZeZeZeZeZeZeZeZe'], ['', 'the']] 0
HumanEval/55 

def fib(n: int):
    """Return n-th Fibonacci number.
    >>> fib(10)
    55
    >>> fib(1)
    1
    >>> fib(8)
    21
    """
 
    assert n >= 0, "invalid inputs" # $_CONTRACT_$
    assert isinstance(n, int), "invalid inputs" # $_CONTRACT_$
 

    if n == 0: return 0
    if n <= 2: return 1
    a, b = 1, 1
    for _ in range(3, n + 1):
        a, b, = b, a + b
    return b

 fib [[10], [1], [8], [11], [12]] [[16], [0], [1], [3], [63], [2]] 0
HumanEval/56 

def correct_bracketing(brackets: str):
    """ brackets is a string of "<" and ">".
    return True if every opening bracket has a corresponding closing bracket.

    >>> correct_bracketing("<")
    False
    >>> correct_bracketing("<>")
    True
    >>> correct_bracketing("<<><>>")
    True
    >>> correct_bracketing("><<>")
    False
    """
 
    assert type(brackets) == str, "invalid inputs" # $_CONTRACT_$
    assert all(x in "<>" for x in brackets) # $_CONTRACT_$
 

    cnt = 0
    for x in brackets:
        if x == "<": cnt += 1
        if x == ">": cnt -= 1
        if cnt < 0: return False
    return cnt == 0

 correct_bracketing [['<>'], ['<<><>>'], ['<><><<><>><>'], ['<><><<<><><>><>><<><><<>>>'], ['<<<><>>>>'], ['><<>'], ['<'], ['<<<<'], ['>'], ['<<>'], ['<><><<><>><>><<>'], ['<><><<><>><>>><>']] [['<<<>>>'], ['><'], ['<<>>><><><><>>>><'], ['>>>>'], ['<<<<>><>>><>'], ['<<<<<>><><><><><><>><><>>>>><>><<<<<><><><<<<<<<<<<>>>>>>>>><<>>><><><><><><>><><><<><><><>>'], ['<'], [''], ['<<<<<<<>>><><><>>>>><<']] 0
HumanEval/57 

def monotonic(l: list):
    """Return True is list elements are monotonically increasing or decreasing.
    >>> monotonic([1, 2, 4, 20])
    True
    >>> monotonic([1, 20, 4, 10])
    False
    >>> monotonic([4, 1, 0, -10])
    True
    """
 
    assert type(l) == list, "invalid inputs" # $_CONTRACT_$
    assert all(type(x) in (int, float, bool) for x in l), "invalid inputs" # $_CONTRACT_$
 
    inc, dec = True, True
    for i in range(len(l) - 1):
        if l[i] > l[i + 1]: inc = False
        if l[i] < l[i + 1]: dec = False
    return inc or dec

 monotonic [[[1, 2, 4, 10]], [[1, 2, 4, 20]], [[1, 20, 4, 10]], [[4, 1, 0, -10]], [[4, 1, 1, 0]], [[1, 2, 3, 2, 5, 60]], [[1, 2, 3, 4, 5, 60]], [[9, 9, 9, 9]]] [[[10, 9, 8, 7, 6]], [[2, 1, 2]], [[5, 4, 3, 3, 3, 2, 1, 1]], [[1, 1, 2, 3, 3, 3, 4, 5]], [[5, 5, 1, 1, -7, -7]], [[2, 2, 1, -2, -2, 1]], [[1, 1, 0, 1, 1, 1]], [[]], [[1, 1, 1, 1, 1]]] 0
HumanEval/58 

def common(l1: list, l2: list):
    """Return sorted unique common elements for two lists.
    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])
    [1, 5, 653]
    >>> common([5, 3, 2, 8], [3, 2])
    [2, 3]

    """
 
    assert type(l1) == type(l2) == list, "invalid inputs" # $_CONTRACT_$
 
    return sorted(list(set(l1).intersection(set(l2))))

 common [[[1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]], [[5, 3, 2, 8], [3, 2]], [[4, 3, 2, 8], [3, 2, 4]], [[4, 3, 2, 8], []]] [[[72.37521383648374, 75.77463522981091, -68.50801238200772, -16.457158264907306, -14.710649879972792, -50.826346308865425, 94.08151854781187, 62.25940015569594, -16.457158264907306], [72.37521383648374, 75.77463522981091, -68.50801238200772, -16.457158264907306, -14.710649879972792, -50.826346308865425, 94.08151854781187, 62.25940015569594, -16.457158264907306]], [[False, None], []], [[1, 2, 3, 4, 5, 6, 7, 1, 8, 9], [11, 5, 5]], [[], [1, 2, 3]], [['SgmW', 'wdIIZAXJqx', 'sRbO', 'mqbFo', '', 'vZmyAs', 'dajGeqFZ', 'Jr', 'Hv'], [1, 2, 3, 1]], [[4], [4]], [[-45, 34], [35]]] 0
HumanEval/59 

def largest_prime_factor(n: int):
    """Return the largest prime factor of n. Assume n > 1 and is not a prime.
    >>> largest_prime_factor(13195)
    29
    >>> largest_prime_factor(2048)
    2
    """
 
    assert isinstance(n, int), "invalid inputs" # $_CONTRACT_$
    def is_prime(a): # $_CONTRACT_$
        return not (a < 2 or any(a % x == 0 for x in range(2, int(a ** 0.5) + 1))) # $_CONTRACT_$
    assert n > 1 and not is_prime(n), "invalid inputs" # $_CONTRACT_$
 

    isprime = [True] * (n + 1)
    for i in range(2, n + 1):
        if isprime[i]:
            for j in range(i + i, n, i):
                isprime[j] = False
    for i in range(n - 1, 0, -1):
        if isprime[i] and n % i == 0:
            return i

 largest_prime_factor [[15], [27], [63], [330], [13195]] [[100], [4], [256], [1000000], [9996], [568622], [18]] 0
HumanEval/60 

def sum_to_n(n: int):
    """sum_to_n is a function that sums numbers from 1 to n.
    >>> sum_to_n(30)
    465
    >>> sum_to_n(100)
    5050
    >>> sum_to_n(5)
    15
    >>> sum_to_n(10)
    55
    >>> sum_to_n(1)
    1
    """
 
    assert type(n) == int, "invalid inputs" # $_CONTRACT_$
    assert n >= 1, "invalid inputs" # $_CONTRACT_$
 

    return (n + 1) * n // 2

 sum_to_n [[1], [6], [11], [30], [100]] [[2], [1000000], [999997], [1000006], [999999], [3], [1000004], [1000001], [1000003], [999996], [1000005], [1000002], [999998]] 0
HumanEval/61 

def correct_bracketing(brackets: str):
    """ brackets is a string of "(" and ")".
    return True if every opening bracket has a corresponding closing bracket.

    >>> correct_bracketing("(")
    False
    >>> correct_bracketing("()")
    True
    >>> correct_bracketing("(()())")
    True
    >>> correct_bracketing(")(()")
    False
    """
 
    assert type(brackets) == str, "invalid inputs" # $_CONTRACT_$
    assert all(x in "()" for x in brackets) # $_CONTRACT_$
 

    cnt = 0
    for x in brackets:
        if x == "(": cnt += 1
        if x == ")": cnt -= 1
        if cnt < 0: return False
    return cnt == 0

 correct_bracketing
HumanEval/62 

def derivative(xs: list):
    """ xs represent coefficients of a polynomial.
    xs[0] + xs[1] * x + xs[2] * x^2 + ....
     Return derivative of this polynomial in the same form.
    >>> derivative([3, 1, 2, 4, 5])
    [1, 4, 12, 20]
    >>> derivative([1, 2, 3])
    [2, 6]
    """
 
    assert len(xs) > 0, "invalid inputs" # $_CONTRACT_$
    assert all(type(x) in (int, float) for x in xs), "invalid inputs" # $_CONTRACT_$
 

    return [xs[i] * i for i in range(1, len(xs))]

 derivative [[[3, 1, 2, 4, 5]], [[1, 2, 3]], [[3, 2, 1]], [[3, 2, 1, 0, 4]], [[1]]] [[[0, 0, 0, 0, 0, 5]], [[0, 7, -1, 0, 0, 0, 0]], [[0]], [[1, -4, 0, 2.5, 6.8, 9, 10.2]]] 0
HumanEval/63 

def fibfib(n: int):
    """The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:
    fibfib(0) == 0
    fibfib(1) == 0
    fibfib(2) == 1
    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).
    Please write a function to efficiently compute the n-th element of the fibfib number sequence.
    >>> fibfib(1)
    0
    >>> fibfib(5)
    4
    >>> fibfib(8)
    24
    """
 
    assert isinstance(n, int), "invalid inputs" # $_CONTRACT_$
    assert n >= 0, "invalid inputs" # $_CONTRACT_$
 

    if n == 0 or n == 1:
        return 0
    elif n == 2:
        return 1
    a, b, c = 0, 0, 1
    for _ in range(3, n + 1):
        a, b, c = b, c, a + b + c
    return c

 fibfib [[2], [1], [5], [8], [10], [12], [14]] [[20], [0], [2], [1], [25]] 0
HumanEval/64 
FIX = """
Add more test cases.
"""

def vowels_count(s):
    """Write a function vowels_count which takes a string representing
    a word as input and returns the number of vowels in the string.
    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a
    vowel, but only when it is at the end of the given word.

    Example:
    >>> vowels_count("abcde")
    2
    >>> vowels_count("ACEDY")
    3
    """
 
    assert type(s) == str, "invalid inputs" # $_CONTRACT_$
 
    if s == "": return 0
    cnt = len(list(filter(lambda ch: ch in "aeiouAEIOU", s)))
    if s[-1] in "yY": cnt += 1
    return cnt

 vowels_count [['abcde'], ['Alone'], ['key'], ['bye'], ['keY'], ['bYe'], ['ACEDY']] [['hello'], [''], ['aAEIOUYXWouy'], ['AEIOUYX'], ['iaeaeiouyfacetiousnessioAEIOUYYXWouy'], ['Y'], ['candaeioyoyynad']] 0
HumanEval/65 
def circular_shift(x, shift):
    """Circular shift the digits of the integer x, shift the digits right by shift
    and return the result as a string.
    If shift > number of digits, return digits reversed.
    >>> circular_shift(12, 1)
    "21"
    >>> circular_shift(12, 2)
    "12"
    """
 
    assert type(x) == type(shift) == int, "invalid inputs" # $_CONTRACT_$
    assert x >= 0 and shift >= 0, "invalid inputs" # $_CONTRACT_$
 

    s = str(x)
    if shift > len(s): return s[::-1]
    shift %= len(s)
    if shift == 0:
        return s
    else:
        return s[len(s) - shift:] + s[:len(s) - shift]

 circular_shift [[100, 2], [12, 2], [97, 8], [12, 1], [11, 101]] [[341209, 4], [16, 3], [987654321, 9], [345, 1], [500, 4], [1234567890987654324, 0], [23, 789456124], [10, 1], [0, 1000]] 0
HumanEval/66 
def digitSum(s):
    """Task
    Write a function that takes a string as input and returns the sum of the upper characters only'
    ASCII codes.

    Examples:
        digitSum("") => 0
        digitSum("abAB") => 131
        digitSum("abcCd") => 67
        digitSum("helloE") => 69
        digitSum("woArBld") => 131
        digitSum("aAaaaXa") => 153
    """
 
    assert type(s) == str, "invalid inputs" # $_CONTRACT_$
 
    return sum([ord(ch) for ch in s if ch.isupper()])

 digitSum [[''], ['abAB'], ['abcCd'], ['helloE'], ['woArBld'], ['aAaaaXa'], [' How are yOu?'], ['You arE Very Smart']] [['123'], ['abcd1123A12:;<=>?@[\\]^_`{|}~ABC123def456GHI3BCD'], ['ABCDEFGHIJKLMNOPQRSTUVWXYZ'], ['A'], ['a'], ['']] 0
HumanEval/67 
def fruit_distribution(s,n):
    """
    In this task, you will be given a string that represents a number of apples and oranges 
    that are distributed in a basket of fruit this basket contains 
    apples, oranges, and mango fruits. Given the string that represents the total number of 
    the oranges and apples and an integer that represent the total number of the fruits 
    in the basket return the number of the mango fruits in the basket.
    for examble:
    fruit_distribution("5 apples and 6 oranges", 19) ->19 - 5 - 6 = 8
    fruit_distribution("0 apples and 1 oranges",3) -> 3 - 0 - 1 = 2
    fruit_distribution("2 apples and 3 oranges", 100) -> 100 - 2 - 3 = 95
    fruit_distribution("100 apples and 1 oranges",120) -> 120 - 100 - 1 = 19
    """
 
    assert type(s) == str and type(n) == int, "invalid inputs" # $_CONTRACT_$
    words = s.split(" ") # $_CONTRACT_$
    assert len(words) == 5, "invalid inputs" # $_CONTRACT_$
    assert words[1] == "apples" and words[2] == "and" and words[4] == "oranges", "invalid inputs" # $_CONTRACT_$
    assert words[0].isdigit() and words[3].isdigit(), "invalid inputs" # $_CONTRACT_$
 

    words = s.split(" ")
    c1, c2 = int(words[0]), int(words[3])
    assert n - c1 - c2 >= 0, "invalid inputs" # $_CONTRACT_$
    
    return n - c1 - c2

 fruit_distribution [['5 apples and 6 oranges', 19], ['5 apples and 6 oranges', 21], ['0 apples and 1 oranges', 3], ['1 apples and 0 oranges', 3], ['2 apples and 3 oranges', 100], ['2 apples and 3 oranges', 5], ['1 apples and 100 oranges', 120]] [['10 apples and 20 oranges', 30], ['10 apples and 20 oranges', 51], ['10 apples and 20 oranges', 50], ['0 apples and 0 oranges', 10]] 0
HumanEval/68 
def pluck(arr):
    """
    "Given an array representing a branch of a tree that has non-negative integer nodes
    your task is to pluck one of the nodes and return it.
    The plucked node should be the node with the smallest even value.
    If multiple nodes with the same smallest even value are found return the node that has smallest index.

    The plucked node should be returned in a list, [ smalest_value, its index ],
    If there are no even values or the given array is empty, return [].

    Example 1:
        Input: [4,2,3]
        Output: [2, 1]
        Explanation: 2 has the smallest even value, and 2 has the smallest index.

    Example 2:
        Input: [1,2,3]
        Output: [2, 1]
        Explanation: 2 has the smallest even value, and 2 has the smallest index. 

    Example 3:
        Input: []
        Output: []
    
    Example 4:
        Input: [5, 0, 3, 0, 4, 2]
        Output: [0, 1]
        Explanation: 0 is the smallest value, but  there are two zeros,
                     so we will choose the first zero, which has the smallest index.

    Constraints:
        * 1 <= nodes.length <= 10000
        * 0 <= node.value
    """
 
    assert len(arr) <= 10000, "invalid inputs" # $_CONTRACT_$
    assert all(type(val) == int and val >= 0 for val in arr), "invalid inputs" # $_CONTRACT_$
 

    if all(val % 2 == 1 for val in arr): return []
    min_even = min(filter(lambda x: x % 2 == 0, arr))
    for i in range(len(arr)):
        if arr[i] == min_even:
            return [min_even, i]

 pluck [[[4, 2, 3]], [[1, 2, 3]], [[]], [[5, 0, 3, 0, 4, 2]], [[1, 2, 3, 0, 5, 3]], [[5, 4, 8, 4, 8]], [[7, 6, 7, 1]], [[7, 9, 7, 1]]] [[[7, 15, 12, 21, 8, 13]], [[1, 3, 5, 7, 9]], [[2, 2, 2, 2, 2, 2]], [[7, 15, 12, 21, 8, 14]], [[101]], [[0, 0, 0, 0, 0]], [[1, 25, 13, 10000, 25]], [[0]]] 0
HumanEval/69 
def search(lst):
    '''
    You are given a non-empty list of positive integers. Return the greatest integer that is greater than 
    zero, and has a frequency greater than or equal to the value of the integer itself. 
    The frequency of an integer is the number of times it appears in the list.
    If no such a value exist, return -1.
    Examples:
        search([4, 1, 2, 2, 3, 1]) == 2
        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3
        search([5, 5, 4, 4, 4]) == -1
    '''
 
    assert all(type(val) == int and val > 0 for val in lst), "invalid inputs" # $_CONTRACT_$
 

    count = dict()
    for num in lst:
        if num not in count:
            count[num] = 0
        count[num] += 1
    ans = -1
    for num, cnt in count.items():
        if cnt >= num:
            ans = max(ans, num)
    return ans

 search [[[5, 5, 5, 5, 1]], [[4, 1, 4, 1, 4, 4]], [[3, 3]], [[8, 8, 8, 8, 8, 8, 8, 8]], [[2, 3, 3, 2, 2]], [[2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]], [[3, 2, 8, 2]], [[6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]], [[8, 8, 3, 6, 5, 6, 4]], [[6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]], [[1, 9, 10, 1, 3]], [[6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]], [[1]], [[8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]], [[2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]], [[1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]], [[9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]], [[2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]], [[9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]], [[5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]], [[10]], [[9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]], [[5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]], [[7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]], [[3, 10, 10, 9, 2]]] [[[3, 2, 1, 1, 1, 1, 1]], [[5]], [[1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5]], [[4, 5, 6, 4, 3, 5, 5]], [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 18, 2, 2, 18, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 7, 7, 7, 7, 3, 8, 8, 9, 9, 9, 10, 10, 10, 1, 1]], [[1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 16, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 2, 2, 2, 18, 3, 3, 4, 4, 4, 5, 5, 6, 6, 7, 7, 7, 7, 8, 8, 8, 9, 7, 9, 10, 10, 10, 1]], [[1, 1, 1, 1, 2, 2, 2, 3, 3, 4, 7, 4, 6, 4, 4, 4, 4, 4, 3, 1]], [[2, 2, 3, 3, 13, 12, 4, 4, 4, 5, 5, 20, 5, 5, 2, 5, 2]], [[1, 1, 11, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3]]] 0
HumanEval/70 
def strange_sort_list(lst):
    '''
    Given list of integers, return list in strange order.
    Strange sorting, is when you start with the minimum value,
    then maximum of the remaining integers, then minimum and so on.

    Examples:
    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]
    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]
    strange_sort_list([]) == []
    '''
 
    assert type(lst) == list, "invalid inputs" # $_CONTRACT_$
    assert all(type(x) == int for x in lst), "invalid inputs" # $_CONTRACT_$
 
    sorted_list = sorted(lst)
    ans, i, j = [], 0, len(sorted_list) - 1
    while i < j:
        ans.append(sorted_list[i])
        ans.append(sorted_list[j])
        i += 1
        j -= 1
    if i == j: ans.append(sorted_list[i])
    return ans

 strange_sort_list [[[1, 2, 3, 4]], [[5, 6, 7, 8, 9]], [[1, 2, 3, 4, 5]], [[5, 6, 7, 8, 9, 1]], [[5, 5, 5, 5]], [[]], [[1, 2, 3, 4, 5, 6, 7, 8]], [[0, 2, 2, 2, 5, 5, -5, -5]], [[111111]]] [[[-5, 0, 5, 10]], [[100, 200, 300, 150, 75, 35, 10]], [[1, 3, 5, 2, 4, 6, 2]], [[50, -10, 80, 0, 70, 10, 60, 21, -10, 50, 30, 0, 8, 21]], [[1]]] 0
HumanEval/71 
def triangle_area(a, b, c):
    '''
    Given the lengths of the three sides of a triangle. Return the area of
    the triangle rounded to 2 decimal points if the three sides form a valid triangle. 
    Otherwise return -1
    Three sides make a valid triangle when the sum of any two sides is greater 
    than the third side.
    Example:
    triangle_area(3, 4, 5) == 6.00
    triangle_area(1, 2, 10) == -1
    '''
 
    assert a > 0 and b > 0 and c > 0, "invalid inputs" # $_CONTRACT_$
 

    if a + b <= c or a + c <= b or b + c <= a: return -1
    p = (a + b + c) / 2
    return round((p * (p - a) * (p - b) * (p - c)) ** 0.5, 2)

 triangle_area [[3, 4, 5], [1, 2, 10], [4, 8, 5], [2, 2, 2], [1, 2, 3], [10, 5, 7], [2, 6, 3], [1, 1, 1], [2, 2, 10]] [[8, 9, 15], [8, 9, 17], [10, 12, 15], [8, 9, 1], [10, 5, 5], [7, 7, 7], [2, 9, 2]] 0
HumanEval/72 
def will_it_fly(q,w):
    '''
    Write a function that returns True if the object q will fly, and False otherwise.
    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.

    Example:
    will_it_fly([1, 2], 5) ➞ False 
    # 1+2 is less than the maximum possible weight, but it's unbalanced.

    will_it_fly([3, 2, 3], 1) ➞ False
    # it's balanced, but 3+2+3 is more than the maximum possible weight.

    will_it_fly([3, 2, 3], 9) ➞ True
    # 3+2+3 is less than the maximum possible weight, and it's balanced.

    will_it_fly([3], 5) ➞ True
    # 3 is less than the maximum possible weight, and it's balanced.
    '''
 
    assert type(q) == list and all(type(x) in [int, float] for x in q), "invalid inputs" # $_CONTRACT_$
    assert type(w) in [int, float], "invalid inputs" # $_CONTRACT_$
 
    return q == q[::-1] and sum(q) <= w

 will_it_fly [[[3, 2, 3], 9], [[1, 2], 5], [[3], 5], [[3, 2, 3], 1], [[1, 2, 3], 6], [[5], 5]] [[[1, 2, 1], 4], [[1, 2, 3], 10], [[2, 2, 1, 0, 2, 2], 30], [[1, 2, 3, 2, 1], 10], [[], 0], [[1], 0], [[4, 2, 1, 2, 4], 12], [[14, 1], 83], [[4, 2, 1, 2, 4], 13], [[1, -1, 0], 0], [[0], 0], [[1], -1]] 0
HumanEval/73 
def smallest_change(arr):
    """
    Given an array arr of integers, find the minimum number of elements that
    need to be changed to make the array palindromic. A palindromic array is an array that
    is read the same backwards and forwards. In one change, you can change one element to any other element.

    For example:
    smallest_change([1,2,3,5,4,7,9,6]) == 4
    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1
    smallest_change([1, 2, 3, 2, 1]) == 0
    """
 
    assert type(arr) == list, "invalid inputs" # $_CONTRACT_$
    assert all(type(x) == int for x in arr), "invalid inputs" # $_CONTRACT_$
 
    arr_reversed, cnt = arr[::-1], 0
    for i in range(len(arr) // 2):
        if arr[i] != arr_reversed[i]:
            cnt += 1
    return cnt

 smallest_change [[[1, 2, 3, 5, 4, 7, 9, 6]], [[1, 2, 3, 4, 3, 2, 2]], [[1, 4, 2]], [[1, 4, 4, 2]], [[1, 2, 3, 2, 1]], [[3, 1, 1, 3]], [[1]], [[0, 1]]] [[[1, 2, 3, 4, 2, 3, 2, 1]], [[1, 2, 2, 1]], [[1, 1, 2, 2, 3, 3, 4, 4]], [[-10, -9, -8, -7, -6, -5, 17, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 6, 7, 8, -7, 9, 10, 10]], [[1, 2, 2, 2, 2, 2, 3, 4]], [[5, 4, 3, 2, 1]]] 0
HumanEval/74 
def total_match(lst1, lst2):
    '''
    Write a function that accepts two lists of strings and returns the list that has 
    total number of chars in the all strings of the list less than the other list.

    if the two lists have the same number of chars, return the first list.

    Examples
    total_match([], []) ➞ []
    total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']
    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']
    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']
    total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']
    '''
 
    assert type(lst1) == type(lst2) == list, "invalid inputs" # $_CONTRACT_$
    assert all(type(x) == str for x in lst1), "invalid inputs" # $_CONTRACT_$
    assert all(type(x) == str for x in lst2), "invalid inputs" # $_CONTRACT_$
 
    c1, c2 = sum(map(lambda s: len(s), lst1)), sum(map(lambda s: len(s), lst2))
    return lst1 if c1 <= c2 else lst2

 total_match [[[], []], [['hi', 'admin'], ['hi', 'hi']], [['hi', 'admin'], ['hi', 'hi', 'admin', 'project']], [['4'], ['1', '2', '3', '4', '5']], [['hi', 'admin'], ['hI', 'Hi']], [['hi', 'admin'], ['hI', 'hi', 'hi']], [['hi', 'admin'], ['hI', 'hi', 'hii']], [[], ['this']], [['this'], []]] [[[''], ['hello']], [['happy', 'birthday', 'sarah'], ['happy', 'birthday', 'sally']], [['AbCdEfG', 'TydBz', 'date', 'AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsT', 'UuVvWwXyxYyZz', 'HijKlMnOp'], ['hijklmnop', 'qrstuv', 'wxyz', 'abcdefg', 'qrstqrstuvwxworldyuv', 'abcdefg']], [['hello', 'world'], ['cathi', 'there']], [['coding', 'is', 'codig', 'fun', 'coding'], ['codogding', 'coding', 'is', 'awesome']], [['apple', 'banana'], []], [[], ['']]] 0
HumanEval/75 
def is_multiply_prime(a):
    """Write a function that returns true if the given number is the multiplication of 3 prime numbers
    and false otherwise.
    Knowing that (a) is less then 100. 
    Example:
    is_multiply_prime(30) == True
    30 = 2 * 3 * 5
    """
 
    assert type(a) == int, "invalid inputs" # $_CONTRACT_$
    assert a < 100, "invalid inputs" # $_CONTRACT_$
 
    if a <= 1: return False
    isprime = [True] * (a + 1)
    for i in range(2, a + 1):
        if isprime[i]:
            for j in range(i + i, a + 1, i):
                isprime[j] = False
    cnt, tmp = 0, a
    for i in range(2, a + 1):
        while isprime[i] and tmp % i == 0:
            tmp //= i
            cnt += 1
    return cnt == 3

 is_multiply_prime [[5], [30], [8], [10]] [[33], [-98], [2], [98], [99], [-56]] 0
HumanEval/76 
def is_simple_power(x, n):
    """Your task is to write a function that returns true if a number x is a simple
    power of n and false in other cases.
    x is a simple power of n if n**int=x
    For example:
    is_simple_power(1, 4) => true
    is_simple_power(2, 2) => true
    is_simple_power(8, 2) => true
    is_simple_power(3, 2) => false
    is_simple_power(3, 1) => false
    is_simple_power(5, 3) => false
    """
 
    assert type(x) == int and type(n) == int, "invalid inputs" # $_CONTRACT_$
 
    if x == 1: return True
    if n == 0: return x == 0
    if n == 1: return x == 1
    if n == -1: return abs(x) == 1
    p = n
    while abs(p) <= abs(x):
        if p == x: return True
        p = p * n
    return False

 is_simple_power [[16, 2], [143214, 16], [4, 2], [9, 3], [16, 4], [24, 2], [128, 4], [12, 6], [1, 1], [1, 12]] [[25, 5], [10, 2], [5, 5], [82, 1], [1, 1], [-1, 0], [2, 1], [-2, -2], [0, 0], [125, 5], [4722366482869645213696, 1099511627776], [1, 4], [15, 3], [16777216, 4], [16, -2]] 0
HumanEval/77 
def iscube(a):
    '''
    Write a function that takes an integer a and returns True 
    if this ingeger is a cube of some integer number.
    Note: you may assume the input is always valid.
    Examples:
    iscube(1) ==> True
    iscube(2) ==> False
    iscube(-1) ==> True
    iscube(64) ==> True
    iscube(0) ==> True
    iscube(180) ==> False
    '''
 
    assert type(a) == int, "invalid inputs" # $_CONTRACT_$
 
    a = abs(a)
    return int(round(a ** (1. / 3))) ** 3 == a

 iscube [[1], [1], [2], [2], [-1], [-1], [64], [64], [180], [180], [1000], [1000], [0], [0], [1729], [1728]] [[27], [-64], [-2147483648], [-9223372036854775808], [-999999]] 0
HumanEval/78 
def hex_key(num):
    """You have been tasked to write a function that receives 
    a hexadecimal number as a string and counts the number of hexadecimal 
    digits that are primes (prime number, or a prime, is a natural number 
    greater than 1 that is not a product of two smaller natural numbers).
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...
    So you have to determine a number of the following digits: 2, 3, 5, 7, 
    B (=decimal 11), D (=decimal 13).
    Note: you may assume the input is always correct or empty string, 
    and symbols A,B,C,D,E,F are always uppercase.
    Examples:
    For num = "AB" the output should be 1.
    For num = "1077E" the output should be 2.
    For num = "ABED1A33" the output should be 4.
    For num = "123456789ABCDEF0" the output should be 6.
    For num = "2020" the output should be 2.
    """
 
    assert all(x in "0123456789ABCDEF" for x in num), "invalid inputs" # $_CONTRACT_$
 
    
    return len(list(filter(lambda x: x in "2357BD", num)))

 hex_key [['AB'], ['AB'], ['1077E'], ['1077E'], ['ABED1A33'], ['ABED1A33'], ['2020'], ['2020'], ['123456789ABCDEF0'], ['123456789ABCDEF0'], ['112233445566778899AABBCCDDEEFF00'], ['112233445566778899AABBCCDDEEFF00'], [[]]] [['ABCDEF'], ['ACDF12345B67C2022EEEFAD890ABCDEF12345BBAA202001111887215E753BD9CEFF23BCCBBD4'], [{}], ['67ABCD23'], ['11111777777'], ['679D99999ABCD23'], ['1']] 0
HumanEval/79 
def decimal_to_binary(decimal):
    """You will be given a number in decimal form and your task is to convert it to
    binary format. The function should return a string, with each character representing a binary
    number. Each character in the string will be '0' or '1'.

    There will be an extra couple of characters 'db' at the beginning and at the end of the string.
    The extra characters are there to help with the format.

    Examples:
    decimal_to_binary(15)   # returns "db1111db"
    decimal_to_binary(32)   # returns "db100000db"
    """
 
    assert type(decimal) == int, "invalid inputs" # $_CONTRACT_$
    assert decimal >= 0, "invalid inputs" # $_CONTRACT_$
 

    return "db" + bin(decimal)[2:] + "db"

 decimal_to_binary [[0], [32], [103], [15]] [[100001], [0], [7]] 0
HumanEval/80 
def is_happy(s):
    """You are given a string s.
    Your task is to check if the string is happy or not.
    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct
    For example:
    is_happy(a) => False
    is_happy(aa) => False
    is_happy(abcd) => True
    is_happy(aabb) => False
    is_happy(adb) => True
    is_happy(xyy) => False
    """
 
    assert type(s) == str, "invalid inputs" # $_CONTRACT_$
 
    if len(s) < 3: return False
    for i in range(len(s) - 2):
        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:
            return False
    return True

 is_happy [['a'], ['aa'], ['abcd'], ['aabb'], ['adb'], ['xyy'], ['iopaxpoi'], ['iopaxioi']] [['xyz'], ['agbebf'], ['xy'], ['xxy'], [' this is hb'], ['tibacacbacbm'], ['baUee'], ['abcdefghijklmde'], ['cabcabc'], ['bacacbacb'], [' this is bat'], ['x'], ['yyyyyy'], ['qwertyuiopasdfghjklzxcvbnmqwertlyuiopasdfghjklzxcvbqwertyuiopasdfghjklzxcvbnmqwertyabcabuiopasdfghjkaaaaabbbdddccccaaeeeedddccccaabcabcabcabcabcabbcabcabcabcacbcaaaaabbbbccccdeeeddddccccbbbbaaaaaaaabbbbccccdeeeddddccccbbbbaaaaeeeedddccccaaeeeedddccccaabcabcabcabcabcabcabcabcabcabcabcabcaabcabbcabcabcababcabbcabcabcababcabbbaaaaaaaabbbbccccdeeeddddccabcabcaabcccaaabbddeefffbcabcaabcabcabcabcabcabcabcabcabcabcabcabcabccb11223344556abcabcabcabcabcabcabcabcabcabaaaaabbbbccccdeeeddddccccbbbbaaaaaaaabbbbccccdeeeddddccccbbbbaaaaeeeedddccccaaeeeedddccccacabcabcabcabbcabcabcab65677889900aad4dbbccddeeaabbccddeebbbaaaaeeeedddccccaaeeeedddccccalzxcvb']] 0
HumanEval/81 
def numerical_letter_grade(grades):
    """It is the last week of the semester and the teacher has to give the grades
    to students. The teacher has been making her own algorithm for grading.
    The only problem is, she has lost the code she used for grading.
    She has given you a list of GPAs for some students and you have to write 
    a function that can output a list of letter grades using the following table:
             GPA       |    Letter grade
              4.0                A+
            > 3.7                A 
            > 3.3                A- 
            > 3.0                B+
            > 2.7                B 
            > 2.3                B-
            > 2.0                C+
            > 1.7                C
            > 1.3                C-
            > 1.0                D+ 
            > 0.7                D 
            > 0.0                D-
              0.0                E
    

    Example:
    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']
    """
 
    assert all(0.0 <= x <= 4.0 for x in grades), "invalid inputs" # $_CONTRACT_$
 

    def to_letter_grade(score):
      if score == 4.0:
        return "A+"
      elif score > 3.7:
        return "A"
      elif score > 3.3:
        return "A-"
      elif score > 3.0:
        return "B+"
      elif score > 2.7:
        return "B"
      elif score > 2.3:
        return "B-"
      elif score > 2.0:
        return "C+"
      elif score > 1.7:
        return "C"
      elif score > 1.3:
        return "C-"
      elif score > 1.0:
        return "D+"
      elif score > 0.7:
        return "D"
      elif score > 0.0:
        return "D-"
      else:
        return "E"
    
    return [to_letter_grade(x) for x in grades]

 numerical_letter_grade [[[4.0, 3, 1.7, 2, 3.5]], [[1.2]], [[0.5]], [[0.0]], [[1, 0.3, 1.5, 2.8, 3.3]], [[0, 0.7]]] [[[4.0, 3.9, 3.7, 3.31, 3.29, 3.0, 2.99, 2.7, 2.69, 2.3, 2.29, 2.0, 0.8, 1.99, 1.7, 1.69, 1.3, 3.3462428245777955, 1.29, 0.7, 0.69, 0.0]], [[3.8, 2.5, 3.9, 2.2, 1.0]], [[3.1, 2.7, 1.8, 0.9, 0.5, 4.0]], [[3.2, 3.1, 3.0, 2.9, 2.8, 2.7]], [[4.0, 4.0, 4.0, 4.0]], [[1.7, 1.7, 1.7, 1.7]], [[2.0, 2.0, 2.0, 2.0]], [[3.709427582366981, 4.0, 4.0, 4.0, 4.0, 4.0]], [[3.2, 3.1, 3.0, 1.042839384499805, 3.7622258594833253, 3.1]], [[3.2, 3.8, 3.0, 2.9, 2.8, 3.763604414675102]], [[3.8, 2.5, 2.2, 3.8, 2.5]], [[4.0, 3.9, 3.8, 3.7, 3.6, 3.5, 3.4, 3.3, 3.2, 3.1, 3.0, 2.9, 2.8, 2.7, 2.6, 2.5, 2.4, 2.3, 2.2, 2.1, 2.0, 1.9, 1.8, 1.7, 1.6, 1.5, 1.4, 1.3, 1.2, 1.1, 1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.0]], [[4.0, 3.5182986408219863, 3.9, 3.8, 3.7, 3.31, 2.2, 3.0, 2.99, 2.7, 2.69, 2.3, 2.29, 2.0, 1.99, 1.7, 1.69, 1.3, 1.29, 0.7, 0.69, 0.0]], [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], ['']] 0
HumanEval/82 
def prime_length(string):
    """Write a function that takes a string and returns True if the string
    length is a prime number or False otherwise
    Examples
    prime_length('Hello') == True
    prime_length('abcdcba') == True
    prime_length('kittens') == True
    prime_length('orange') == False
    """
 
    assert type(string) == str, "invalid inputs" # $_CONTRACT_$
 
    def is_prime(a):
        return not (a < 2 or any(a % x == 0 for x in range(2, int(a ** 0.5) + 1)))

    return is_prime(len(string))

 prime_length [['Hello'], ['abcdcba'], ['kittens'], ['orange'], ['wow'], ['world'], ['MadaM'], ['Wow'], [''], ['HI'], ['go'], ['gogo'], ['aaaaaaaaaaaaaaa'], ['Madam'], ['M'], ['0']] [['abcde'], ['abcd'], ['ab'], ['ThWThisthaaatxjmnzThe qulengantidMsYJFEtsgcehuqTkrPxBLWjpDfmvNaRlKOiVbnZIlishmentarilanismbrownover mfox judog.is'], ['a'], [''], ['The qu ick brown fox jumpsb over the lahaszyThequickbrownfoxjumpsoverthelazydogThequtheickbrownfoxjumpssoverthelazydogog.'], ['lengtThiMsYJFEtsgcehuqTkrPdog.xBantidisestablishmentsarRlKOiVgbnZIoaethexBLThWxjmnzThe quickp brownjumpsThe quick brown fox jumps Wxjmnzover the lazy dog.KOiVbThe quick brown fox jumps Wxjmnzover the lazy dog.WxjmnzoveThisnZIoa.h'], ['pabc'], ['sis'], ['aaaa']] 0
HumanEval/83 
def starts_one_ends(n):
    """
    Given a positive integer n, return the count of the numbers of n-digit
    positive integers that start or end with 1.
    """
 
    assert type(n) == int and n > 0, "invalid inputs" # $_CONTRACT_$
 

    if n == 1: return 1
    return 18 * 10 ** (n - 2)

 starts_one_ends [[1], [2], [3], [4], [5]] [[6], [10], [999998]] 0
HumanEval/84 
def solve(N):
    """Given a positive integer N, return the total sum of its digits in binary.
    
    Example
        For N = 1000, the sum of digits will be 1 the output should be "1".
        For N = 150, the sum of digits will be 6 the output should be "110".
        For N = 147, the sum of digits will be 12 the output should be "1100".
    
    Variables:
        @N integer
             Constraints: 0 ≤ N ≤ 10000.
    Output:
         a string of binary number
    """
 
    assert type(N) == int, "invalid inputs" # $_CONTRACT_$
    assert 0 < N <= 10000, "invalid inputs" # $_CONTRACT_$
 

    s = sum(map(lambda x: int(x), str(N)))
    return bin(s)[2:]

 solve [[1000], [150], [147], [333], [963]] [[1], [9999], [10]] 0
HumanEval/85 
def add(lst):
    """Given a non-empty list of integers lst. add the even elements that are at odd indices..


    Examples:
        add([4, 2, 6, 7]) ==> 2 
    """
 
    assert len(lst) > 0, "invalid inputs" # $_CONTRACT_$
    assert all(type(x) == int for x in lst), "invalid inputs" # $_CONTRACT_$
 

    s = 0
    for i in range(1, len(lst), 2):
        if lst[i] % 2 == 0:
            s += lst[i]
    return s

 add [[[4, 88]], [[4, 5, 6, 7, 2, 122]], [[4, 0, 6, 7]], [[4, 4, 6, 8]]] [[[2, 3, 6, 8]], [[3, 5, 7, 9]], [[2, 4, 6, 8]], [[5, 3, 21, 64, 3, 2, 64, 1, 1]]] 0
HumanEval/86 
def anti_shuffle(s):
    """
    Write a function that takes a string and returns an ordered version of it.
    Ordered version of string, is a string where all words (separated by space)
    are replaced by a new word where all the characters arranged in
    ascending order based on ascii value.
    Note: You should keep the order of words and blank spaces in the sentence.

    For example:
    anti_shuffle('Hi') returns 'Hi'
    anti_shuffle('hello') returns 'ehllo'
    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'
    """
 
    assert type(s) == str, "invalid inputs" # $_CONTRACT_$
 
    words = s.split(" ")
    return " ".join(map(lambda x: "".join(sorted(x, key=lambda ch: ord(ch))), words))

 anti_shuffle [['Hi'], ['hello'], ['number'], ['abcd'], ['Hello World!!!'], [''], ['Hi. My name is Mister Robot. How are you?']] [['12345'], ['\n\n123 456\n789\n'], [' \t\nG TheH I      '], ['']] 0
HumanEval/87 
def get_row(lst, x):
    """
    You are given a 2 dimensional data, as a nested lists,
    which is similar to matrix, however, unlike matrices,
    each row may contain a different number of columns.
    Given lst, and integer x, find integers x in the list,
    and return list of tuples, [(x1, y1), (x2, y2) ...] such that
    each tuple is a coordinate - (row, columns), starting with 0.
    Sort coordinates initially by rows in ascending order.
    Also, sort coordinates of the row by columns in descending order.
    
    Examples:
    get_row([
      [1,2,3,4,5,6],
      [1,2,3,4,1,6],
      [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]
    get_row([], 1) == []
    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]
    """
 
    assert type(x) == int, "invalid inputs" # $_CONTRACT_$
    assert type(lst) == list, "invalid inputs" # $_CONTRACT_$
    assert all(type(y) == list for y in lst), "invalid inputs" # $_CONTRACT_$
 
    res = []
    for i, l in enumerate(lst):
        for j in range(len(l) - 1, -1, -1):
            if l[j] == x: res.append((i, j))
    return res

 get_row [[[[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1], [[[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2], [[[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1], [[], 1], [[[1]], 2], [[[], [1], [1, 2, 3]], 3]] [[[[1, 2, 3], [4, 5, 6]], 5], [[[], [], [], []], 10], [[[1, 1], [1, 2, 3], [4, 5, 6, 7]], 1], [[[0, 0, 0, 0, 0], [0, 1, 2], [0, 1, 2, 3, 4, 5, 6, 7, 8], [0, 0, 0], [0, 1, 2, 3, 4, 5, 6, 7, 8]], 0], [[[], [False, True, True], []], 0], [[[5]], 5], [[[0]], 1]] 0
HumanEval/88 
def sort_array(array):
    """
    Given an array of non-negative integers, return a copy of the given array after sorting,
    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,
    or sort it in descending order if the sum( first index value, last index value) is even.

    Note:
    * don't change the given array.

    Examples:
    * sort_array([]) => []
    * sort_array([5]) => [5]
    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]
    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]
    """
 
    assert all(x >= 0 for x in array), "invalid inputs" # $_CONTRACT_$
 

    if array == []: return []
    return sorted(array, reverse=(array[0]+array[-1]) % 2 == 0)

 sort_array [[[]], [[5]], [[2, 4, 3, 0, 1, 5]], [[2, 4, 3, 0, 1, 5, 6]], [[2, 1]], [[15, 42, 87, 32, 11, 0]], [[21, 14, 23, 11]]] [[[0, 0, 0, 0]], [[1, 2, 3]], [[3, 1, 9, 2, 8, 3, 7, 3, 6, 5]], [[1, 9, 2, 8, 3, 7, 4, 6, 5, 2]], [[2, 2, 3, 3, 1, 1, 70, 1, 3, 1]]] 0
HumanEval/89 
def encrypt(s):
    """Create a function encrypt that takes a string as an argument and
    returns a string encrypted with the alphabet being rotated. 
    The alphabet should be rotated in a manner such that the letters 
    shift down by two multiplied to two places.
    For example:
    encrypt('hi') returns 'lm'
    encrypt('asdfghjkl') returns 'ewhjklnop'
    encrypt('gf') returns 'kj'
    encrypt('et') returns 'ix'
    """
 
    assert s == "" or s.islower(), "invalid inputs" # $_CONTRACT_$
 
    d = 'abcdefghijklmnopqrstuvwxyz'
    return "".join(map(lambda ch: chr((ord(ch) - ord("a") + 4) % 26 + ord("a")) if ch in d else ch, s))

 encrypt [['hi'], ['asdfghjkl'], ['gf'], ['et'], ['faewfawefaewg'], ['hellomyfriend'], ['dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'], ['a']] [['abcde'], ['uvwxyz'], ['hello world'], ['cpaararuvvzte1a2b3cstpark1abct23'], ['']] 0
HumanEval/90 
def next_smallest(lst):
    """
    You are given a list of integers.
    Write a function next_smallest() that returns the 2nd smallest element of the list.
    Return None if there is no such element.
    
    next_smallest([1, 2, 3, 4, 5]) == 2
    next_smallest([5, 1, 4, 3, 2]) == 2
    next_smallest([]) == None
    next_smallest([1, 1]) == None
    """
 
    assert all(type(x) == int for x in lst), "invalid inputs" # $_CONTRACT_$
 
    if len(lst) <= 1: return None
    sorted_list = sorted(lst)
    for x in sorted_list:
        if x != sorted_list[0]:
            return x 

 next_smallest [[[1, 2, 3, 4, 5]], [[5, 1, 4, 3, 2]], [[]], [[1, 1]], [[1, 1, 1, 1, 0]], [[1, 1]], [[-35, 34, 12, -45]]] [[[1, 2, 3, 4, 5, 6]], [[4, 4, 4, 4, 4, 4, 4]], [''], [[-109, 23, 21, 17, 15, 13, 11, 9, -109, 7, -90, 1, 17, 9]], [[-5, -3, -2, -8, -1]], [[5]], [[2, 2, 2, 2, 2, 2, 3, 3, 3, 3]]] 0
HumanEval/91 
def is_bored(S):
    """
    You'll be given a string of words, and your task is to count the number
    of boredoms. A boredom is a sentence that starts with the word "I".
    Sentences are delimited by '.', '?' or '!'.
   
    For example:
    >>> is_bored("Hello world")
    0
    >>> is_bored("The sky is blue. The sun is shining. I love this weather")
    1
    """
 
    assert type(S) == str, "invalid inputs" # $_CONTRACT_$
 
    sentences = map(lambda x: x.strip(), ((S.replace("?", ".")).replace("!", ".")).split("."))
    return len([s for s in sentences if s.startswith("I ")])

 is_bored [['Hello world'], ['Is the sky blue?'], ['I love It !'], ['bIt'], ['I feel good today. I will be productive. will kill It'], ['You and I are going for a walk']] [['I am very happy today. I love spending time with my friends.'], ['Hello world. I am feeling good today. Are the plants green? Who knows! I bet It is hot outside.'], ['Have you ever gone skydiving before? I did it once and it was amazing.'], ['I have a lot of work to do today. I wish I could take a naI forgot my phone in the car. Oh no, now I have to go back and get it.p iI enjoy reading bo oks. They help me learn new things.nstead.'], ['Hello world. I am feeling goohd today. Are the plants greent? Who knows! I beHello world. I am feelihe plants greent? Who knows! I bet It is hot outside. outside.'], ['In the morning, I lI forgot my phone in the car. Oh no, now I have to go back and get it.ike to have a cup of coffee to start my day off right. How about you?'], ['I']] 0
HumanEval/92 
def any_int(x, y, z):
    '''
    Create a function that takes 3 numbers.
    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    Returns false in any other cases.
    
    Examples
    any_int(5, 2, 7) ➞ True
    
    any_int(3, 2, 2) ➞ False

    any_int(3, -2, 1) ➞ True
    
    any_int(3.6, -2.2, 2) ➞ False
  

    
    '''
 
    assert all(isinstance(v, (int, float, bool)) for v in [x, y, z]), "invalid inputs" # $_CONTRACT_$
 
    if type(x) != int or type(y) != int or type(z) != int: return False
    return x == y + z or y == x + z or z == y + x

 any_int [[2, 3, 1], [2.5, 2, 3], [1.5, 5, 3.5], [2, 6, 2], [4, 2, 2], [2.2, 2.2, 2.2], [-4, 6, 2], [2, 1, 1], [3, 4, 7], [3.0, 4, 7]] [[-1, 8, 7], [143.7, -20, -123.7], [-2, 5, 7], [-7, -3, -4], [-4, -5, -1], [1, 1, 1], [-2, -2, -4], [1.5, 2.5, 3], [0, -2, 0], [9, 10, -1], [1.234567891, 2.345678912, 3.456789123], [50, -20, -30], [-1, 1, 0], [-9223372036854775808, 0, 9223372036854775807], [0, 0, 0]] 0
HumanEval/93 
def encode(message):
    """
    Write a function that takes a message, and encodes in such a 
    way that it swaps case of all letters, replaces all vowels in 
    the message with the letter that appears 2 places ahead of that 
    vowel in the english alphabet. 
    Assume only letters. 
    
    Examples:
    >>> encode('test')
    'TGST'
    >>> encode('This is a message')
    'tHKS KS C MGSSCGG'
    """
 
    assert type(message) == str, "invalid inputs" # $_CONTRACT_$
    assert all(ch == " " or ch.isalpha() for ch in message), "invalid inputs" # $_CONTRACT_$
 

    def switch_case(ch):
        if ord("A") <= ord(ch) <= ord("Z"):
            return chr(ord(ch) + 32)
        elif ord("a") <= ord(ch) <= ord("z"):
            return chr(ord(ch) - 32)
        else:
            return ch
    
    def vowel_change(ch):
        return ch if ch not in "aeiouAEIOU" else chr(ord(ch) + 2)
    
    m = "".join(map(switch_case, message))
    return "".join(map(vowel_change, m))

 encode [['TEST'], ['Mudasir'], ['YES'], ['This is a message'], ['I DoNt KnOw WhAt tO WrItE']] [['Python is awesome'], ['abcdefghijklmnopqrstuvwxyz'], ['ZYXWVUTSRQPONMLKJIHGFEDCBA'], ['to be or notZYXWVUTSRQPabcdefghijklmnopqrstuvwxyzONMLKJIABCDEFHGFEDCBA to be'], ['Every good boy does fine']] 0
HumanEval/94 

def skjkasdkd(lst):
    """You are given a list of integers.
    You need to find the largest prime value and return the sum of its digits.

    Examples:
    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10
    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25
    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13
    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11
    For lst = [0,81,12,3,1,21] the output should be 3
    For lst = [0,8,1,2,1,7] the output should be 7
    """
 
    def is_prime(a): # $_CONTRACT_$
        return not (a < 2 or any(a % x == 0 for x in range(2, int(a ** 0.5) + 1))) # $_CONTRACT_$
    assert any(is_prime(x) for x in lst), "invalid inputs" # $_CONTRACT_$
 

    def is_prime(a):
        return not (a < 2 or any(a % x == 0 for x in range(2, int(a ** 0.5) + 1)))
    sorted_list = sorted(lst)[::-1]
    for x in sorted_list:
        if is_prime(x):
            return sum(map(lambda ch: int(ch), str(x)))

 skjkasdkd [[[0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]], [[1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]], [[1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]], [[0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]], [[0, 81, 12, 3, 1, 21]], [[0, 8, 1, 2, 1, 7]], [[8191]], [[8191, 123456, 127, 7]], [[127, 97, 8192]]] [[[1, 2, 3, 4, 5, 6, 7, 8, 9]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[10000019, 1000000007, 99990001, 123456789, 500000003, 1000000009, 999999937, 787878787, 9726631, 999999996]], [[0, 0, 0, 2, 5, 7, 11, 13, 16, 7]], [[174089236, 102746717, 596592367, 996989479, 967548947, 1053114123, 988732879, 1019094191, 820280333, 684049355]], [[0, 0, -1, 2, 5, 7, 11, 13, 17]], [[1, 1056689, 7, 31, 41, 523, 3, 1234567, 1068607, 19, 7919, 73, 23, 163, 5, 61, 829, 103, 677]], [[10000000019, 1000000007, 99990001, 123456789, 500000003, 1000000009, 999999937, 787878787, 9726631, 999999996, 987654321, 1234567891, 888888889, 999999997, 444444449, 666666671, 101, 199, 3532, 397, 593, 991, 1117, 1277, 1453, 1567, 1889, 2089, 2347, 2689, 2801, 3011, 666666671, 3121, 3251, 3463, 3533, 3559]]] 0
HumanEval/95 
def check_dict_case(dict):
    """
    Given a dictionary, return True if all keys are strings in lower 
    case or all keys are strings in upper case, else return False.
    The function should return False is the given dictionary is empty.
    Examples:
    check_dict_case({"a":"apple", "b":"banana"}) should return True.
    check_dict_case({"a":"apple", "A":"banana", "B":"banana"}) should return False.
    check_dict_case({"a":"apple", 8:"banana", "a":"apple"}) should return False.
    check_dict_case({"Name":"John", "Age":"36", "City":"Houston"}) should return False.
    check_dict_case({"STATE":"NC", "ZIP":"12345" }) should return True.
    """
 
    assert type(dict).__name__ == "dict", "invalid inputs" # $_CONTRACT_$
 
    keys = list(dict.keys())
    if keys == []: return False
    lower, upper = True, True
    for k in keys:
        if type(k) != str:
            lower = upper = False
            break
        if not k.islower(): lower = False
        if not k.isupper(): upper = False
    return lower or upper

 check_dict_case [[{'p': 'pineapple', 'b': 'banana'}], [{'p': 'pineapple', 'b': 'banana'}], [{'p': 'pineapple', 'A': 'banana', 'B': 'banana'}], [{'p': 'pineapple', 'A': 'banana', 'B': 'banana'}], [{'p': 'pineapple', '5': 'banana', 'a': 'apple'}], [{'p': 'pineapple', '5': 'banana', 'a': 'apple'}], [{'Name': 'John', 'Age': '36', 'City': 'Houston'}], [{'Name': 'John', 'Age': '36', 'City': 'Houston'}], [{'STATE': 'NC', 'ZIP': '12345'}], [{'STATE': 'NC', 'ZIP': '12345'}], [{'fruit': 'Orange', 'taste': 'Sweet'}], [{'fruit': 'Orange', 'taste': 'Sweet'}], [{}], [{}]] [[{'FIRST_NAME': 'John', 'LAST_NAME': 'DOE', 'AGE': 35, 'CITY': 'NEW YORK', 'INCOME': '$50,000'}], [{}], [{'first_name': 'John', 'last_name': 'Doe', 'age': 35, 'city': 'New York', 'income': '$50,000'}], [{'1': 'apple', '2': 'banana', '3': 'cherry'}], [{'8': 'banana'}], [{'FIRST_NAME': '2019n', 'LAST_NAME': 'OE', 'AGE': 35, 'CITY': 'NEW YORK', 'COME': '$50,0000'}], [{'PI': 1.7300435058060522, 'new yorrk': 2.2762868739904514}], [{'first_name': 'John', 'last_name': 'Doe', 'age': 35, 'city': 'New York', 'income': '$50,000', 'ageage': 'Dooe', 'new yorok': '8'}], [{'FIRST_NAME': 'John', 'LAST_NAME': 'DOE', 'AGE': 35, 'CITY': 'NK', 'INCOME': '$50,000', '1': 35}], [{'PI': 3.14159, 'IPI': 2.6443947966293897, 'Johageage': 2.9360614575298136, 'JohaJgeage': 3.14159}]] 0
HumanEval/96 
def count_up_to(n):
    """Implement a function that takes an non-negative integer and returns an array of the first n
    integers that are prime numbers and less than n.
    for example:
    count_up_to(5) => [2,3]
    count_up_to(11) => [2,3,5,7]
    count_up_to(0) => []
    count_up_to(20) => [2,3,5,7,11,13,17,19]
    count_up_to(1) => []
    count_up_to(18) => [2,3,5,7,11,13,17]
    """
 
    assert type(n) == int and n >= 0, "invalid inputs" # $_CONTRACT_$
 

    ans = []
    isprime = [True] * (n + 1)
    for i in range(2, n):
        if isprime[i]:
            ans.append(i)
            for j in range(i + i, n, i):
                isprime[j] = False
    return ans

 count_up_to [[5], [6], [7], [10], [0], [22], [1], [18], [47], [101]] [[12], [3], [499], [15702], [1], [2], [0]] 0
HumanEval/97 
def multiply(a, b):
    """Complete the function that takes two integers and returns 
    the product of their unit digits.
    Assume the input is always valid.
    Examples:
    multiply(148, 412) should return 16.
    multiply(19, 28) should return 72.
    multiply(2020, 1851) should return 0.
    multiply(14,-15) should return 20.
    """
 
    assert type(a) == type(b) == int, "invalid inputs" # $_CONTRACT_$
 
    return int(str(a)[-1]) * int(str(b)[-1])

 multiply [[148, 412], [148, 412], [19, 28], [19, 28], [2020, 1851], [2020, 1851], [14, -15], [14, -15], [76, 67], [76, 67], [17, 27], [17, 27], [0, 1], [0, 1], [0, 0], [0, 0]] [[-87, 5], [-87, -87], [-5, 9]] 0
HumanEval/98 
def count_upper(s):
    """
    Given a string s, count the number of uppercase vowels in even indices.
    
    For example:
    count_upper('aBCdEf') returns 1
    count_upper('abcdefg') returns 0
    count_upper('dBBE') returns 0
    """
 
    assert type(s) == str, "invalid inputs" # $_CONTRACT_$
 
    cnt = 0
    for i in range(0, len(s), 2):
        if s[i] in "AEIOU":
            cnt += 1
    return cnt

 count_upper [['aBCdEf'], ['abcdefg'], ['dBBE'], ['B'], ['U'], [''], ['EEEE']] [['abcDEf'], ['DbdOH'], ['zbvuyrwqpmlkjhgfedcbaZXJUTSRPONMLKI'], ['AfbCdEOhhEEAbCdEIfGhIjKlabcDEfMnOpQrStUvWxYzrrRRStUvWxCDbdOHUOIEAABCDYz'], ['A'], ['uEi'], [''], ['z']] 0
HumanEval/99 
def closest_integer(value):
    '''
    Create a function that takes a value (string) representing a number
    and returns the closest integer to it. If the number is equidistant
    from two integers, round it away from zero.

    Examples
    >>> closest_integer("10")
    10
    >>> closest_integer("15.3")
    15

    Note:
    Rounding away from zero means that if the given number is equidistant
    from two integers, the one you should return is the one that is the
    farthest from zero. For example closest_integer("14.5") should
    return 15 and closest_integer("-14.5") should return -15.
    '''
 
    try: # $_CONTRACT_$
        assert isinstance(value, str) # $_CONTRACT_$
        value = float(value) # $_CONTRACT_$
    except: # $_CONTRACT_$
        raise Exception("invalid inputs") # $_CONTRACT_$
    import math # $_CONTRACT_$
    assert not (math.isinf(value) or math.isnan(value)), "invalid inputs" # $_CONTRACT_$
 

    def rounding(val):
        if abs(val - int(val)) != 0.5:
            return round(val)
        if val > 0:
            return int(val) + 1
        else:
            return int(val) - 1
    return rounding(float(value))

 closest_integer [['10'], ['14.5'], ['-15.5'], ['15.3'], ['0']] [['5.5'], ['-2.8'], ['-6.5'], ['0.5'], ['-51.27890000000001'], ['1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'], ['11.']] 0
HumanEval/100 
def make_a_pile(n):
    """
    Given a positive integer n, you have to make a pile of n levels of stones.
    The first level has n stones.
    The number of stones in the next level is:
        - the next odd number if n is odd.
        - the next even number if n is even.
    Return the number of stones in each level in a list, where element at index
    i represents the number of stones in the level (i+1).

    Examples:
    >>> make_a_pile(3)
    [3, 5, 7]
    """
 
    assert type(n) == int and n >= 1, "invalid inputs" # $_CONTRACT_$
 

    ans, num = [], n
    for _ in range(n):
        ans.append(num)
        num += 2
    return ans

 make_a_pile [[3], [4], [5], [6], [8]] [[1], [2], [15], [1000000]] 0
HumanEval/101 
def words_string(s):
    """
    You will be given a string of words separated by commas or spaces. Your task is
    to split the string into words and return an array of the words.
    
    For example:
    words_string("Hi, my name is John") == ["Hi", "my", "name", "is", "John"]
    words_string("One, two, three, four, five, six") == ["One", "two", "three", "four", "five", "six"]
    """
 
    assert isinstance(s, str), "invalid inputs" # $_CONTRACT_$
 
    words = (s.replace(",", " ")).split()
    return [word for word in words if word != ""]

 words_string [['Hi, my name is John'], ['One, two, three, four, five, six'], ['Hi, my name'], ['One,, two, three, four, five, six,'], [''], ['ahmed     , gamal']] [['Elephant,giraffe,,lion,zebra'], ['Hi,there is,a lot,of,space   ,     ,'], ['Multi\nline\nstring\nHello,\nworld!\n']] 0
HumanEval/102 
def choose_num(x, y):
    """This function takes two positive numbers x and y and returns the
    biggest even integer number that is in the range [x, y] inclusive. If 
    there's no such number, then the function should return -1.

    For example:
    choose_num(12, 15) = 14
    choose_num(13, 12) = -1
    """
 
    assert type(x) == int and type(y) == int, "invalid inputs" # $_CONTRACT_$
    assert x > 0 and y > 0, "invalid inputs" # $_CONTRACT_$
 

    if x > y: return -1
    if x == y: return y if y % 2 == 0 else -1
    return y if y % 2 == 0 else y - 1

 choose_num [[12, 15], [13, 12], [33, 12354], [5234, 5233], [6, 29], [27, 10], [7, 7], [546, 546]] [[20, 30], [30, 30], [100, 6], [201, 201], [200, 201], [35, 101], [35, 35]] 0
HumanEval/103 
def rounded_avg(n, m):
    """You are given two positive integers n and m, and your task is to compute the
    average of the integers from n through m (including n and m). 
    Round the answer to the nearest integer and convert that to binary.
    If n is greater than m, return -1.
    Example:
    rounded_avg(1, 5) => "0b11"
    rounded_avg(7, 5) => -1
    rounded_avg(10, 20) => "0b1111"
    rounded_avg(20, 33) => "0b11010"
    """
 
    assert type(n) == int and type(m) == int, "invalid inputs" # $_CONTRACT_$
    assert n > 0 and m > 0, "invalid inputs"  # $_CONTRACT_$
 

    if n > m: return -1
    avg = round((n + m) / 2)
    return bin(avg)

 rounded_avg [[1, 5], [7, 13], [964, 977], [996, 997], [560, 851], [185, 546], [362, 496], [350, 902], [197, 233], [7, 5], [5, 1], [5, 5]] [[1, 1], [200, 30], [15, 15], [15, 100], [3000, 1000001], [15, 16]] 0
HumanEval/104 
def unique_digits(x):
    """Given a list of positive integers x. return a sorted list of all 
    elements that hasn't any even digit.

    Note: Returned list should be sorted in increasing order.
    
    For example:
    >>> unique_digits([15, 33, 1422, 1])
    [1, 15, 33]
    >>> unique_digits([152, 323, 1422, 10])
    []
    """
 
    assert type(x) == list, "invalid inputs" # $_CONTRACT_$
    assert all(type(num) == int and num > 0 for num in x), "invalid inputs" # $_CONTRACT_$
 

    def judge(x):
        for ch in str(x):
            if int(ch) % 2 == 0:
                return False
        return True
    return sorted(list(filter(judge, x)))

 unique_digits [[[15, 33, 1422, 1]], [[152, 323, 1422, 10]], [[12345, 2033, 111, 151]], [[135, 103, 31]]] [[[1357, 79, 8642, 246]], [[257, 369, 781, 409]], [[111, 333, 555, 777]], [[1111, 2222, 3333, 4444, 5555, 6666, 7777, 8888, 9999, 2223, 1010, 1111]], [[2, 6046, 4, 8, 10, 13, 16, 3, 61]]] 0
HumanEval/105 
def by_length(arr):
    """
    Given an array of integers, sort the integers that are between 1 and 9 inclusive,
    reverse the resulting array, and then replace each digit by its corresponding name from
    "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine".

    For example:
      arr = [2, 1, 1, 4, 5, 8, 2, 3]   
            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] 
            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]
      return ["Eight", "Five", "Four", "Three", "Two", "Two", "One", "One"]
    
      If the array is empty, return an empty array:
      arr = []
      return []
    
      If the array has any strange number ignore it:
      arr = [1, -1 , 55] 
            -> sort arr -> [-1, 1, 55]
            -> reverse arr -> [55, 1, -1]
      return = ['One']
    """
 
    assert type(arr) == list, "invalid inputs" # $_CONTRACT_$
    assert all(type(x) == int for x in arr), "invalid inputs"  # $_CONTRACT_$
 
    def to_word(x: int) -> str:
      if x == 1:
        return "One"
      elif x == 2:
        return "Two"
      elif x == 3:
        return "Three"
      elif x == 4:
        return "Four"
      elif x == 5:
        return "Five"
      elif x == 6:
        return "Six"
      elif x == 7:
        return "Seven"
      elif x == 8:
        return "Eight"
      else:
        return "Nine"
    sorted_list, ans = sorted(arr)[::-1], []
    for x in sorted_list:
      if 1 <= x <= 9:
        ans.append(to_word(x))
    return ans

 by_length [[[2, 1, 1, 4, 5, 8, 2, 3]], [[]], [[1, -1, 55]], [[1, -1, 3, 2]], [[9, 4, 8]]] [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[-1, 0, 5, 6, 10]], [[3, 3, 3, 3, 3, 3]], [[4, 8, 7, 6, 5, 4, 3, 1]], [[0, 10, 11, 12, 13, 14, 15, 16, -1, -5, 20, 25, 30, 100, 200, 300]], [[3, 3, 3, 3, 4, 3, 3, 3, 3]], [[0, 10, 11, 12, 13, 7, 15, 16, -1, -5, 20, 25, 30, 100, 300, 16, 0]], [[-1, -3, 1, -1, 0, -4, -5, -6, -7, -8, 1, -9, 0]], [[2, 71, 1, 64, 90, 24, 41]], [[9, 5, 2, 1, 1, 5, 6, 0, 8]], [[7]]] 0
HumanEval/106 
def f(n):
    """ Implement the function f that takes n as a parameter,
    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even
    or the sum of numbers from 1 to i otherwise.
    i starts from 1.
    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).
    Example:
    f(5) == [1, 2, 6, 24, 15]
    """
 
    assert type(n) == int, "invalid inputs" # $_CONTRACT_$
    assert n >= 0, "invalid inputs" # $_CONTRACT_$
 

    if n == 0: return []
    if n == 1: return [1]
    if n == 2: return [1, 2]

    ans = [1, 2]
    for i in range(3, n + 1):
        if i % 2 == 1:
            ans.append(ans[-2] + (i - 1) + i)
        else:
            ans.append(ans[-2] * (i - 1) * i)
    return ans

 f [[5], [7], [1], [3]] [[4], [0], [2], [1], [3], [6]] 0
HumanEval/107 
def even_odd_palindrome(n):
    """
    Given a positive integer n, return a tuple that has the number of even and odd
    integer palindromes that fall within the range(1, n), inclusive.

    Example 1:

        Input: 3
        Output: (1, 2)
        Explanation:
        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.

    Example 2:

        Input: 12
        Output: (4, 6)
        Explanation:
        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.

    Note:
        1. 1 <= n <= 10^3
        2. returned tuple has the number of even and odd integer palindromes respectively.
    """
 
    assert type(n) == int, "invalid inputs" # $_CONTRACT_$
    assert 1 <= n <= 1000, "invalid inputs" # $_CONTRACT_$
 

    odd_cnt, even_cnt = 0, 0
    for i in range(1, n + 1):
        if str(i) == str(i)[::-1]:
            if i % 2 == 1:
                odd_cnt += 1
            else:
                even_cnt += 1
    return even_cnt, odd_cnt

 even_odd_palindrome [[123], [12], [3], [63], [25], [19], [9], [1]] [[1000], [777], [8]] 0
HumanEval/108 
def count_nums(arr):
    """
    Write a function count_nums which takes an array of integers and returns
    the number of elements which has a sum of digits > 0.
    If a number is negative, then its first signed digit will be negative:
    e.g. -123 has signed digits -1, 2, and 3.
    >>> count_nums([]) == 0
    >>> count_nums([-1, 11, -11]) == 1
    >>> count_nums([1, 1, 2]) == 3
    """
 
    assert type(arr) == list, "invalid inputs" # $_CONTRACT_$
    assert all(type(x) == int for x in arr), "invalid inputs" # $_CONTRACT_$
 
    def judge(x: int) -> int:
        l = list(str(x))
        if l[0] == "-":
            l = l[1:]
            l = list(map(int, l))
            l[0] = -l[0]
        else:
            l = list(map(int, l))
        return 1 if sum(l) > 0 else 0
    return sum(map(judge, arr))

 count_nums [[[]], [[-1, -2, 0]], [[1, 1, 2, -2, 3, 4, 5]], [[1, 6, 9, -6, 0, 1, 5]], [[1, 100, 98, -7, 1, -1]], [[12, 23, 34, -45, -56, 0]], [[0, 1]], [[1]]] [[[-1, 0, 1]], [[-10, -20, -30, -40]], [[123, 456, 789, -987, -654, -321]], [[-10, -11, -12, 0, 14, -20]]] 0
HumanEval/109 
def move_one_ball(arr):
    """We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The
    numbers in the array will be randomly ordered. Your task is to determine if
    it is possible to get an array sorted in non-decreasing order by performing 
    the following operation on the given array:
        You are allowed to perform right shift operation any number of times.
    
    One right shift operation means shifting all elements of the array by one
    position in the right direction. The last element of the array will be moved to
    the starting position in the array i.e. 0th index. 

    If it is possible to obtain the sorted array by performing the above operation
    then return True else return False.
    If the given array is empty then return True.

    Note: The given list is guaranteed to have unique elements.

    For Example:
    
    move_one_ball([3, 4, 5, 1, 2])==>True
    Explanation: By performin 2 right shift operations, non-decreasing order can
                 be achieved for the given array.
    move_one_ball([3, 5, 4, 1, 2])==>False
    Explanation:It is not possible to get non-decreasing order for the given
                array by performing any number of right shift operations.
                
    """
 
    assert type(arr) == list, "invalid inputs" # $_CONTRACT_$
    assert all(type(x) == int for x in arr), "invalid inputs" # $_CONTRACT_$
    assert len(set(arr)) == len(arr), "invalid inputs" # $_CONTRACT_$
    assert all(type(x) == int for x in arr), "invalid inputs" # $_CONTRACT_$
 
    
    sorted_arr = sorted(arr)
    if arr == sorted_arr: return True
    for i in range(1, len(arr)):
        if arr[i:] + arr[:i] == sorted_arr:
            return True
    return False

 move_one_ball [[[3, 4, 5, 1, 2]], [[3, 5, 10, 1, 2]], [[4, 3, 1, 2]], [[3, 5, 4, 1, 2]], [[]]] [[[5, 6, 7, 8, 1, 2, 3, 4]], [[8, 7, 6, 5, 4, 3, 2, 1]], [[1]], [[2, 1]], [[5, 6, 8, 2, 4]], [[5, 6, 8, 7, 2, 4]], [[2, 3, 1, 4, 5]], [[9, 2, 1]], [[1, 3, 5, 7, 9, 11, 2, 4, 6, 8, 10, 12]], [[9, 2, 6]]] 0
HumanEval/110 
def exchange(lst1, lst2):
    """In this problem, you will implement a function that takes two lists of numbers,
    and determines whether it is possible to perform an exchange of elements
    between them to make lst1 a list of only even numbers.
    There is no limit on the number of exchanged elements between lst1 and lst2.
    If it is possible to exchange elements between the lst1 and lst2 to make
    all the elements of lst1 to be even, return "YES".
    Otherwise, return "NO".
    For example:
    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => "YES"
    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => "NO"
    It is assumed that the input lists will be non-empty.
    """
 
    assert type(lst1) == list and type(lst2) == list, "invalid inputs" # $_CONTRACT_$
    assert all(type(x) == int for x in lst1), "invalid inputs" # $_CONTRACT_$
    assert all(type(x) == int for x in lst2), "invalid inputs" # $_CONTRACT_$
    assert len(lst1) > 0 and len(lst2) > 0, "invalid inputs" # $_CONTRACT_$
 

    cnt_odd = len(list(filter(lambda x: x % 2 == 1, lst1)))
    cnt_even = len(list(filter(lambda x: x % 2 == 0, lst2)))
    return "YES" if cnt_odd <= cnt_even else "NO"

 exchange [[[1, 2, 3, 4], [1, 2, 3, 4]], [[1, 2, 3, 4], [1, 5, 3, 4]], [[1, 2, 3, 4], [2, 1, 4, 3]], [[5, 7, 3], [2, 6, 4]], [[5, 7, 3], [2, 6, 3]], [[3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]], [[100, 200], [200, 200]]] [[[2, 4, 6], [1, 3, 5]], [[9, 6, 1, 1, 0], [9, 6, 1, 1, 0]], [[1, 3, 5], [2, 4, 6]], [[1, 12, 1, 1, 2], [2, 2, 2, 2, 1, 2]], [[1, 2, 1, 1, 1], [2, 2, 2]], [[1, 3, 2, 7, 4, 7], [2, 4, 6, 8]], [[7, 2, 4, 6, 8, 8], [1, 3, 5, 7]], [[2, 4, 6], [1, 3, 5, 7]]] 0
HumanEval/111 
def histogram(test):
    """Given a string representing a space separated lowercase letters, return a dictionary
    of the letter with the most repetition and containing the corresponding count.
    If several letters have the same occurrence, return all of them.
    
    Example:
    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}
    histogram('a b b a') == {'a': 2, 'b': 2}
    histogram('a b c a b') == {'a': 2, 'b': 2}
    histogram('b b b b a') == {'b': 4}
    histogram('') == {}

    """
 
    assert isinstance(test, str), "invalid inputs" # $_CONTRACT_$
    words = test.split(" ") # $_CONTRACT_$
    for word in words: # $_CONTRACT_$
        if word != "": # $_CONTRACT_$
            assert len(word) == 1 and word.islower(), "invalid inputs" # $_CONTRACT_$
 

    if test == "": return {}    
    count, ans = dict(), dict()
    for word in test.split(" "):
        if word != "":
            if word not in count: count[word] = 0
            count[word] += 1
    mx = max(list(count.values()))
    for ch, c in count.items():
        if c == mx:
            ans[ch] = c
    return ans

 histogram [['a b b a'], ['a b c a b'], ['a b c d g'], ['r t g'], ['b b b b a'], ['r t g'], [''], ['a']] [['a b b  b b b'], [''], ['h i j j   k l  m m m n o o o o  p'], ['h i j j   k l  m  o o  p'], ['x y z x y z x']] 0
HumanEval/112 
def reverse_delete(s,c):
    """Task
    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    then check if the result string is palindrome.
    A string is called palindrome if it reads the same backward as forward.
    You should return a tuple containing the result string and True/False for the check.
    Example
    For s = "abcde", c = "ae", the result should be ('bcd',False)
    For s = "abcdef", c = "b"  the result should be ('acdef',False)
    For s = "abcdedcba", c = "ab", the result should be ('cdedc',True)
    """
 
    assert isinstance(s, str) and isinstance(c, str), "invalid inputs" # $_CONTRACT_$
 
    ss = "".join(filter(lambda ch: ch not in c, s))
    return ss, ss == ss[::-1]

 reverse_delete [['abcde', 'ae'], ['abcdef', 'b'], ['abcdedcba', 'ab'], ['dwik', 'w'], ['a', 'a'], ['abcdedcba', ''], ['abcdedcba', 'v'], ['vabba', 'v'], ['mamma', 'mia']] [['racecar', 'ace'], ['bc', 'ervee'], ['dveeifieacced', 'dveeified'], ['ave', 've'], ['', 've'], ['ne', ''], ['XtMIzX', 'xllmeyz'], ['level', 've'], ['radar', '']] 0
HumanEval/113 
def odd_count(lst):
    """Given a list of strings, where each string consists of only digits, return a list.
    Each element i of the output should be "the number of odd elements in the
    string i of the input." where all the i's should be replaced by the number
    of odd digits in the i'th string of the input.

    >>> odd_count(['1234567'])
    ["the number of odd elements 4n the str4ng 4 of the 4nput."]
    >>> odd_count(['3',"11111111"])
    ["the number of odd elements 1n the str1ng 1 of the 1nput.",
     "the number of odd elements 8n the str8ng 8 of the 8nput."]
    """
 
    assert type(lst) == list, "invalid inputs" # $_CONTRACT_$
    assert all(isinstance(s, str) for s in lst), "invalid inputs" # $_CONTRACT_$
    assert all(s.isdigit() for s in lst), "invalid inputs" # $_CONTRACT_$
 

    ans, template = [], "the number of odd elements in the string i of the input."
    for s in lst:
        odd_cnt = len(list(filter(lambda ch: int(ch) % 2 == 1, s)))
        ans.append(template.replace("i", str(odd_cnt)))
    return ans

 odd_count [[['1234567']], [['3', '11111111']], [['271', '137', '314']]] [[['2468']], [['13579', '2468', '357']], [['11224466558888', '55555', '1234567']], [[]]] 0
HumanEval/114 
def minSubArraySum(nums):
    """
    Given an array of integers nums, find the minimum sum of any non-empty sub-array
    of nums.
    Example
    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1
    minSubArraySum([-1, -2, -3]) == -6
    """
 
    assert type(nums) == list, "invalid inputs" # $_CONTRACT_$
    assert len(nums) > 0, "invalid inputs" # $_CONTRACT_$
 

    if all(x >= 0 for x in nums): return min(nums)
    s, ans = 0, 0
    for x in nums:
        s += x
        ans = min(ans, s)
        if s >= 0: s = 0
    return ans

 minSubArraySum [[[2, 3, 4, 1, 2, 4]], [[-1, -2, -3]], [[-1, -2, -3, 2, -10]], [[-9999999999999999]], [[0, 10, 20, 1000000]], [[-1, -2, -3, 10, -5]], [[100, -1, -2, -3, 10, -5]], [[10, 11, 13, 8, 3, 4]], [[100, -33, 32, -1, 0, -2]], [[-10]], [[7]], [[1, -1]]] [[[2, 4, -1, 3, 5, -4, 1, -2]], [[True, True, True, False, True, True]], [[-10, 5, 3, -2, 0, 4, -8]], [[-2, 1, -4, 6, -7, -4, -5, 1]], [[-3, -4]], [[1, -1, 2]], [[-6, 6, 5, 3, -2, 0, 4, -8]], [[5, -1, -2, -2, -4, 6, -1, -1]], [[3, 2, -5, 4, 1, -3, 2, -2, 5]]] 0
HumanEval/115 import math

def max_fill(grid, capacity):
    """
    You are given a rectangular grid of wells. Each row represents a single well,
    and each 1 in a row represents a single unit of water.
    Each well has a corresponding bucket that can be used to extract water from it, 
    and all buckets have the same capacity.
    Your task is to use the buckets to empty the wells.
    Output the number of times you need to lower the buckets.

    Example 1:
        Input: 
            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]
            bucket_capacity : 1
        Output: 6

    Example 2:
        Input: 
            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]
            bucket_capacity : 2
        Output: 5
    
    Example 3:
        Input: 
            grid : [[0,0,0], [0,0,0]]
            bucket_capacity : 5
        Output: 0

    Constraints:
        * all wells have the same length
        * 1 <= grid.length <= 10^2
        * 1 <= grid[:,1].length <= 10^2
        * grid[i][j] -> 0 | 1
        * 1 <= capacity <= 10
    """
 
    assert 1 <= len(grid) <= 100, "invalid inputs" # $_CONTRACT_$
    lens = list(map(len, grid)) # $_CONTRACT_$
    assert max(lens) == min(lens) and 1 <= max(lens) <= 100, "invalid inputs" # $_CONTRACT_$
    for l in grid: # $_CONTRACT_$
        for x in l: # $_CONTRACT_$
            assert x == 0 or x == 1, "invalid inputs" # $_CONTRACT_$
    assert 1 <= capacity <= 10, "invalid inputs" # $_CONTRACT_$
 

    ans = 0    
    for l in grid:
        ans += math.ceil(sum(l) / capacity)
    return ans

 max_fill [[[[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1], [[[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2], [[[0, 0, 0], [0, 0, 0]], 5], [[[1, 1, 1, 1], [1, 1, 1, 1]], 2], [[[1, 1, 1, 1], [1, 1, 1, 1]], 9]] [[[[1, 0, 0, 1], [0, 1, 1, 1], [0, 0, 0, 0], [1, 0, 1, 1]], 2], [[[0, 0, 1, 0], [0, 0, 1, 0], [1, 1, 1, 1], [0, 0, 1, 0]], 2], [[[0, 1, 1], [0, 1, 1], [1, 0, 1], [1, 1, 1], [1, 1, 1], [0, 1, 1], [1, 1, 1]], 4]] 0
HumanEval/116 
def sort_array(arr):
    """
    In this Kata, you have to sort an array of non-negative integers according to
    number of ones in their binary representation in ascending order.
    For similar number of ones, sort based on decimal value.

    It must be implemented like this:
    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]
    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]
    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]
    """
 
    assert isinstance(arr, list), "invalid inputs" # $_CONTRACT_$
    assert all(isinstance(x, int) and x >= 0 for x in arr), "invalid inputs" # $_CONTRACT_$
 
    from functools import cmp_to_key
    def cmp(x: int, y: int) -> int:
        x1 = len(list(filter(lambda ch: ch == "1", bin(x))))
        y1 = len(list(filter(lambda ch: ch == "1", bin(y))))
        if x1 != y1: return x1 - y1
        return x - y
    return sorted(arr, key=cmp_to_key(cmp))

 sort_array [[[1, 5, 2, 3, 4]], [[-2, -3, -4, -5, -6]], [[1, 0, 2, 3, 4]], [[]], [[2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]], [[3, 6, 44, 12, 32, 5]], [[2, 4, 8, 16, 32]], [[2, 4, 8, 16, 32]]] [[[3, 7, 6, 5, 4]], [[100000000, 0, 10101010, 111111111, 100000]], [[10, 8, 12, 11, 9]], [[]]] 0
HumanEval/117 
def select_words(s, n):
    """Given a string s and a natural number n, you have been tasked to implement 
    a function that returns a list of all words from string s that contain exactly 
    n consonants, in order these words appear in the string s.
    If the string s is empty then the function should return an empty list.
    Note: you may assume the input string contains only letters and spaces.
    Examples:
    select_words("Mary had a little lamb", 4) ==> ["little"]
    select_words("Mary had a little lamb", 3) ==> ["Mary", "lamb"]
    select_words("simple white space", 2) ==> []
    select_words("Hello world", 4) ==> ["world"]
    select_words("Uncle sam", 3) ==> ["Uncle"]
    """
 
    assert isinstance(s, str), "invalid inputs" # $_CONTRACT_$
    assert all(ch == " " or ch.isalpha() for ch in s), "invalid inputs" # $_CONTRACT_$
    assert type(n) == int, "invalid inputs" # $_CONTRACT_$
    assert n >= 0, "invalid inputs" # $_CONTRACT_$
 

    ans = []
    for word in s.split(" "):
        if word != "":
            c_cnt = len(list(filter(lambda ch: ch not in "aeiouAEIOU", word)))
            if c_cnt == n: ans.append(word)
    return ans

 select_words [['Mary had a little lamb', 4], ['Mary had a little lamb', 4], ['Mary had a little lamb', 3], ['Mary had a little lamb', 3], ['simple white space', 2], ['simple white space', 2], ['Hello world', 4], ['Hello world', 4], ['Uncle sam', 3], ['Uncle sam', 3], ['', 4], ['', 4], ['a b c d e f', 1], ['a b c d e f', 1]] [['the quick brown fox jumps  og', 1], ['', 1], ['Python isp a popular programminPython isp a populathis is a test string with multiplePython isp a popular program ming language words containing different numbers of consonants programming  languagePython is a popular progrmming languageg language', 0], ['ThE qUiCk BrOwN fOx JuMpS oVPython isp a popular program ming languageeR tHe LaZy DoG', 5], ['apple banana cherry', 3]] 0
HumanEval/118 
def get_closest_vowel(word):
    """You are given a word. Your task is to find the closest vowel that stands between 
    two consonants from the right side of the word (case sensitive).
    
    Vowels in the beginning and ending doesn't count. Return empty string if you didn't
    find any vowel met the above condition. 

    You may assume that the given string contains English letter only.

    Example:
    get_closest_vowel("yogurt") ==> "u"
    get_closest_vowel("FULL") ==> "U"
    get_closest_vowel("quick") ==> ""
    get_closest_vowel("ab") ==> ""
    """
 
    assert isinstance(word, str), "invalid inputs" # $_CONTRACT_$
    assert word == "" or word.isalpha(), "invalid inputs" # $_CONTRACT_$
 

    def is_vowel(ch: str) -> bool:
        return ch in "aeiouAEIOU"
    for i in range(len(word) - 2, 0, -1):
        if is_vowel(word[i]) and not is_vowel(word[i-1]) and not is_vowel(word[i+1]):
            return word[i]
    return ""

 get_closest_vowel [['yogurt'], ['full'], ['easy'], ['eAsy'], ['ali'], ['bad'], ['most'], ['ab'], ['ba'], ['quick'], ['anime'], ['Asia'], ['Above']] [['hello'], ['try'], ['bbkrtiyyiuykooxnne'], ['cup'], ['aabuum'], ['dSJxyzazbcDEFyiXDCfwPU'], ['zbcdafghijklmnoprstuvwxeyzzouzzza'], ['himute'], ['zbDEF']] 0
HumanEval/119 
def match_parens(lst):
    '''
    You are given a list of two strings, both strings consist of open
    parentheses '(' or close parentheses ')' only.
    Your job is to check if it is possible to concatenate the two strings in
    some order, that the resulting string will be good.
    A string S is considered to be good if and only if all parentheses in S
    are balanced. For example: the string '(())()' is good, while the string
    '())' is not.
    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.

    Examples:
    match_parens(['()(', ')']) == 'Yes'
    match_parens([')', ')']) == 'No'
    '''
 
    assert type(lst) == list, "invalid inputs" # $_CONTRACT_$
    assert all(isinstance(s, str) for s in lst), "invalid inputs" # $_CONTRACT_$
    assert len(lst) == 2, "invalid inputs" # $_CONTRACT_$
    assert all(ch == "(" or ch == ")" for ch in lst[0]), "invalid inputs" # $_CONTRACT_$
    assert all(ch == "(" or ch == ")" for ch in lst[1]), "invalid inputs" # $_CONTRACT_$
 

    def valid_parens(s: str) -> bool:
        cnt = 0
        for ch in s:
            cnt = cnt + 1 if ch == "(" else cnt - 1
            if cnt < 0: return False
        return cnt == 0
    return "Yes" if valid_parens(lst[0] + lst[1]) or valid_parens(lst[1] + lst[0]) else "No"

 match_parens [[['()(', ')']], [[')', ')']], [['(()(())', '())())']], [[')())', '(()()(']], [['(())))', '(()())((']], [['()', '())']], [['(()(', '()))()']], [['((((', '((())']], [[')(()', '(()(']], [[')(', ')(']], [['(', ')']], [[')', '(']]] [[['(', '()())(']], [['))', '))']], [[')()()()(()()))', '((']], [['())(', '()']], [['())))(', '((']], [[')()()()(()()))', '(']]] 0
HumanEval/120 
def maximum(arr, k):
    """
    Given an array arr of integers and a positive integer k, return a sorted list 
    of length k with the maximum k numbers in arr.

    Example 1:

        Input: arr = [-3, -4, 5], k = 3
        Output: [-4, -3, 5]

    Example 2:

        Input: arr = [4, -4, 4], k = 2
        Output: [4, 4]

    Example 3:

        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1
        Output: [2]

    Note:
        1. The length of the array will be in the range of [1, 1000].
        2. The elements in the array will be in the range of [-1000, 1000].
        3. 0 <= k <= len(arr)
    """
 
    assert type(arr) == list, "invalid inputs" # $_CONTRACT_$
    assert 1 <= len(arr) <= 1000, "invalid inputs" # $_CONTRACT_$
    assert all(-1000 <= x <= 1000 for x in arr), "invalid inputs" # $_CONTRACT_$
    assert type(k) == int, "invalid inputs" # $_CONTRACT_$
    assert 0 <= k <= len(arr), "invalid inputs" # $_CONTRACT_$
 

    return sorted(sorted(arr)[::-1][:k])

 maximum [[[-3, -4, 5], 3], [[4, -4, 4], 2], [[-3, 2, 1, 2, -1, -2, 1], 1], [[123, -123, 20, 0, 1, 2, -3], 3], [[-123, 20, 0, 1, 2, -3], 4], [[5, 15, 0, 3, -13, -8, 0], 7], [[-1, 0, 2, 5, 3, -10], 2], [[1, 0, 5, -7], 1], [[4, -4], 2], [[-10, 10], 2], [[1, 2, 3, -23, 243, -400, 0], 0]] [[[1, 2, 3, 4, 5], 3], [[-2, 5, 4, 10, 3, 8, 3], 3], [[1], 0], [[1000, -1000], 2], [[5, 2, 1], 1]] 0
HumanEval/121 
def solution(lst):
    """Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.
    

    Examples
    solution([5, 8, 7, 1]) ==> 12
    solution([3, 3, 3, 3, 3]) ==> 9
    solution([30, 13, 24, 321]) ==>0
    """
 
    assert type(lst) == list, "invalid inputs" # $_CONTRACT_$
    assert all(type(x) == int for x in lst), "invalid inputs" # $_CONTRACT_$
    assert len(lst) > 0, "invalid inputs" # $_CONTRACT_$
 

    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 == 1)

 solution [[[5, 8, 7, 1]], [[3, 3, 3, 3, 3]], [[30, 13, 24, 321]], [[5, 9]], [[2, 4, 8]], [[30, 13, 23, 32]], [[3, 13, 2, 9]]] [[[1, 2, 3, 4, 5, 6]], [[1, 3, 5, 7]], [[3, 3, 3, 4, 4, 6, 9, 3, 12, 8, 11, 10, 8, 9, 11]], [[7]]] 0
HumanEval/122 
def add_elements(arr, k):
    """
    Given a non-empty array of integers arr and an integer k, return
    the sum of the elements with at most two digits from the first k elements of arr.

    Example:

        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4
        Output: 24 # sum of 21 + 3

    Constraints:
        1. 1 <= len(arr) <= 100
        2. 1 <= k <= len(arr)
    """
 
    assert type(arr) == list, "invalid inputs" # $_CONTRACT_$
    assert all(type(x) == int for x in arr), "invalid inputs" # $_CONTRACT_$
    assert 1 <= len(arr) <= 100, "invalid inputs" # $_CONTRACT_$
    assert type(k) == int, "invalid inputs" # $_CONTRACT_$
    assert 1 <= k <= len(arr), "invalid inputs" # $_CONTRACT_$
 

    def digits(x: int) -> int:
        s = str(x)
        return len(s) - 1 if s[0] == "-" else len(s)
    return sum(filter(lambda x: digits(x) <= 2, arr[:k]))

 add_elements [[[1, -2, -3, 41, 57, 76, 87, 88, 99], 3], [[111, 121, 3, 4000, 5, 6], 2], [[11, 21, 3, 90, 5, 6, 7, 8, 9], 4], [[111, 21, 3, 4000, 5, 6, 7, 8, 9], 4], [[1], 1]] [[[98, 87, 76, 65, 54, 43, 32, 21, 10], 5], [[-100, -89, -77, -55, 900, -44, -22, -11], 7], [[9, 10, 11, 100, 200, 300], 5]] 0
HumanEval/123 
def get_odd_collatz(n):
    """
    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.

    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined
    as follows: start with any positive integer n. Then each term is obtained from the 
    previous term as follows: if the previous term is even, the next term is one half of 
    the previous term. If the previous term is odd, the next term is 3 times the previous
    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.

    Note: 
        1. Collatz(1) is [1].
        2. returned list sorted in increasing order.

    For example:
    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.
    """
 
    assert type(n) == int, "invalid inputs" # $_CONTRACT_$
    assert n > 0, "invalid inputs" # $_CONTRACT_$
 

    ans, x = [], n
    while x != 1:
        if x % 2 == 1: ans.append(x)
        x = x // 2 if x % 2 == 0 else x * 3 + 1
    ans.append(1)
    return sorted(ans)

 get_odd_collatz [[14], [5], [12], [1]] [[2], [3], [9999999999999999999999999999999999], [1], [7], [9999999999999999999999999999999998]] 0
HumanEval/124 
def valid_date(date):
    """You have to write a function which validates a given date string and
    returns True if the date is valid otherwise False.
    The date is valid if all of the following rules are satisfied:
    1. The date string is not empty.
    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    3. The months should not be less than 1 or higher than 12.
    4. The date should be in the format: mm-dd-yyyy

    for example: 
    valid_date('03-11-2000') => True

    valid_date('15-01-2012') => False

    valid_date('04-0-2040') => False

    valid_date('06-04-2020') => True

    valid_date('06/04/2020') => False
    """
 
    assert isinstance(date, str), "invalid inputs" # $_CONTRACT_$
 
    days = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
    if len(date) != 10: return False
    if date[2] != "-" or date[5] != "-": return False
    m, d, y = date[:2], date[3:5], date[6:]
    if not m.isdigit() or not d.isdigit() or not y.isdigit(): return False
    m, d = int(m), int(d)
    if not 1 <= m <= 12: return False
    if not 1 <= d <= days[m-1]: return False
    return True

 valid_date [['03-11-2000'], ['15-01-2012'], ['04-0-2040'], ['06-04-2020'], ['01-01-2007'], ['03-32-2011'], [''], ['04-31-3000'], ['06-06-2005'], ['21-31-2000'], ['04-12-2003'], ['04122003'], ['20030412'], ['2003-04'], ['2003-04-12'], ['04-2003']] [['12-31-1999'], ['04-31-2022'], ['00-01-2000'], ['06-04-202'], ['02-230-200'], ['04-02-2-20'], ['11-31-2023'], ['01-2000210'], ['13-01-2000'], ['01-32-2000'], ['02-30-2000'], ['02-29-20921'], ['02-29-2021'], ['2-29-2001'], ['02-30-2020'], ['06-04-2020\n'], ['-04-310222'], ['044-2022'], ['010-001-20']] 0
HumanEval/125 
def split_words(txt):
    '''
    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you
    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    Examples
    split_words("Hello world!") ➞ ["Hello", "world!"]
    split_words("Hello,world!") ➞ ["Hello", "world!"]
    split_words("abcdef") == 3 
    '''
 
    assert type(txt) == str, "invalid inputs" # $_CONTRACT_$
    assert not txt.startswith(" ") and not txt.startswith(",") and not txt.endswith(" ") and not txt.endswith(","), "invalid inputs" # $_CONTRACT_$
 
    whitespace = tuple(' \n\r\t')
    if any([x in txt for x in whitespace]): return txt.split()
    if "," in txt: return txt.split(",")
    cnt = 0
    for ch in txt:
        if ch.islower() and (ord(ch) - ord("a")) % 2 == 1: cnt += 1
    return cnt

 split_words [['Hello world!'], ['Hello,world!'], ['Hello world,!'], ['Hello,Hello,world !'], ['abcdef'], ['aaabb'], ['aaaBb'], ['']] [['Hello?'], ['abc deg'], ['aaa,bbb'], ['wOWbbX'], ['ababc123']] 0
HumanEval/126 
def is_sorted(lst):
    '''
    Given a list of numbers, return whether or not they are sorted
    in ascending order. If list has more than 1 duplicate of the same
    number, return False. Assume no negative numbers and only integers.

    Examples
    is_sorted([5]) ➞ True
    is_sorted([1, 2, 3, 4, 5]) ➞ True
    is_sorted([1, 3, 2, 4, 5]) ➞ False
    is_sorted([1, 2, 3, 4, 5, 6]) ➞ True
    is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ True
    is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ False
    is_sorted([1, 2, 2, 3, 3, 4]) ➞ True
    is_sorted([1, 2, 2, 2, 3, 4]) ➞ False
    '''
 
    assert type(lst) == list, "invalid inputs" # $_CONTRACT_$
    assert all(type(x) == int and x >= 0 for x in lst), "invalid inputs" # $_CONTRACT_$
 

    count = dict()
    for x in lst:
        if x not in count: count[x] = 0
        count[x] += 1
        if count[x] > 2: return False
    return lst == sorted(lst)

 is_sorted [[[5]], [[1, 2, 3, 4, 5]], [[1, 3, 2, 4, 5]], [[1, 2, 3, 4, 5, 6]], [[1, 2, 3, 4, 5, 6, 7]], [[1, 3, 2, 4, 5, 6, 7]], [[]], [[1]], [[3, 2, 1]], [[1, 2, 2, 2, 3, 4]], [[1, 2, 3, 3, 3, 4]], [[1, 2, 2, 3, 3, 4]], [[1, 2, 3, 4]]] [[[1, 2, 3, 4, 5, 6, 7, 8]], [[1, 2, 2, 2, 2, 3, 4]], [[1, 1, 2, 2, 3, 3, 4]], [[1, 1, 2, 2, 2, 3, 4]], [[1, 1, 1, 1]], [[1, 1, 2, 3, 4, 4]], [[1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2]]] 0
HumanEval/127 
def intersection(interval1, interval2):
    """You are given two intervals,
    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).
    The given intervals are closed which means that the interval (start, end)
    includes both start and end.
    For each given interval, it is assumed that its start is less or equal its end.
    Your task is to determine whether the length of intersection of these two 
    intervals is a prime number.
    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)
    which its length is 1, which not a prime number.
    If the length of the intersection is a prime number, return "YES",
    otherwise, return "NO".
    If the two intervals don't intersect, return "NO".


    [input/output] samples:
    intersection((1, 2), (2, 3)) ==> "NO"
    intersection((-1, 1), (0, 4)) ==> "NO"
    intersection((-3, -1), (-5, 5)) ==> "YES"
    """
 
    assert len(interval1) == 2 and interval1[0] <= interval1[1], "invalid inputs" # $_CONTRACT_$
    assert all(type(x) == int for x in interval1), "invalid inputs" # $_CONTRACT_$
    assert len(interval2) == 2 and interval2[0] <= interval2[1], "invalid inputs" # $_CONTRACT_$
    assert all(type(x) == int for x in interval2), "invalid inputs" # $_CONTRACT_$
 

    def is_prime(a):
        return not (a < 2 or any(a % x == 0 for x in range(2, int(a ** 0.5) + 1)))
    if interval1[0] > interval2[0]: interval1, interval2 = interval2, interval1
    l, r = interval2[0], min(interval1[1], interval2[1])
    return "YES" if is_prime(r - l) else "NO"

 intersection [[[1, 2], [2, 3]], [[-1, 1], [0, 4]], [[-3, -1], [-5, 5]], [[-2, 2], [-4, 0]], [[-11, 2], [-1, -1]], [[1, 2], [3, 5]], [[1, 2], [1, 2]], [[-2, -2], [-3, -2]]] [[[10, 20], [15, 25]], [[5, 10], [1, 7]], [[-6, -2], [-6, -2]], [[0, 100000007], [0, 100000007]], [[0, 1], [0, 1]], [[-10, 1], [-10, 1]], [[-15, 20], [-15, 20]], [[-9, 1000000001], [-999999999, 1000000000]], [[11, 11], [11, 11]]] 0
HumanEval/128 
def prod_signs(arr):
    """
    You are given an array arr of integers and you need to return
    sum of magnitudes of integers multiplied by product of all signs
    of each number in the array, represented by 1, -1 or 0.
    Note: return None for empty arr.

    Example:
    >>> prod_signs([1, 2, 2, -4]) == -9
    >>> prod_signs([0, 1]) == 0
    >>> prod_signs([]) == None
    """
 
    assert type(arr) == list, "invalid inputs" # $_CONTRACT_$
    assert all(type(x) == int for x in arr), "invalid inputs" # $_CONTRACT_$
 
    if arr == []: return None
    if 0 in arr: return 0
    s, sgn = 0, 1
    for x in arr:
        s += abs(x)
        sgn *= (x // abs(x))
    return s * sgn

 prod_signs [[[1, 2, 2, -4]], [[0, 1]], [[1, 1, 1, 2, 3, -1, 1]], [[]], [[2, 4, 1, 2, -1, -1, 9]], [[-1, 1, -1, 1]], [[-1, 1, 1, 1]], [[-1, 1, 1, 0]]] [[[-1, -2, -2, -4]], [[0, 0, 0, 0]], [[]], [[-1, 1, 2, -1]], [[100, 10, 1, -1, -10, -100, 10]], [[-1, 0, 1, 2]]] 0
HumanEval/129 
def minPath(grid, k):
    """
    Given a grid with N rows and N columns (N >= 2) and a positive integer k, 
    each cell of the grid contains a value. Every integer in the range [1, N * N]
    inclusive appears exactly once on the cells of the grid.

    You have to find the minimum path of length k in the grid. You can start
    from any cell, and in each step you can move to any of the neighbor cells,
    in other words, you can go to cells which share an edge with you current
    cell.
    Please note that a path of length k means visiting exactly k cells (not
    necessarily distinct).
    You CANNOT go off the grid.
    A path A (of length k) is considered less than a path B (of length k) if
    after making the ordered lists of the values on the cells that A and B go
    through (let's call them lst_A and lst_B), lst_A is lexicographically less
    than lst_B, in other words, there exist an integer index i (1 <= i <= k)
    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have
    lst_A[j] = lst_B[j].
    It is guaranteed that the answer is unique.
    Return an ordered list of the values on the cells that the minimum path go through.

    Examples:

        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3
        Output: [1, 2, 1]

        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1
        Output: [1]
    """
 
    assert type(k) == int, "invalid inputs" # $_CONTRACT_$
    assert k > 0, "invalid inputs" # $_CONTRACT_$
    assert len(grid) >= 2, "invalid inputs" # $_CONTRACT_$
    assert all(len(l) == len(grid) for l in grid), "invalid inputs" # $_CONTRACT_$
    assert {x for l in grid for x in l} == set(range(1, len(grid) ** 2 + 1)), "invalid inputs" # $_CONTRACT_$
 

    N = len(grid)
    x, y = 0, 0
    for i in range(N):
        for j in range(N):
            if grid[i][j] == 1:
                x, y = i, j
    mn = N * N
    if x > 0: mn = min(mn, grid[x - 1][y])
    if x < N - 1: mn = min(mn, grid[x + 1][y])
    if y > 0: mn = min(mn, grid[x][y - 1])
    if y < N - 1: mn = min(mn, grid[x][y + 1])
    return [1 if i % 2 == 0 else mn for i in range(k)]

 minPath [[[[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3], [[[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1], [[[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4], [[[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7], [[[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5], [[[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9], [[[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12], [[[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8], [[[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8], [[[1, 2], [3, 4]], 10]] [[[[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1], [[[9, 8, 7], [6, 5, 4], [3, 2, 1]], 3], [[[5, 4, 7], [2, 1, 8], [3, 6, 9]], 4], [[[1, 2], [3, 4]], 2], [[[2, 3, 4], [5, 6, 7], [8, 9, 1]], 5], [[[1, 2, 3], [4, 5, 6], [7, 8, 9]], 9]] 0
HumanEval/130 
def tri(n):
    """Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in 
    the last couple centuries. However, what people don't know is Tribonacci sequence.
    Tribonacci sequence is defined by the recurrence:
    tri(1) = 3
    tri(n) = 1 + n / 2, if n is even.
    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.
    For example:
    tri(2) = 1 + (2 / 2) = 2
    tri(4) = 3
    tri(3) = tri(2) + tri(1) + tri(4)
           = 2 + 3 + 3 = 8 
    You are given a non-negative integer number n, you have to a return a list of the 
    first n + 1 numbers of the Tribonacci sequence.
    Examples:
    tri(3) = [1, 3, 2, 8]
    """
 
    assert type(n) == int, "invalid inputs" # $_CONTRACT_$
    assert n >= 0, "invalid inputs" # $_CONTRACT_$
 

    if n == 0: return [1]
    if n == 1: return [1, 3]
    ans = [1, 3]
    for i in range(2, n + 1):
        if i % 2 == 0:
            ans.append(1 + i / 2)
        else:
            ans.append(ans[-1] + ans[-2] + 1 + (i + 1) / 2)
    return ans

 tri [[3], [4], [5], [6], [7], [8], [9], [20], [0], [1]] [[10], [2], [1], [0], [1000001]] 0
HumanEval/131 
def digits(n):
    """Given a positive integer n, return the product of the odd digits.
    Return 0 if all digits are even.
    For example:
    digits(1)  == 1
    digits(4)  == 0
    digits(235) == 15
    """
 
    assert type(n) == int, "invalid inputs" # $_CONTRACT_$
    assert n > 0, "invalid inputs" # $_CONTRACT_$
 

    has_odd, prod = False, 1
    for ch in str(n):
        if int(ch) % 2 == 1:
            has_odd = True
            prod *= int(ch)
    return 0 if not has_odd else prod

 digits [[5], [54], [120], [5014], [98765], [5576543], [2468]] [[182135], [246], [951], [952], [241]] 0
HumanEval/132 
def is_nested(string):
    '''
    Create a function that takes a string as input which contains only square brackets.
    The function should return True if and only if there is a valid subsequence of brackets 
    where at least one bracket in the subsequence is nested.

    is_nested('[[]]') ➞ True
    is_nested('[]]]]]]][[[[[]') ➞ False
    is_nested('[][]') ➞ False
    is_nested('[]') ➞ False
    is_nested('[[][]]') ➞ True
    is_nested('[[]][[') ➞ True
    '''
 
    assert isinstance(string, str), "invalid inputs" # $_CONTRACT_$
    assert all(ch == "[" or ch == "]" for ch in string), "invalid inputs" # $_CONTRACT_$
 

    for i in range(len(string)):
        if string[i] == "]": continue
        cnt, max_nest = 0, 0
        for j in range(i, len(string)):
            if string[j] == "[":
                cnt += 1
            else:
                cnt -= 1
            max_nest = max(max_nest, cnt)
            if cnt == 0:
                if max_nest >= 2:
                    return True
                break
    return False

 is_nested [['[[]]'], ['[]]]]]]][[[[[]'], ['[][]'], ['[]'], ['[[[[]]]]'], ['[]]]]]]]]]]'], ['[][][[]]'], ['[[]'], ['[]]'], ['[[]][['], ['[[][]]'], [''], ['[[[[[[[['], [']]]]]]]]']] [['[]][[]'], ['[[]][]'], ['][[['], ['[][][][[][]][]'], [']]'], ['][]]][[]][]'], ['][][][][]][[][]'], ['[[[[][]][[[[[][]]'], ['][]][]']] 0
HumanEval/133 

def sum_squares(lst):
    """You are given a list of numbers.
    You need to return the sum of squared numbers in the given list,
    round each element in the list to the upper int(Ceiling) first.
    Examples:
    For lst = [1,2,3] the output should be 14
    For lst = [1,4,9] the output should be 98
    For lst = [1,3,5,7] the output should be 84
    For lst = [1.4,4.2,0] the output should be 29
    For lst = [-2.4,1,1] the output should be 6
    

    """
 
    assert type(lst) == list, "invalid inputs" # $_CONTRACT_$
    assert all(type(x) in [int, float] for x in lst), "invalid inputs" # $_CONTRACT_$
 
    import math
    return sum(map(lambda x: math.ceil(x) ** 2, lst))

 sum_squares [[[1, 2, 3]], [[1.0, 2, 3]], [[1, 3, 5, 7]], [[1.4, 4.2, 0]], [[-2.4, 1, 1]], [[100, 1, 15, 2]], [[10000, 10000]], [[-1.4, 4.6, 6.3]], [[-1.4, 17.9, 18.9, 19.9]], [[0]], [[-1]], [[-1, 1, 0]]] [[[-3, 4, 5, 6, 7]], [[0, 3.3, 7.7, -2.2]], [[1, 2, 3.4, -4.6, 5.1, 6]]] 0
HumanEval/134 
def check_if_last_char_is_a_letter(txt):
    '''
    Create a function that returns True if the last character
    of a given string is an alphabetical character and is not
    a part of a word, and False otherwise.
    Note: "word" is a group of characters separated by space.

    Examples:
    check_if_last_char_is_a_letter("apple pie") ➞ False
    check_if_last_char_is_a_letter("apple pi e") ➞ True
    check_if_last_char_is_a_letter("apple pi e ") ➞ False
    check_if_last_char_is_a_letter("") ➞ False 
    '''
 
    assert type(txt) == str, "invalid inputs" # $_CONTRACT_$
 
    if len(txt) == 0: return False
    if len(txt) == 1: return txt.isalpha()
    return txt[-1].isalpha() and txt[-2] == " "

 check_if_last_char_is_a_letter [['apple'], ['apple pi e'], ['eeeee'], ['A'], ['Pumpkin pie '], ['Pumpkin pie 1'], [''], ['eeeee e '], ['apple pie'], ['apple pi e ']] [['Pumpkin pi e'], ['!'], [''], ['pi'], ['aaaaa 1'], ['ap'], ['t'], ['aaaaaa A'], ['applApple $%appple pitie!^pieefavoritequickapple pifoox\ne'], ['pUMPcake?blueberrymufufinc!KPIEPulmpkin pi e'], ['k ']] 0
HumanEval/135 
def can_arrange(arr):
    """Create a function which returns the largest index of an element which
    is not greater than or equal to the element immediately preceding it. If
    no such element exists then return -1. The given array will not contain
    duplicate values.

    Examples:
    can_arrange([1,2,4,3,5]) = 3
    can_arrange([1,2,3]) = -1
    """
 
    assert type(arr) == list, "invalid inputs" # $_CONTRACT_$
    assert all(type(x) in [int, float] for x in arr), "invalid inputs" # $_CONTRACT_$
    assert len(arr) == len(set(arr)), "invalid inputs" # $_CONTRACT_$
 

    for i in range(len(arr) - 1, 0, -1):
        if not (arr[i] >= arr[i - 1]):
            return i
    return -1

 can_arrange [[[1, 2, 4, 3, 5]], [[1, 2, 4, 5]], [[1, 4, 2, 5, 6, 7, 8, 9, 10]], [[4, 8, 5, 7, 3]], [[]]] [[[1, 2, 3, 4, 5]], [[1, 3, 2, 4]], [[6, 0, 1, 2, 3]], [[1]], [[1, 3, 5, 4, 6, 7, 9, 8]], [[3, 6, 9, 12, 0, -1, 21, 19, 16, 13, 10, 7, 4, 1, 2, 5, 8, 11, 14, 17, 20]], [[-1, 0, 1, 2, 3]], [[]]] 0
HumanEval/136 
def largest_smallest_integers(lst):
    '''
    Create a function that returns a tuple (a, b), where 'a' is
    the largest of negative integers, and 'b' is the smallest
    of positive integers in a list.
    If there is no negative or positive integers, return them as None.

    Examples:
    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)
    largest_smallest_integers([]) == (None, None)
    largest_smallest_integers([0]) == (None, None)
    '''
 
    assert type(lst) == list, "invalid inputs" # $_CONTRACT_$
    assert all(type(x) == int for x in lst), "invalid inputs" # $_CONTRACT_$
 
    neg = list(filter(lambda x: x < 0, lst))
    pos = list(filter(lambda x: x > 0, lst))
    return None if neg == [] else max(neg), None if pos == [] else min(pos)

 largest_smallest_integers [[[2, 4, 1, 3, 5, 7]], [[2, 4, 1, 3, 5, 7, 0]], [[1, 3, 2, 4, 5, 6, -2]], [[4, 5, 3, 6, 2, 7, -7]], [[7, 3, 8, 4, 9, 2, 5, -9]], [[]], [[0]], [[-1, -3, -5, -6]], [[-1, -3, -5, -6, 0]], [[-6, -4, -4, -3, 1]], [[-6, -4, -4, -3, -100, 1]]] [[[9, -4, -6, 5, 0, -2]], [[0, 0, 0, 0, 1, -1]], [[-2, -4, -6, 0, -4, -10, 0, -1, -10, -10, 0]], [[0, 0, 0]], [[1, 2, 3, 4, 5]], [[-10]]] 0
HumanEval/137 
def compare_one(a, b):
    """
    Create a function that takes integers, floats, or strings representing
    real numbers, and returns the larger variable in its given variable type.
    Return None if the values are equal.
    Note: If a real number is represented as a string, the floating point might be . or ,

    compare_one(1, 2.5) ➞ 2.5
    compare_one(1, "2,3") ➞ "2,3"
    compare_one("5,1", "6") ➞ "6"
    compare_one("1", 1) ➞ None
    """
 
    assert isinstance(a, (int, float, str)), "invalid inputs" # $_CONTRACT_$
    assert isinstance(b, (int, float, str)), "invalid inputs" # $_CONTRACT_$
    try: # $_CONTRACT_$
        float(str(a).replace(",", ".")) # $_CONTRACT_$
        float(str(b).replace(",", ".")) # $_CONTRACT_$
    except ValueError: raise Exception("invalid inputs") # $_CONTRACT_$
 

    num_a = float(str(a).replace(",", "."))
    num_b = float(str(b).replace(",", "."))
    if num_a == num_b:
        return None
    return a if num_a > num_b else b

 compare_one [[1, 2], [1, 2.5], [2, 3], [5, 6], [1, '2,3'], ['5,1', '6'], ['1', '2'], ['1', 1]] [[3, 3], [-2.5, 2.5], ['5,000', '5,000'], [1, '1,45'], [10, '10.0'], ['33', '4,45']] 0
HumanEval/138 
def is_equal_to_sum_even(n):
    """Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers
    Example
    is_equal_to_sum_even(4) == False
    is_equal_to_sum_even(6) == False
    is_equal_to_sum_even(8) == True
    """
 
    assert type(n) == int, "invalid inputs" # $_CONTRACT_$
 
    return n >= 8 and n % 2 == 0

 is_equal_to_sum_even [[4], [6], [8], [10], [11], [12], [13], [16]] [[8], [21], [50], [6], [105], [22], [0], [10], [102], [-2]] 0
HumanEval/139 
def special_factorial(n):
    """The Brazilian factorial is defined as:
    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    where n > 0

    For example:
    >>> special_factorial(4)
    288

    The function will receive an integer as input and should return the special
    factorial of this integer.
    """
 
    assert type(n) == int, "invalid inputs" # $_CONTRACT_$
    assert n > 0, "invalid inputs" # $_CONTRACT_$
 

    fac, ans = 1, 1
    for i in range(2, n + 1):
        fac *= i
        ans *= fac
    return ans

 special_factorial [[4], [5], [7], [1]] [[2], [3], [6], [500]] 0
HumanEval/140 
def fix_spaces(text):
    """
    Given a string text, replace all spaces in it with underscores, 
    and if a string has more than 2 consecutive spaces, 
    then replace all consecutive spaces with - 
    
    fix_spaces("Example") == "Example"
    fix_spaces("Example 1") == "Example_1"
    fix_spaces(" Example 2") == "_Example_2"
    fix_spaces(" Example   3") == "_Example-3"
    """
 
    assert isinstance(text, str), "invalid inputs" # $_CONTRACT_$
 
    ans = text
    for i in range(len(text), 2, -1):
        ans = ans.replace(" " * i, "-")
    return ans.replace(" ", "_")

 fix_spaces [['Example'], ['Mudasir Hanif '], ['Yellow Yellow  Dirty  Fellow'], ['Exa   mple'], ['   Exa 1 2 2 mple']] [['Hello,   world!'], ['    '], ['Thish isThis is  a Hello r  World tsTesting     1  2   3 a  This is  a ssttesst'], ['Testing     1  2   3'], ['          ']] 0
HumanEval/141 
def file_name_check(file_name):
    """Create a function which takes a string representing a file's name, and returns
    'Yes' if the the file's name is valid, and returns 'No' otherwise.
    A file's name is considered to be valid if and only if all the following conditions 
    are met:
    - There should not be more than three digits ('0'-'9') in the file's name.
    - The file's name contains exactly one dot '.'
    - The substring before the dot should not be empty, and it starts with a letter from 
    the latin alphapet ('a'-'z' and 'A'-'Z').
    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']
    Examples:
    file_name_check("example.txt") # => 'Yes'
    file_name_check("1example.dll") # => 'No' (the name should start with a latin alphapet letter)
    """
 
    assert isinstance(file_name, str), "invalid inputs" # $_CONTRACT_$
 
    if len(list(filter(lambda ch: ch.isdigit(), file_name))) > 3:
        return "No"
    f_list = file_name.split(".")
    if len(f_list) != 2: return "No"
    if len(f_list[0]) == 0: return "No"
    if not f_list[0][0].isalpha(): return "No"
    if f_list[1] not in ["txt", "exe", "dll"]: return "No"
    return "Yes"

 file_name_check [['example.txt'], ['1example.dll'], ['s1sdf3.asd'], ['K.dll'], ['MY16FILE3.exe'], ['His12FILE94.exe'], ['_Y.txt'], ['?aREYA.exe'], ['/this_is_valid.dll'], ['this_is_valid.wow'], ['this_is_valid.txt'], ['this_is_valid.txtexe'], ['#this2_i4s_5valid.ten'], ['@this1_is6_valid.exe'], ['this_is_12valid.6exe4.txt'], ['all.exe.txt'], ['I563_No.exe'], ['Is3youfault.txt'], ['no_one#knows.dll'], ['1I563_Yes3.exe'], ['I563_Yes3.txtt'], ['final..txt'], ['final132'], ['_f4indsartal132.'], ['.txt'], ['s.']] [['example.py'], ['hello world.exe'], ['alice.123.txt'], ['1script.bat'], ['.exe'], ['.exalice.12123.txt3.xtxte'], ['abc123def.exe'], ['1.txt'], ['therearemorethan3digits1234567890inthisname.exe'], ['validfile.txt'], ['heello world.exe'], ['éxample.exe'], ['hello world.exe.exmy.docx.exe'], [''], ['example.TXt']] 0
HumanEval/142 


def sum_squares(lst):
    """"
    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a 
    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not 
    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. 
    
    Examples:
    For lst = [1,2,3] the output should be 6
    For lst = []  the output should be 0
    For lst = [-1,-5,2,-1,-5]  the output should be -126
    """
 
    assert type(lst) == list, "invalid inputs" # $_CONTRACT_$
    assert all(type(x) == int for x in lst), "invalid inputs" # $_CONTRACT_$
 
    ans = 0
    for i, num in enumerate(lst):
        if i % 3 == 0:
            ans += num ** 2
        elif i % 4 == 0:
            ans += num ** 3
        else:
            ans += num
    return ans

 sum_squares [[[1, 2, 3]], [[1, 4, 9]], [[]], [[1, 1, 1, 1, 1, 1, 1, 1, 1]], [[-1, -1, -1, -1, -1, -1, -1, -1, -1]], [[0]], [[-1, -5, 2, -1, -5]], [[-56, -99, 1, 0, -2]], [[-1, 0, 0, 0, 0, 0, 0, 0, -1]], [[-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]], [[-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]]] [[[2, 4, 6, 8, 10, 12]], [[2]], [[-2, 5, -6, 7, -8]], [[1, -2, 3, -4, 5, -6, -9, 7, -8, 9, 7, -8, -6]]] 0
HumanEval/143 
def words_in_sentence(sentence):
    """
    You are given a string representing a sentence,
    the sentence contains some words separated by a space,
    and you have to return a string that contains the words from the original sentence,
    whose lengths are prime numbers,
    the order of the words in the new string should be the same as the original one.

    Example 1:
        Input: sentence = "This is a test"
        Output: "is"

    Example 2:
        Input: sentence = "lets go for swimming"
        Output: "go for"

    Constraints:
        * 1 <= len(sentence) <= 100
        * sentence contains only letters
    """
 
    assert isinstance(sentence, str), "invalid inputs" # $_CONTRACT_$
    assert 1 <= len(sentence) <= 100, "invalid inputs" # $_CONTRACT_$
    assert "  " not in sentence, "invalid inputs" # $_CONTRACT_$
    assert all(word.isalpha() for word in sentence.split(" ")), "invalid inputs" # $_CONTRACT_$
 

    def is_prime(a):
        return not (a < 2 or any(a % x == 0 for x in range(2, int(a ** 0.5) + 1)))
    return " ".join(list(filter(lambda word: is_prime(len(word)), sentence.split(" "))))

 words_in_sentence [['This is a test'], ['lets go for swimming'], ['there is no place available here'], ['Hi I am Hussein'], ['go for it'], ['here'], ['here is']] [['I am a developer'], ['Python programming is fun'], ['I am a dquick sort algorithm is efficienteveloper'], ['mahthematics can bI athe qurown fox jumps over the lazy dogm a developethse q the lazy dog asy'], ['abcdefghijklmnopqrstuvwxyz abc defghijklmnopqrstuvwxyz']] 0
HumanEval/144 
def simplify(x, n):
    """Your task is to implement a function that will simplify the expression
    x * n. The function returns True if x * n evaluates to a whole number and False
    otherwise. Both x and n, are string representation of a fraction, and have the following format,
    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.

    You can assume that x, and n are valid fractions, and do not have zero as denominator.

    simplify("1/5", "5/1") = True
    simplify("1/6", "2/1") = False
    simplify("7/10", "10/2") = False
    """
 
    def contract(x): # $_CONTRACT_$
        assert isinstance(x, str), "invalid inputs" # $_CONTRACT_$
        xs = x.split("/") # $_CONTRACT_$
        assert len(xs) == 2, "invalid inputs" # $_CONTRACT_$
        assert xs[0].isdigit() and int(xs[0]) > 0, "invalid inputs" # $_CONTRACT_$
        assert xs[1].isdigit() and int(xs[1]) > 0, "invalid inputs" # $_CONTRACT_$
    contract(x) # $_CONTRACT_$
    contract(n) # $_CONTRACT_$
 

    x1, x2 = map(int, x.split("/"))
    n1, n2 = map(int, n.split("/"))
    return (x1 * n1) % (x2 * n2) == 0

 simplify [['1/5', '5/1'], ['1/6', '2/1'], ['5/1', '3/1'], ['7/10', '10/2'], ['2/10', '50/10'], ['7/2', '4/2'], ['11/6', '6/1'], ['2/3', '5/2'], ['5/2', '3/5'], ['2/4', '8/4'], ['2/4', '4/2'], ['1/5', '5/1'], ['1/5', '1/5']] [['3/4', '4/3'], ['8/3', '33/2'], ['9999/010', '176/9'], ['999999/1', '1/999999'], ['12/9', '12/9'], ['999999999/1', '1/1000000000'], ['8/3', '468/6'], ['5597/275775', '380/241']] 0
HumanEval/145 
def order_by_points(nums):
    """
    Write a function which sorts the given list of integers
    in ascending order according to the sum of their digits.
    Note: if there are several items with similar sum of their digits,
    order them based on their index in original list.

    For example:
    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]
    >>> order_by_points([]) == []
    """
 
    assert all(type(x) == int for x in nums), "invalid inputs" # $_CONTRACT_$
 
    def weight(x):
        x_list = list(str(x))
        if x_list[0] == "-":
            x_list = x_list[1:]
            x_list = list(map(int, x_list))
            x_list[0] = -x_list[0]
        else:
            x_list = list(map(int, x_list))
        return sum(x_list)
    return sorted(nums, key=weight)

 order_by_points [[[1, 11, -1, -11, -12]], [[1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]], [[]], [[1, -11, -32, 43, 54, -98, 2, -3]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]], [[0, 6, 6, -76, -21, 23, 4]]] [[[-5, -12, 9, 15]], [[-100, -200, -200]], [[888, -777, 666, -555, 444, -333, 222, -111]]] 0
HumanEval/146 
def specialFilter(nums):
    """Write a function that takes an array of numbers as input and returns 
    the number of elements in the array that are greater than 10 and both 
    first and last digits of a number are odd (1, 3, 5, 7, 9).
    For example:
    specialFilter([15, -73, 14, -15]) => 1 
    specialFilter([33, -2, -3, 45, 21, 109]) => 2
    """
 
    assert type(nums) == list, "invalid inputs" # $_CONTRACT_$
    assert all(type(x) == int for x in nums), "invalid inputs" # $_CONTRACT_$
 
    ans, odd = 0, ["1", "3", "5", "7", "9"]
    for num in nums:
        if num > 10 and str(num)[0] in odd and str(num)[-1] in odd:
            ans += 1
    return ans

 specialFilter [[[5, -2, 1, -5]], [[15, -73, 14, -15]], [[33, -2, -3, 45, 21, 109]], [[43, -12, 93, 125, 121, 109]], [[71, -2, -33, 75, 21, 19]], [[1]], [[]]] [[[24, -25, 9, 37, -71, -18]], [[22, -33, -46, 89, -91, 128]], [[12, 789, 13, 15, 16]], [[11, 232, 324, -876, 799]], [[33, -3, 45, 21, 109, 121, 357, 1892, 45, 45]], [[57, -23, -15, 42, 99, 56, 104, 42, 42]], [[55, -62, 7, 99, 23, 18]]] 0
HumanEval/147 
def get_max_triples(n):
    """
    You are given a positive integer n. You have to create an integer array a of length n.
        For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.
        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, 
    and a[i] + a[j] + a[k] is a multiple of 3.

    Example :
        Input: n = 5
        Output: 1
        Explanation: 
        a = [1, 3, 7, 13, 21]
        The only valid triple is (1, 7, 13).
    """
 
    assert type(n) == int, "invalid inputs" # $_CONTRACT_$
    assert n > 0, "invalid inputs" # $_CONTRACT_$
 

    if n <= 2: return False
    one_cnt = 1 + (n - 2) // 3 * 2 + (n - 2) % 3
    zero_cnt = n - one_cnt
    return one_cnt * (one_cnt - 1) * (one_cnt - 2) // 6 + zero_cnt * (zero_cnt - 1) * (zero_cnt - 2) // 6

 get_max_triples [[5], [6], [10], [100]] [[1], [3], [12], [20], [200]] 0
HumanEval/148 
def bf(planet1, planet2):
    '''
    There are eight planets in our solar system: the closerst to the Sun 
    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, 
    Uranus, Neptune.
    Write a function that takes two planet names as strings planet1 and planet2. 
    The function should return a tuple containing all planets whose orbits are 
    located between the orbit of planet1 and the orbit of planet2, sorted by 
    the proximity to the sun. 
    The function should return an empty tuple if planet1 or planet2
    are not correct planet names. 
    Examples
    bf("Jupiter", "Neptune") ==> ("Saturn", "Uranus")
    bf("Earth", "Mercury") ==> ("Venus")
    bf("Mercury", "Uranus") ==> ("Venus", "Earth", "Mars", "Jupiter", "Saturn")
    '''
 
    assert isinstance(planet1, str) and isinstance(planet2, str), "invalid inputs" # $_CONTRACT_$
 
    planets = ["Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune"]
    if planet1 not in planets or planet2 not in planets: return tuple()
    i1, i2 = planets.index(planet1), planets.index(planet2)
    if i1 > i2: i1, i2 = i2, i1
    return tuple(planets[i1 + 1 : i2])

 bf [['Jupiter', 'Neptune'], ['Jupiter', 'Neptune'], ['Earth', 'Mercury'], ['Earth', 'Mercury'], ['Mercury', 'Uranus'], ['Mercury', 'Uranus'], ['Neptune', 'Venus'], ['Neptune', 'Venus'], ['Earth', 'Earth'], ['Mars', 'Earth'], ['Jupiter', 'Makemake']] [['Neptune', 'Mercury'], ['Pluto', 'Mars'], ['Earth', 'MerVenuscury'], ['Earth', 'Earth'], ['Mercury', 'Saturn']] 0
HumanEval/149 
def sorted_list_sum(lst):
    """Write a function that accepts a list of strings as a parameter,
    deletes the strings that have odd lengths from it,
    and returns the resulted list with a sorted order,
    The list is always a list of strings and never an array of numbers,
    and it may contain duplicates.
    The order of the list should be ascending by length of each word, and you
    should return the list sorted by that rule.
    If two words have the same length, sort the list alphabetically.
    The function should return a list of strings in sorted order.
    You may assume that all words will have the same length.
    For example:
    assert list_sort(["aa", "a", "aaa"]) => ["aa"]
    assert list_sort(["ab", "a", "aaa", "cd"]) => ["ab", "cd"]
    """
 
    assert type(lst) == list, "invalid inputs" # $_CONTRACT_$
    assert all(type(x) == str for x in lst), "invalid inputs" # $_CONTRACT_$
 
    from functools import cmp_to_key
    def cmp(s: str, t: str):
        if len(s) != len(t):
            return len(s) - len(t)
        return -1 if s < t else 1
    return sorted(list(filter(lambda s: len(s) % 2 == 0, lst)), key=cmp_to_key(cmp))

 sorted_list_sum [[['aa', 'a', 'aaa']], [['school', 'AI', 'asdf', 'b']], [['d', 'b', 'c', 'a']], [['d', 'dcba', 'abcd', 'a']], [['AI', 'ai', 'au']], [['a', 'b', 'b', 'c', 'c', 'a']], [['aaaa', 'bbbb', 'dd', 'cc']]] [[['programming', 'python', 'java', 'ruby']], [['python', 'is', 'a', 'popular', 'language']], [['hello', 'world', 'this', 'is', 'a', 'test']], [['poupular', 'popuolar', 'lizardpython', 'is', '', 'popular', 'jumps']], [['hello', 'world', 'this', 'thiis', 'jumpshello', 'telizardst', 'istest', 'a', 'test', 'istest']], [['abcdefg']]] 0
HumanEval/150 
def x_or_y(n, x, y):
    """A simple program which should return the value of x if n is 
    a prime number and should return the value of y otherwise.

    Examples:
    for x_or_y(7, 34, 12) == 34
    for x_or_y(15, 8, 5) == 5
    
    """
 
    assert type(n) == int, "invalid inputs" # $_CONTRACT_$
 
    def is_prime(a):
        return not (a < 2 or any(a % x == 0 for x in range(2, int(a ** 0.5) + 1)))
    return x if is_prime(n) else y

 x_or_y [[7, 34, 12], [15, 8, 5], [3, 33, 5212], [1259, 3, 52], [7919, -1, 12], [3609, 1245, 583], [91, 56, 129], [6, 34, 1234], [1, 2, 0], [2, 2, 0]] [[11, 1, 0], [6, 123, 100], [2, 9, 50], [7919, 0, 14], [-101, 0, 18], [49, 0, 3], [62, 40, 20], [5, 100, 5], [1, 0, 3]] 0
HumanEval/151 
def double_the_difference(lst):
    '''
    Given a list of numbers, return the sum of squares of the numbers
    in the list that are odd. Ignore numbers that are negative or not integers.
    
    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10
    double_the_difference([-1, -2, 0]) == 0
    double_the_difference([9, -2]) == 81
    double_the_difference([0]) == 0  
   
    If the input list is empty, return 0.
    '''
 
    assert type(lst) == list, "invalid inputs" # $_CONTRACT_$
 
    ans = 0
    for num in lst:
        if num % 2 == 1 and num > 0 and "." not in str(num):
            ans += num ** 2
    return ans

 double_the_differencerue, True, False, False, True, False, False, False, False, False]], [[-4.6]]] 0
HumanEval/152 
def compare(game,guess):
    """I think we all remember that feeling when the result of some long-awaited
    event is finally known. The feelings and thoughts you have at that moment are
    definitely worth noting down and comparing.
    Your task is to determine if a person correctly guessed the results of a number of matches.
    You are given two arrays of scores and guesses of equal length, where each index shows a match. 
    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,
    the value is 0, and if not, the value is the absolute difference between the guess and the score.
    
    
    example:

    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]
    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]
    """
 
    assert type(game) == list and type(guess) == list, "invalid inputs" # $_CONTRACT_$
    assert all(type(x) == int for x in game), "invalid inputs" # $_CONTRACT_$
    assert all(type(x) == int for x in guess), "invalid inputs" # $_CONTRACT_$
    assert len(game) == len(guess), "invalid inputs" # $_CONTRACT_$
 

    return [abs(game[i] - guess[i]) for i in range(len(game))]

 compare [[[1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]], [[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]], [[1, 2, 3], [-1, -2, -3]], [[1, 2, 3, 5], [-1, 2, 3, 4]]] [[[1, 1, 1, 1, 1], [0, 0, 0, 0, 0]], [[10, 20, 30, 40, 50], [12, 22, 32, 42, 52]], [[13, 23, 9, 17, 25, 23], [11, 20, 10, 13, 14, 23]], [[], []], [[-1, -5, 0, 5, 5], [-1, -5, 0, 5, 5]], [[-1, -3, -2, 0, 4], [-2, -4, -1, 1, 0]], [[0, 10000000], [10000000, 0]]] 0
HumanEval/153 
def Strongest_Extension(class_name, extensions):
    """You will be given the name of a class (a string) and a list of extensions.
    The extensions are to be used to load additional classes to the class. The
    strength of the extension is as follows: Let CAP be the number of the uppercase
    letters in the extension's name, and let SM be the number of lowercase letters 
    in the extension's name, the strength is given by the fraction CAP - SM. 
    You should find the strongest extension and return a string in this 
    format: ClassName.StrongestExtensionName.
    If there are two or more extensions with the same strength, you should
    choose the one that comes first in the list.
    For example, if you are given "Slices" as the class and a list of the
    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension 
    (its strength is -1).
    Example:
    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'
    """
 
    assert isinstance(class_name, str), "invalid inputs" # $_CONTRACT_$
    assert type(extensions) == list, "invalid inputs" # $_CONTRACT_$
    assert all(isinstance(s, str) for s in extensions), "invalid inputs" # $_CONTRACT_$
    assert len(extensions) > 0, "invalid inputs" # $_CONTRACT_$
 

    def strength(s: str) -> int:
        CAP, SM = 0, 0
        for ch in s:
            if ch.isupper(): CAP += 1
            if ch.islower(): SM += 1
        return CAP - SM
    max_strength = max(map(strength, extensions))
    for e in extensions:
        if strength(e) == max_strength:
            return class_name + "." + e

 Strongest_Extension [['Watashi', ['tEN', 'niNE', 'eIGHt8OKe']], ['Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']], ['__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']], ['K', ['Ta', 'TAR', 't234An', 'cosSo']], ['__HAHA', ['Tab', '123', '781345', '-_-']], ['YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']], ['finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']], ['_', ['Bb', '91245']], ['Sp', ['671235', 'Bb']]] [['Test3', ['oneUPPERcaseletter', 'TWoUPPERcaseletTErs', 'threeUppercaseletters', 'fourlowercaseletters']], ['Test2', ['capitalLETTERS', 'lowercaseletters', 'mIxEdcAsE']], ['Test4', ['ALLUPPERcaseletters', 'ALLlowercaseletters', 'Nolettersatall123', '12345']], ['My_class', ['Aaa', 'ZZZZ', 'HHHMeyOneMoreClassClass', 'ddd', 'E', 'HHHHHH', 'E', 'ZZZZ']], ['SampleClass', ['aBc', 'dEf', 'Ghi']], ['ThisIsTheClassName', ['ThisIsTheExtension']], ['MYCLASS', ['qwerty', 'asdfgh', 'zxcvbn', 'QWERTY', 'MYCLASS', 'ASDFGHJKL', 'ZXCVBNM']], ['Animal', ['CAMel', 'hOrSE', 'DoG']]] 0
HumanEval/154 
def cycpattern_check(a , b):
    """You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word
    cycpattern_check("abcd","abd") => False
    cycpattern_check("hello","ell") => True
    cycpattern_check("whassup","psus") => False
    cycpattern_check("abab","baa") => True
    cycpattern_check("efef","eeff") => False
    cycpattern_check("himenss","simen") => True

    """
 
    assert isinstance(a, str) and isinstance(b, str), "invalid inputs" # $_CONTRACT_$
 
    if a == b:
        return True
    if b == "":
        return True
    for i in range(0, len(b)):
        if b[i:] + b[:i] in a:
            return True
    return False

 cycpattern_check [['xyzw', 'xyw'], ['yello', 'ell'], ['whattup', 'ptut'], ['efef', 'fee'], ['abab', 'aabb'], ['winemtt', 'tinem']] [['hello', 'olelh'], ['coffee', 'ffeco'], ['mississipi', 'mississipi'], ['racanagramecar', ''], ['abcdefg', 'cde'], ['programming', 'ammiprogr'], ['manipation', 'ationmani'], ['', ''], ['mississispi', 'mississispii'], ['anagram', 'margana']] 0
HumanEval/155 
def even_odd_count(num):
    """Given an integer. return a tuple that has the number of even and odd digits respectively.

     Example:
        even_odd_count(-12) ==> (1, 1)
        even_odd_count(123) ==> (1, 2)
    """
 
    assert type(num) == int, "invalid inputs" # $_CONTRACT_$
 
    even, odd = 0, 0
    for ch in str(num):
        if ch in "02468": even += 1
        if ch in "13579": odd += 1
    return even, odd

 even_odd_count [[7], [-78], [3452], [346211], [-345821], [-2], [-45347], [0]] [[2368], [-2468031], [0], [-7], [-1]] 0
HumanEval/156 
def int_to_mini_roman(number):
    """
    Given a positive integer, obtain its roman numeral equivalent as a string,
    and return it in lowercase.
    Restrictions: 1 <= num <= 1000

    Examples:
    >>> int_to_mini_roman(19) == 'xix'
    >>> int_to_mini_roman(152) == 'clii'
    >>> int_to_mini_roman(426) == 'cdxxvi'
    """
 
    assert type(number) == int, "invalid inputs" # $_CONTRACT_$
    assert 1 <= number <= 1000, "invalid inputs" # $_CONTRACT_$
 

    m = ["", "m"]
    c = ["", "c", "cc", "ccc", "cd", "d", "dc", "dcc", "dccc", "cm"]
    x = ["", "x", "xx", "xxx", "xl", "l", "lx", "lxx", "lxxx", "xc"]
    i = ["", "i", "ii", "iii", "iv", "v", "vi", "vii", "viii", "ix"]
    thousands = m[number // 1000]
    hundreds = c[(number % 1000) // 100]
    tens = x[(number % 100) // 10]
    ones = i[number % 10]
    return thousands + hundreds + tens + ones

 int_to_mini_roman [[19], [152], [251], [426], [500], [1], [4], [43], [90], [94], [532], [900], [994], [1000]] [[1000], [932], [111], [888], [399], [276], [603], [55], [44], [867], [400], [22], [599], [889], [45], [994]] 0
HumanEval/157 
def right_angle_triangle(a, b, c):
    '''
    Given the lengths of the three sides of a triangle. Return True if the three
    sides form a right-angled triangle, False otherwise.
    A right-angled triangle is a triangle in which one angle is right angle or 
    90 degree.
    Example:
    right_angle_triangle(3, 4, 5) == True
    right_angle_triangle(1, 2, 3) == False
    '''
 
    assert type(a) in [int, float] and type(b) in [int, float] and type(c) in [int, float], "invalid inputs" # $_CONTRACT_$
    assert a > 0 and b > 0 and c > 0, "invalid inputs" # $_CONTRACT_$
 
    
    return a ** 2 + b ** 2 == c ** 2 or a ** 2 + c ** 2 == b ** 2 or b ** 2 + c ** 2 == a ** 2

 right_angle_triangle [[3, 4, 5], [1, 2, 3], [10, 6, 8], [2, 2, 2], [7, 24, 25], [10, 5, 7], [5, 12, 13], [15, 8, 17], [48, 55, 73], [1, 1, 1], [2, 2, 10]] [[5, 13, 12], [5, 3, 4], [9, 12, 15], [60, 60, 60], [4, 5, 3], [15, 17, 6], [1, 1, 2], [26.117120159873124, 94.48837938393268, 94.48837938393268]] 0
HumanEval/158 
def find_max(words):
    """Write a function that accepts a list of strings.
    The list contains different words. Return the word with maximum number
    of unique characters. If multiple strings have maximum number of unique
    characters, return the one which comes first in lexicographical order.

    find_max(["name", "of", "string"]) == "string"
    find_max(["name", "enam", "game"]) == "enam"
    find_max(["aaaaaaa", "bb" ,"cc"]) == ""aaaaaaa"
    """
 
    assert type(words) == list, "invalid inputs" # $_CONTRACT_$
    assert all(isinstance(s, str) for s in words), "invalid inputs" # $_CONTRACT_$
    assert len(words) > 0, "invalid inputs" # $_CONTRACT_$
 

    mx_ch_cnt, ans = 0, ""
    for word in words:
        ch_cnt = len(set(word)) 
        if ch_cnt > mx_ch_cnt or (ch_cnt == mx_ch_cnt and word < ans):
            mx_ch_cnt, ans = ch_cnt, word
    return ans

 find_max [[['name', 'of', 'string']], [['name', 'enam', 'game']], [['aaaaaaa', 'bb', 'cc']], [['abc', 'cba']], [['play', 'this', 'game', 'of', 'footbott']], [['we', 'are', 'gonna', 'rock']], [['we', 'are', 'a', 'mad', 'nation']], [['this', 'is', 'a', 'prrk']], [['b']], [['play', 'play', 'play']]] [[['abacbdce', 'edcbacba', 'dbcaebda']], [['']], [['f', 'ff', '']], [['qrsutuv', 'aaddzz', 'qrstuv', 'ijklmn', 'efghip', 'cba', 'qrstuv']], [['abc', 'bcd', 'def', 'bbcd', 'efg']], [['Eaglexyx', 'iHaTethiss', 'eAgLe']], [['', 'apple', 'orange', 'abanana', 'grape', 'ana', 'banana', 'kiwi', 'pear']]] 0
HumanEval/159 
def eat(number, need, remaining):
    """
    You're a hungry rabbit, and you already have eaten a certain number of carrots,
    but now you need to eat more carrots to complete the day's meals.
    you should return an array of [ total number of eaten carrots after your meals,
                                    the number of carrots left after your meals ]
    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.
    
    Example:
    * eat(5, 6, 10) -> [11, 4]
    * eat(4, 8, 9) -> [12, 1]
    * eat(1, 10, 10) -> [11, 0]
    * eat(2, 11, 5) -> [7, 0]
    
    Variables:
    @number : integer
        the number of carrots that you have eaten.
    @need : integer
        the number of carrots that you need to eat.
    @remaining : integer
        the number of remaining carrots thet exist in stock
    
    Constrain:
    * 0 <= number <= 1000
    * 0 <= need <= 1000
    * 0 <= remaining <= 1000

    Have fun :)
    """
 
    assert type(number) == int and type(need) == int and type(remaining) == int, "invalid inputs" # $_CONTRACT_$
    assert 0 <= number <= 1000, "invalid inputs" # $_CONTRACT_$
    assert 0 <= need <= 1000, "invalid inputs" # $_CONTRACT_$
    assert 0 <= remaining <= 1000, "invalid inputs" # $_CONTRACT_$
 

    if need <= remaining:
        return [number + need, remaining - need]
    else:
        return [number + remaining, 0]

 eat [[5, 6, 10], [4, 8, 9], [1, 10, 10], [2, 11, 5], [4, 5, 7], [4, 5, 1]] [[0, 0, 0], [0, 10, 5], [2, 2, 2], [998, 7, 4], [999, 5, 500], [999, 1, 0]] 0
HumanEval/160 
def do_algebra(operator, operand):
    """
    Given two lists operator, and operand. The first list has basic algebra operations, and 
    the second list is a list of integers. Use the two given lists to build the algebric 
    expression and return the evaluation of this expression.

    The basic algebra operations:
    Addition ( + ) 
    Subtraction ( - ) 
    Multiplication ( * ) 
    Floor division ( // ) 
    Exponentiation ( ** ) 

    Example:
    operator['+', '*', '-']
    array = [2, 3, 4, 5]
    result = 2 + 3 * 4 - 5
    => result = 9

    Note:
        The length of operator list is equal to the length of operand list minus one.
        Operand is a list of of non-negative integers.
        Operator list has at least one operator, and operand list has at least two operands.

    """
 
    assert type(operator) == list and type(operand) == list, "invalid inputs" # $_CONTRACT_$
    assert len(operator) >= 1, "invalid inputs" # $_CONTRACT_$
    assert len(operand) == len(operator) + 1, "invalid inputs" # $_CONTRACT_$
    assert all(type(x) == int and x >= 0 for x in operand), "invalid inputs" # $_CONTRACT_$
    assert all(sgn in ["+", "-", "*", "//", "**"] for sgn in operator), "invalid inputs" # $_CONTRACT_$
    assert not any([operand[i] == 0 and operator[i-1] == "//" for i in range(1, len(operand))]), "invalid inputs" # $_CONTRACT_$ 

    exp = ""
    for i in range(len(operator)):
        exp += str(operand[i]) + operator[i]
    exp += str(operand[-1])
    return eval(exp)

 do_algebra [[['**', '*', '+'], [2, 3, 4, 5]], [['+', '*', '-'], [2, 3, 4, 5]], [['//', '*'], [7, 3, 4]]] [[['+', '-', '*', '//'], [5, 2, 3, 4, 7]], [['-', '//', '+', '*'], [10, 2, 4, 3, 6]]] 0
HumanEval/161 
def solve(s):
    """You are given a string s.
    if s[i] is a letter, reverse its case from lower to upper or vise versa, 
    otherwise keep it as it is.
    If the string contains no letters, reverse the string.
    The function should return the resulted string.
    Examples
    solve("1234") = "4321"
    solve("ab") = "AB"
    solve("#a@C") = "#A@c"
    """
 
    assert isinstance(s, str), "invalid inputs" # $_CONTRACT_$
 
    ans, has_letter = "", False
    for ch in s:
        if ch.isalpha():
            has_letter = True
            ans += ch.swapcase()
        else:
            ans += ch
    return ans if has_letter else s[::-1]

 solve [['AsDf'], ['1234'], ['ab'], ['#a@C'], ['#AsdfW^45'], ['#6@2'], ['#$a^D'], ['#ccc']] [['tH1s Is A t3sT!'], ['ABCDEFG'], ['!!!!1234!!!!'], ['aïöfتحïيلFاختبار تح버다음 네그이버버 블로그تحيوुपम الحالاتXübdef'], ['😀😂اختبار😎']] 0
HumanEval/162 
def string_to_md5(text):
    """
    Given a string 'text', return its md5 hash equivalent string.
    If 'text' is an empty string, return None.

    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'
    """
 
    assert isinstance(text, str), "invalid inputs" # $_CONTRACT_$
 
    if text == "": return None
    import hashlib
    m = hashlib.md5()
    m.update(text.encode("utf-8"))
    return m.hexdigest()

 string_to_md5 [['Hello world'], [''], ['A B C'], ['password']] [['5873hajsdklh'], [''], ['This is a long string to hash to MD5'], [' \t \n \r \x0c ']] 0
HumanEval/163 
def generate_integers(a, b):
    """
    Given two positive integers a and b, return the even digits between a
    and b, in ascending order.

    For example:
    generate_integers(2, 8) => [2, 4, 6, 8]
    generate_integers(8, 2) => [2, 4, 6, 8]
    generate_integers(10, 14) => []
    """
 
    assert type(a) == int and type(b) == int, "invalid inputs" # $_CONTRACT_$
    assert a > 0 and b > 0, "invalid inputs" # $_CONTRACT_$
 

    if a > b: a, b = b, a
    return [i for i in range(a, min(b + 1, 10)) if i % 2 == 0]

 generate_integers [[2, 10], [10, 2], [132, 2], [17, 89]] [[6, 12], [5, 4], [12, 5], [50, 60]] 0
