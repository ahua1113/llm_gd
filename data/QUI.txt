QUI/1
from PyQt5.QtWidgets import QWidget, QVBoxLayout, QPushButton
from PyQt5.QtGui import QColor, QPainter
from PyQt5.QtCore import Qt

class ColorChangerUI(QWidget):
    """生成包含两个按钮和一个圆形的界面，按钮点击可改变圆形颜色

    要求：
    1. 界面包含两个按钮："Turn Blue"和"Reset"
    2. 圆形初始颜色为黑色
    3. 点击"Turn Blue"按钮后圆形变为蓝色(RGB: 0,0,255)
    4. 点击"Reset"按钮恢复黑色(RGB:0,0,0)

    验证方式：通过控件属性检查实现功能验证
    """
    def __init__(self):
        super().__init__()
        self.init_ui()
        self.show()

    def init_ui(self):
        # 主布局
        layout = QVBoxLayout()

        # 圆形显示区域
        self.circle = CircleWidget()
        layout.addWidget(self.circle, alignment=Qt.AlignCenter)

        # 功能按钮
        self.btn_blue = QPushButton("Turn Blue")
        self.btn_blue.clicked.connect(self.make_blue)
        layout.addWidget(self.btn_blue)

        self.btn_reset = QPushButton("Reset")
        self.btn_reset.clicked.connect(self.reset_color)
        layout.addWidget(self.btn_reset)

        self.setLayout(layout)
        self.setWindowTitle('Color Changer')
        self.setFixedSize(200, 200)

    def make_blue(self):
        """改变圆形颜色为蓝色"""
        self.circle.set_color(Qt.blue)

    def reset_color(self):
        """重置圆形颜色为黑色"""
        self.circle.set_color(Qt.black)

class CircleWidget(QWidget):
    """自定义圆形显示控件"""
    def __init__(self):
        super().__init__()
        self._color = QColor(Qt.black)
        self.setFixedSize(100, 100)

    def set_color(self, color):
        self._color = QColor(color)
        self.update()  # 触发重绘

    def get_color(self):
        """获取当前颜色值(RGB元组)"""
        return (self._color.red(), self._color.green(), self._color.blue())

    def paintEvent(self, event):
        painter = QPainter(self)
        painter.setRenderHint(QPainter.Antialiasing)
        painter.setBrush(self._color)
        painter.drawEllipse(10, 10, 80, 80)

def test_color_changes():
    """验证颜色修改功能"""
    app = QApplication.instance() or QApplication([])

    # 初始化界面
    window = ColorChangerUI()

    # 验证初始状态
    assert window.circle.get_color() == (0, 0, 0), "初始颜色应为黑色"

    # 模拟点击蓝色按钮
    window.btn_blue.click()
    assert window.circle.get_color() == (0, 0, 255), "点击后应变为蓝色"

    # 模拟点击重置按钮
    window.btn_reset.click()
    assert window.circle.get_color() == (0, 0, 0), "重置后应恢复黑色"

    # 多次点击测试
    for _ in range(3):
        window.btn_blue.click()
        window.btn_reset.click()
    assert window.circle.get_color() == (0, 0, 0), "最终应保持黑色"

    window.close()