QUI/L1 静态布局 （20）

Q1/登录表单布局
class LoginForm(QSimWidget):
    """创建包含以下元素的静态登录界面：
    1. 顶部标题"Login"
    2. 用户名输入框（占位文本：Enter username）
    3. 密码输入框（占位文本：Enter password），排在用户名输入框下面
    4. 水平排列的"Cancel"和"Submit"按钮
    5. 所有元素垂直居中，窗口固定为300x250
    """
注：所有可能涉及到的组件这样导入：
from qsim.widgets import (QSimLayout, QSimApplication, QSimListWidget, QSimSignal, QSimColor, QSimPixmap, QSimLabel,
                          QSimHBoxLayout, QSimVBoxLayout, QSimWidget, QSimFontComboBox, QSimRadioButton, QSimPushButton,
                          QSimTabWidget, QSimCheckBox, QSimGroupBox, QSimListWidgetItem, QSimComboBox, QSimTableWidget,
                          QSimTableWidgetItem, QSimSpinBox, QSimSlider, QSimFrame, QSimProgressBar, QSimStatusBar,
                          QSimHeaderView, QSimLineEdit, Qt, QSimFont, QSimGridLayout)
用if __name__ == '__main__':启动界面



Q2/字体选择器
class FontSelectorDemo(QSimWidget):
    """创建字体选择界面：
    1. 顶部标签"选择字体："（左对齐，12pt）
    2. 下方显示QFontComboBox控件
    3. 底部显示示例文本"Hello Qt!"（使用选中字体实时预览）
    4. 窗口固定尺寸300x150
    """
注：所有可能涉及到的组件这样导入：
from qsim.widgets import (QSimLayout, QSimApplication, QSimListWidget, QSimSignal, QSimColor, QSimPixmap, QSimLabel,
                          QSimHBoxLayout, QSimVBoxLayout, QSimWidget, QSimFontComboBox, QSimRadioButton, QSimPushButton,
                          QSimTabWidget, QSimCheckBox, QSimGroupBox, QSimListWidgetItem, QSimComboBox, QSimTableWidget,
                          QSimTableWidgetItem, QSimSpinBox, QSimSlider, QSimFrame, QSimProgressBar, QSimStatusBar,
                          QSimHeaderView, QSimLineEdit, Qt, QSimFont, QSimGridLayout)
用if __name__ == '__main__':启动界面


Q3/信息展示卡片
class ProfileCard(QSimWidget):
    """创建用户信息卡片：
    1. 头像区域（灰色矩形，尺寸100x100）
    2. 下方显示姓名（居中对齐，14pt字体）
    3. 姓名字段下方显示分隔线（1px黑色实线）
    4. 窗口固定尺寸200x220
    """
注：所有可能涉及到的组件这样导入：
from qsim.widgets import (QSimLayout, QSimApplication, QSimListWidget, QSimSignal, QSimColor, QSimPixmap, QSimLabel,
                          QSimHBoxLayout, QSimVBoxLayout, QSimWidget, QSimFontComboBox, QSimRadioButton, QSimPushButton,
                          QSimTabWidget, QSimCheckBox, QSimGroupBox, QSimListWidgetItem, QSimComboBox, QSimTableWidget,
                          QSimTableWidgetItem, QSimSpinBox, QSimSlider, QSimFrame, QSimProgressBar, QSimStatusBar,
                          QSimHeaderView, QSimLineEdit, Qt, QSimFont, QSimGridLayout)
用if __name__ == '__main__':启动界面


Q4/设置面板
class SettingsPanel(QSimWidget):
    """生成包含三组选项的静态面板：
    1. "Preferences"分组框包含：
       - 复选框"Dark Mode"
       - 复选框"Auto Update"
    2. "Language"下拉框（固定选项：English/中文）
    3. 所有控件使用垂直布局，窗口宽度固定为400
    """
注：所有可能涉及到的组件这样导入：
from qsim.widgets import (QSimLayout, QSimApplication, QSimListWidget, QSimSignal, QSimColor, QSimPixmap, QSimLabel,
                          QSimHBoxLayout, QSimVBoxLayout, QSimWidget, QSimFontComboBox, QSimRadioButton, QSimPushButton,
                          QSimTabWidget, QSimCheckBox, QSimGroupBox, QSimListWidgetItem, QSimComboBox, QSimTableWidget,
                          QSimTableWidgetItem, QSimSpinBox, QSimSlider, QSimFrame, QSimProgressBar, QSimStatusBar,
                          QSimHeaderView, QSimLineEdit, Qt, QSimFont, QSimGridLayout)
用if __name__ == '__main__':启动界面

Q5/图片查看器框架
class ImageViewer(QSimWidget):
    """构建图片展示框架：
    1. 顶部标签"Placeholder Image"（斜体灰色）
    2. 中央显示200x200的灰色矩形区域
    3. 底部状态栏显示固定文本"Ready"
    4. 窗口尺寸锁定为250x300
    """
注：所有可能涉及到的组件这样导入：
from qsim.widgets import (QSimLayout, QSimApplication, QSimListWidget, QSimSignal, QSimColor, QSimPixmap, QSimLabel,
                          QSimHBoxLayout, QSimVBoxLayout, QSimWidget, QSimFontComboBox, QSimRadioButton, QSimPushButton,
                          QSimTabWidget, QSimCheckBox, QSimGroupBox, QSimListWidgetItem, QSimComboBox, QSimTableWidget,
                          QSimTableWidgetItem, QSimSpinBox, QSimSlider, QSimFrame, QSimProgressBar, QSimStatusBar,
                          QSimHeaderView, QSimLineEdit, Qt, QSimFont, QSimGridLayout)
用if __name__ == '__main__':启动界面


Q6/数据表格展示
class DataTable(QSimWidget):
    """创建固定数据表格：
    1. 3列表格：Name | Age | Department
    2. 预填充两行示例数据 data = [['Alice', '25', 'HR'],['Bob', '30', 'IT']]
    3. 表头字体加粗，表格宽度占满窗口
    4. 窗口尺寸设置为500x200
    """
注：所有可能涉及到的组件这样导入：
from qsim.widgets import (QSimLayout, QSimApplication, QSimListWidget, QSimSignal, QSimColor, QSimPixmap, QSimLabel,
                          QSimHBoxLayout, QSimVBoxLayout, QSimWidget, QSimFontComboBox, QSimRadioButton, QSimPushButton,
                          QSimTabWidget, QSimCheckBox, QSimGroupBox, QSimListWidgetItem, QSimComboBox, QSimTableWidget,
                          QSimTableWidgetItem, QSimSpinBox, QSimSlider, QSimFrame, QSimProgressBar, QSimStatusBar,
                          QSimHeaderView, QSimLineEdit, Qt, QSimFont, QSimGridLayout)
用if __name__ == '__main__':启动界面


Q7/进度指示器
class ProgressIndicator(QSimWidget):
    """展示进度相关控件：
    1. 顶部标签"Processing..."（蓝色文本）
    2. 横向进度条显示50%进度
    3. 进度条下方显示说明文本"Step 2/4"
    4. 所有元素垂直居中，窗口高度固定为150
    """
注：所有可能涉及到的组件这样导入：
from qsim.widgets import (QSimLayout, QSimApplication, QSimListWidget, QSimSignal, QSimColor, QSimPixmap, QSimLabel,
                          QSimHBoxLayout, QSimVBoxLayout, QSimWidget, QSimFontComboBox, QSimRadioButton, QSimPushButton,
                          QSimTabWidget, QSimCheckBox, QSimGroupBox, QSimListWidgetItem, QSimComboBox, QSimTableWidget,
                          QSimTableWidgetItem, QSimSpinBox, QSimSlider, QSimFrame, QSimProgressBar, QSimStatusBar,
                          QSimHeaderView, QSimLineEdit, Qt, QSimFont, QSimGridLayout)
用if __name__ == '__main__':启动界面


Q8/选项卡容器
class TabDemo(QSimWidget):
    """构建基础选项卡布局：
    1. 两个选项卡页："General" 和 "Advanced"
    2. General页包含"Settings"分组框（空内容）
    3. Advanced页包含红色警告图标和提示文本
    4. 选项卡宽度适应窗口（固定尺寸400x300）
    """
注：所有可能涉及到的组件这样导入：
from qsim.widgets import (QSimLayout, QSimApplication, QSimListWidget, QSimSignal, QSimColor, QSimPixmap, QSimLabel,
                          QSimHBoxLayout, QSimVBoxLayout, QSimWidget, QSimFontComboBox, QSimRadioButton, QSimPushButton,
                          QSimTabWidget, QSimCheckBox, QSimGroupBox, QSimListWidgetItem, QSimComboBox, QSimTableWidget,
                          QSimTableWidgetItem, QSimSpinBox, QSimSlider, QSimFrame, QSimProgressBar, QSimStatusBar,
                          QSimHeaderView, QSimLineEdit, Qt, QSimFont, QSimGridLayout)
用if __name__ == '__main__':启动界面


Q9/工具按钮栏
class ToolbarDemo(QSimWidget):
    """创建水平工具按钮组：
    1. 五个图标按钮（使用文本"[Icon]"代替实际图标）
    2. 按钮间隔均匀分布
    3. 底部显示细灰色分隔线
    4. 窗口宽度固定为600，高度80
    """
注：所有可能涉及到的组件这样导入：
from qsim.widgets import (QSimLayout, QSimApplication, QSimListWidget, QSimSignal, QSimColor, QSimPixmap, QSimLabel,
                          QSimHBoxLayout, QSimVBoxLayout, QSimWidget, QSimFontComboBox, QSimRadioButton, QSimPushButton,
                          QSimTabWidget, QSimCheckBox, QSimGroupBox, QSimListWidgetItem, QSimComboBox, QSimTableWidget,
                          QSimTableWidgetItem, QSimSpinBox, QSimSlider, QSimFrame, QSimProgressBar, QSimStatusBar,
                          QSimHeaderView, QSimLineEdit, Qt, QSimFont, QSimGridLayout)
用if __name__ == '__main__':启动界面


Q10/消息通知框
class NotificationBox(QSimWidget):
    """构建消息通知样式：
    1. 浅黄色背景圆角矩形区域
    2. 内部包含警告三角形图标（文本"[!]"表示）
    3. 右侧显示多行文本："System maintenance\nScheduled at 3:00 AM"
    4. 窗口尺寸固定为350x100
    """
注：所有可能涉及到的组件这样导入：
from qsim.widgets import (QSimLayout, QSimApplication, QSimListWidget, QSimSignal, QSimColor, QSimPixmap, QSimLabel,
                          QSimHBoxLayout, QSimVBoxLayout, QSimWidget, QSimFontComboBox, QSimRadioButton, QSimPushButton,
                          QSimTabWidget, QSimCheckBox, QSimGroupBox, QSimListWidgetItem, QSimComboBox, QSimTableWidget,
                          QSimTableWidgetItem, QSimSpinBox, QSimSlider, QSimFrame, QSimProgressBar, QSimStatusBar,
                          QSimHeaderView, QSimLineEdit, Qt, QSimFont, QSimGridLayout)
用if __name__ == '__main__':启动界面


Q11/搜索过滤器面板
class FilterPanel(QSimWidget):
    """创建复杂筛选条件布局：
    1. "Filter Options"分组框
    2. 包含日期范围选择（两个并排日期输入框）
    3. 包含"Category"多选框（选项：A/B/C）
    4. 使用网格布局对齐所有标签和输入框
    5. 窗口最小宽度设置为500
    """
注：所有可能涉及到的组件这样导入：
from qsim.widgets import (QSimLayout, QSimApplication, QSimListWidget, QSimSignal, QSimColor, QSimPixmap, QSimLabel,
                          QSimHBoxLayout, QSimVBoxLayout, QSimWidget, QSimFontComboBox, QSimRadioButton, QSimPushButton,
                          QSimTabWidget, QSimCheckBox, QSimGroupBox, QSimListWidgetItem, QSimComboBox, QSimTableWidget,
                          QSimTableWidgetItem, QSimSpinBox, QSimSlider, QSimFrame, QSimProgressBar, QSimStatusBar,
                          QSimHeaderView, QSimLineEdit, Qt, QSimFont, QSimGridLayout)
用if __name__ == '__main__':启动界面


Q12/数值输入面板
class NumberInputDemo(QSimWidget):
    """创建数值输入界面：
    1. 使用QSpinBox和QSlider组合控制数值（范围0-100）
    2. 左侧显示"Value:"标签
    3. 滑动条与数字输入框水平对齐
    4. 窗口固定尺寸300x100
    """
注：所有可能涉及到的组件这样导入：
from qsim.widgets import (QSimLayout, QSimApplication, QSimListWidget, QSimSignal, QSimColor, QSimPixmap, QSimLabel,
                          QSimHBoxLayout, QSimVBoxLayout, QSimWidget, QSimFontComboBox, QSimRadioButton, QSimPushButton,
                          QSimTabWidget, QSimCheckBox, QSimGroupBox, QSimListWidgetItem, QSimComboBox, QSimTableWidget,
                          QSimTableWidgetItem, QSimSpinBox, QSimSlider, QSimFrame, QSimProgressBar, QSimStatusBar,
                          QSimHeaderView, QSimLineEdit, Qt, QSimFont, QSimGridLayout)
用if __name__ == '__main__':启动界面


Q13/单选按钮组
class RadioGroupDemo(QSimWidget):
    """构建性别选择组件：
    1. "Gender"分组框包含三个单选按钮：Male/Female/Other
    2. 单选按钮垂直排列
    3. 默认选中Male
    4. 窗口宽度固定为200
    """
注：所有可能涉及到的组件这样导入：
from qsim.widgets import (QSimLayout, QSimApplication, QSimListWidget, QSimSignal, QSimColor, QSimPixmap, QSimLabel,
                          QSimHBoxLayout, QSimVBoxLayout, QSimWidget, QSimFontComboBox, QSimRadioButton, QSimPushButton,
                          QSimTabWidget, QSimCheckBox, QSimGroupBox, QSimListWidgetItem, QSimComboBox, QSimTableWidget,
                          QSimTableWidgetItem, QSimSpinBox, QSimSlider, QSimFrame, QSimProgressBar, QSimStatusBar,
                          QSimHeaderView, QSimLineEdit, Qt, QSimFont, QSimGridLayout)
用if __name__ == '__main__':启动界面


Q14/颜色选择器布局
class ColorPickerDemo(QSimWidget):
    """创建基础颜色选择器：
    1. 三个QSlider分别控制RGB数值
    2. 每个滑动条左侧显示颜色通道标签
    3. 右侧显示当前颜色预览方块（QFrame）
    4. 窗口固定尺寸400x200
    """
注：所有可能涉及到的组件这样导入：
from qsim.widgets import (QSimLayout, QSimApplication, QSimListWidget, QSimSignal, QSimColor, QSimPixmap, QSimLabel,
                          QSimHBoxLayout, QSimVBoxLayout, QSimWidget, QSimFontComboBox, QSimRadioButton, QSimPushButton,
                          QSimTabWidget, QSimCheckBox, QSimGroupBox, QSimListWidgetItem, QSimComboBox, QSimTableWidget,
                          QSimTableWidgetItem, QSimSpinBox, QSimSlider, QSimFrame, QSimProgressBar, QSimStatusBar,
                          QSimHeaderView, QSimLineEdit, Qt, QSimFont, QSimGridLayout)
用if __name__ == '__main__':启动界面


Q15/列表选择器
class ListSelectorDemo(QSimWidget):
    """构建双列列表选择器：
    1. 左侧QListWidget显示可选项目（示例：Item 1-5）
    2. 右侧QListWidget显示已选项目
    3. 中间垂直排列"Add>>"和"<<Remove"按钮
    4. 窗口固定尺寸500x300
    """
注：所有可能涉及到的组件这样导入：
from qsim.widgets import (QSimLayout, QSimApplication, QSimListWidget, QSimSignal, QSimColor, QSimPixmap, QSimLabel,
                          QSimHBoxLayout, QSimVBoxLayout, QSimWidget, QSimFontComboBox, QSimRadioButton, QSimPushButton,
                          QSimTabWidget, QSimCheckBox, QSimGroupBox, QSimListWidgetItem, QSimComboBox, QSimTableWidget,
                          QSimTableWidgetItem, QSimSpinBox, QSimSlider, QSimFrame, QSimProgressBar, QSimStatusBar,
                          QSimHeaderView, QSimLineEdit, Qt, QSimFont, QSimGridLayout)
用if __name__ == '__main__':启动界面


Q16/日历组件布局
class CalendarDemo(QSimWidget):
    """构建日历展示界面：
    1. 顶部显示QCalendarWidget（显示当前月）
    2. 下方显示日期选择控件QDateEdit
    3. 使用垂直布局间隔10px
    4. 窗口固定尺寸400x350
    """
注：所有可能涉及到的组件这样导入：
from qsim.widgets import (QSimLayout, QSimApplication, QSimListWidget, QSimSignal, QSimColor, QSimPixmap, QSimLabel,
                          QSimHBoxLayout, QSimVBoxLayout, QSimWidget, QSimFontComboBox, QSimRadioButton, QSimPushButton,
                          QSimTabWidget, QSimCheckBox, QSimGroupBox, QSimListWidgetItem, QSimComboBox, QSimTableWidget,
                          QSimTableWidgetItem, QSimSpinBox, QSimSlider, QSimFrame, QSimProgressBar, QSimStatusBar,
                          QSimHeaderView, QSimLineEdit, Qt, QSimFont, QSimGridLayout)
用if __name__ == '__main__':启动界面


Q17/滚动区域示例
class ScrollAreaDemo(QSimWidget):
    """创建可滚动内容区域：
    1. QScrollArea包含20个带序号的QLabel
    2. 每个标签高度固定40px
    3. 主窗口固定尺寸300x250
    4. 显示垂直滚动条
    """
注：所有可能涉及到的组件这样导入：
from qsim.widgets import (QSimLayout, QSimApplication, QSimListWidget, QSimSignal, QSimColor, QSimPixmap, QSimLabel,
                          QSimHBoxLayout, QSimVBoxLayout, QSimWidget, QSimFontComboBox, QSimRadioButton, QSimPushButton,
                          QSimTabWidget, QSimCheckBox, QSimGroupBox, QSimListWidgetItem, QSimComboBox, QSimTableWidget,
                          QSimTableWidgetItem, QSimSpinBox, QSimSlider, QSimFrame, QSimProgressBar, QSimStatusBar,
                          QSimHeaderView, QSimLineEdit, Qt, QSimFont, QSimGridLayout)
用if __name__ == '__main__':启动界面


Q18/分屏界面布局
class SplitViewDemo(QSimWidget):
    """创建分割视图：
    1. 使用QSplitter水平分割两个QTextEdit
    2. 左侧默认显示"Left Panel"文本
    3. 右侧默认显示"Right Panel"文本
    4. 窗口固定尺寸600x400
    """
注：所有可能涉及到的组件这样导入：
from qsim.widgets import (QSimLayout, QSimApplication, QSimListWidget, QSimSignal, QSimColor, QSimPixmap, QSimLabel,
                          QSimHBoxLayout, QSimVBoxLayout, QSimWidget, QSimFontComboBox, QSimRadioButton, QSimPushButton,
                          QSimTabWidget, QSimCheckBox, QSimGroupBox, QSimListWidgetItem, QSimComboBox, QSimTableWidget,
                          QSimTableWidgetItem, QSimSpinBox, QSimSlider, QSimFrame, QSimProgressBar, QSimStatusBar,
                          QSimHeaderView, QSimLineEdit, Qt, QSimFont, QSimGridLayout)
用if __name__ == '__main__':启动界面


Q19/数字仪表盘
class DigitalDashboard(QSimWidget):
    """构建仪表显示组件：
    1. 使用QLCDNumber显示数字12345
    2. 下方显示QDial旋钮控件
    3. 所有元素垂直居中
    4. 窗口固定尺寸200x250
    """
注：所有可能涉及到的组件这样导入：
from qsim.widgets import (QSimLayout, QSimApplication, QSimListWidget, QSimSignal, QSimColor, QSimPixmap, QSimLabel,
                          QSimHBoxLayout, QSimVBoxLayout, QSimWidget, QSimFontComboBox, QSimRadioButton, QSimPushButton,
                          QSimTabWidget, QSimCheckBox, QSimGroupBox, QSimListWidgetItem, QSimComboBox, QSimTableWidget,
                          QSimTableWidgetItem, QSimSpinBox, QSimSlider, QSimFrame, QSimProgressBar, QSimStatusBar,
                          QSimHeaderView, QSimLineEdit, Qt, QSimFont, QSimGridLayout)
用if __name__ == '__main__':启动界面


Q20/多格式输入表单
class ComplexFormDemo(QSimWidget):
    """创建混合输入表单：
    1. 包含QLineEdit（姓名）、QComboBox（国家）、QTextEdit（备注）
    2. 使用网格布局对齐所有标签和输入框
    3. 国家下拉框包含3个示例选项
    4. 窗口固定尺寸450x300
    """
注：所有可能涉及到的组件这样导入：
from qsim.widgets import (QSimLayout, QSimApplication, QSimListWidget, QSimSignal, QSimColor, QSimPixmap, QSimLabel,
                          QSimHBoxLayout, QSimVBoxLayout, QSimWidget, QSimFontComboBox, QSimRadioButton, QSimPushButton,
                          QSimTabWidget, QSimCheckBox, QSimGroupBox, QSimListWidgetItem, QSimComboBox, QSimTableWidget,
                          QSimTableWidgetItem, QSimSpinBox, QSimSlider, QSimFrame, QSimProgressBar, QSimStatusBar,
                          QSimHeaderView, QSimLineEdit, Qt, QSimFont, QSimGridLayout)
用if __name__ == '__main__':启动界面




QUI/L2 单事件绑定  （20）




QUI/L3 动态状态 + 条件渲染   （20）
